#include "monty.h"
#include "fusion_p.h"
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::NearOptimal: os << "AccSolutionStatus::NearOptimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::NearOptimal: os << "SolutionStatus::NearOptimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::NearFeasible: os << "SolutionStatus::NearFeasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::NearCertificate: os << "SolutionStatus::NearCertificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _143,    std::shared_ptr< monty::ndarray< long long,1 > > _144,    int _145,    int _146,    int _147,    std::shared_ptr< monty::ndarray< long long,1 > > _148) { mosek::fusion::p_Sort::argTransposeSort(_143,_144,_145,_146,_147,_148); }void mosek::fusion::p_Sort::argTransposeSort( std::shared_ptr< monty::ndarray< long long,1 > > _143,std::shared_ptr< monty::ndarray< long long,1 > > _144,int _145,int _146,int _147,std::shared_ptr< monty::ndarray< long long,1 > > _148){ int _7503 = (int)0; int _7504 = ((_145 * _147) + (int)1); for (int _149 = _7503;_149<_7504;++_149){ (((*_144)(_149)) = (int)0); }int _7505 = (int)0; int _7506 = (int)((_148)->size(0)); for (int _150 = _7505;_150<_7506;++_150){ ( ++ ((*_144)(((((((*_148)(((*_143)(_150)))) / (_146 * _147)) * _147) + (((*_148)(((*_143)(_150)))) % _147)) + (int)1))) ); }int _7507 = (int)0; int _7508 = (_145 * _147); for (int _151 = _7507;_151<_7508;++_151){ (((*_144)((_151 + (int)1))) = (((*_144)((_151 + (int)1))) + ((*_144)(_151)))); }std::shared_ptr< monty::ndarray< long long,1 > > _152 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7509; for (int _153=(int)0, _7510=(int)((_143)->size(0)); _153 < _7510;++_153)_7509.push_back(((*_143)(_153))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7509.size()),_7509.begin(),_7509.end())); })(); long long _7511 = (long long)0; long long _7512 = (long long)((_148)->size(0)); for (long long _154 = _7511;_154<_7512;++_154){ long long _155 = (((((*_148)(((*_152)(_154)))) / (_146 * _147)) * _147) + (((*_148)(((*_152)(_154)))) % _147)); (((*_143)(((*_144)(_155)))) = ((*_152)(_154))); ( ++ ((*_144)(_155)) ); }}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _156,    std::shared_ptr< monty::ndarray< long long,1 > > _157) { mosek::fusion::p_Sort::argsort(_156,_157); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _156,std::shared_ptr< monty::ndarray< long long,1 > > _157){ ::mosek::fusion::p_Sort::argsort(_156,_157,(long long)((int)0),(long long)((int)((_156)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _158,    std::shared_ptr< monty::ndarray< int,1 > > _159) { mosek::fusion::p_Sort::argsort(_158,_159); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _158,std::shared_ptr< monty::ndarray< int,1 > > _159){ ::mosek::fusion::p_Sort::argsort(_158,_159,(long long)((int)0),(long long)((int)((_158)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _160,    std::shared_ptr< monty::ndarray< long long,1 > > _161,    std::shared_ptr< monty::ndarray< long long,1 > > _162) { mosek::fusion::p_Sort::argsort(_160,_161,_162); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _160,std::shared_ptr< monty::ndarray< long long,1 > > _161,std::shared_ptr< monty::ndarray< long long,1 > > _162){ ::mosek::fusion::p_Sort::argsort(_160,_161,_162,(long long)((int)0),(long long)((int)((_160)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _163,    std::shared_ptr< monty::ndarray< int,1 > > _164,    std::shared_ptr< monty::ndarray< int,1 > > _165) { mosek::fusion::p_Sort::argsort(_163,_164,_165); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _163,std::shared_ptr< monty::ndarray< int,1 > > _164,std::shared_ptr< monty::ndarray< int,1 > > _165){ ::mosek::fusion::p_Sort::argsort(_163,_164,_165,(long long)((int)0),(long long)((int)((_163)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _166,    std::shared_ptr< monty::ndarray< long long,1 > > _167,    long long _168,    long long _169) { mosek::fusion::p_Sort::argsort(_166,_167,_168,_169); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _166,std::shared_ptr< monty::ndarray< long long,1 > > _167,long long _168,long long _169){ ::mosek::fusion::p_Sort::argsort(_166,_167,_168,_169,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _170,    std::shared_ptr< monty::ndarray< int,1 > > _171,    long long _172,    long long _173) { mosek::fusion::p_Sort::argsort(_170,_171,_172,_173); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _170,std::shared_ptr< monty::ndarray< int,1 > > _171,long long _172,long long _173){ ::mosek::fusion::p_Sort::argsort(_170,_171,_172,_173,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    std::shared_ptr< monty::ndarray< long long,1 > > _176,    long long _177,    long long _178) { mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,_178); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,std::shared_ptr< monty::ndarray< long long,1 > > _176,long long _177,long long _178){ ::mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,_178,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _179,    std::shared_ptr< monty::ndarray< int,1 > > _180,    std::shared_ptr< monty::ndarray< int,1 > > _181,    long long _182,    long long _183) { mosek::fusion::p_Sort::argsort(_179,_180,_181,_182,_183); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _179,std::shared_ptr< monty::ndarray< int,1 > > _180,std::shared_ptr< monty::ndarray< int,1 > > _181,long long _182,long long _183){ ::mosek::fusion::p_Sort::argsort(_179,_180,_181,_182,_183,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _184,    std::shared_ptr< monty::ndarray< long long,1 > > _185,    long long _186,    long long _187,    bool _188) { mosek::fusion::p_Sort::argsort(_184,_185,_186,_187,_188); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _184,std::shared_ptr< monty::ndarray< long long,1 > > _185,long long _186,long long _187,bool _188){ if (((! _188) || ((_187 - _186) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_184,_185,_186,_187); }else if ((! ::mosek::fusion::p_Sort::issorted(_184,_185,_186,_187,_188))){ std::shared_ptr< monty::ndarray< long long,1 > > _189 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4))); int _190 = (int)2; ::mosek::fusion::p_Sort::getminmax(_184,_185,nullptr,_186,_187,_189); if (((((*_189)((int)1)) - ((*_189)((int)0))) < (_190 * (_187 - _186)))){ ::mosek::fusion::p_Sort::argbucketsort(_184,_185,_186,_187,((*_189)((int)0)),((*_189)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_184,_185,_186,_187); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _191,    std::shared_ptr< monty::ndarray< int,1 > > _192,    long long _193,    long long _194,    bool _195) { mosek::fusion::p_Sort::argsort(_191,_192,_193,_194,_195); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _191,std::shared_ptr< monty::ndarray< int,1 > > _192,long long _193,long long _194,bool _195){ if (((! _195) || ((_194 - _193) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_191,_192,_193,_194); }else if ((! ::mosek::fusion::p_Sort::issorted(_191,_192,_193,_194,_195))){ std::shared_ptr< monty::ndarray< int,1 > > _196 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4))); int _197 = (int)2; ::mosek::fusion::p_Sort::getminmax(_191,_192,nullptr,_193,_194,_196); if (((((*_196)((int)1)) - ((*_196)((int)0))) < (_197 * (_194 - _193)))){ ::mosek::fusion::p_Sort::argbucketsort(_191,_192,_193,_194,((*_196)((int)0)),((*_196)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_191,_192,_193,_194); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    std::shared_ptr< monty::ndarray< long long,1 > > _200,    long long _201,    long long _202,    bool _203) { mosek::fusion::p_Sort::argsort(_198,_199,_200,_201,_202,_203); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,std::shared_ptr< monty::ndarray< long long,1 > > _200,long long _201,long long _202,bool _203){ if (((! _203) || ((_202 - _201) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201,_202); }else if ((! ::mosek::fusion::p_Sort::issorted(_198,_199,_200,_201,_202,_203))){ std::shared_ptr< monty::ndarray< long long,1 > > _204 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4))); int _205 = (int)2; ::mosek::fusion::p_Sort::getminmax(_198,_199,_200,_201,_202,_204); if ((((((*_204)((int)1)) - ((*_204)((int)0))) < (_205 * (_202 - _201))) && ((((*_204)((int)3)) - ((*_204)((int)2))) < (_205 * (_202 - _201))))){ ::mosek::fusion::p_Sort::argbucketsort(_198,_200,_201,_202,((*_204)((int)2)),((*_204)((int)3))); ::mosek::fusion::p_Sort::argbucketsort(_198,_199,_201,_202,((*_204)((int)0)),((*_204)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201,_202); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _206,    std::shared_ptr< monty::ndarray< int,1 > > _207,    std::shared_ptr< monty::ndarray< int,1 > > _208,    long long _209,    long long _210,    bool _211) { mosek::fusion::p_Sort::argsort(_206,_207,_208,_209,_210,_211); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _206,std::shared_ptr< monty::ndarray< int,1 > > _207,std::shared_ptr< monty::ndarray< int,1 > > _208,long long _209,long long _210,bool _211){ if (((! _211) || ((_210 - _209) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210); }else if ((! ::mosek::fusion::p_Sort::issorted(_206,_207,_208,_209,_210,_211))){ std::shared_ptr< monty::ndarray< int,1 > > _212 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4))); int _213 = (int)2; ::mosek::fusion::p_Sort::getminmax(_206,_207,_208,_209,_210,_212); if ((((((*_212)((int)1)) - ((*_212)((int)0))) < (_213 * (_210 - _209))) && ((((*_212)((int)3)) - ((*_212)((int)2))) < (_213 * (_210 - _209))))){ ::mosek::fusion::p_Sort::argbucketsort(_206,_208,_209,_210,((*_212)((int)2)),((*_212)((int)3))); ::mosek::fusion::p_Sort::argbucketsort(_206,_207,_209,_210,((*_212)((int)0)),((*_212)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210); }}else {}}void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _214,    std::shared_ptr< monty::ndarray< long long,1 > > _215,    long long _216,    long long _217,    long long _218,    long long _219) { mosek::fusion::p_Sort::argbucketsort(_214,_215,_216,_217,_218,_219); }void mosek::fusion::p_Sort::argbucketsort( std::shared_ptr< monty::ndarray< long long,1 > > _214,std::shared_ptr< monty::ndarray< long long,1 > > _215,long long _216,long long _217,long long _218,long long _219){ ::mosek::fusion::Utils::Tools::bucketsort(_214,_216,_217,_215,_218,_219); }void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _220,    std::shared_ptr< monty::ndarray< int,1 > > _221,    long long _222,    long long _223,    int _224,    int _225) { mosek::fusion::p_Sort::argbucketsort(_220,_221,_222,_223,_224,_225); }void mosek::fusion::p_Sort::argbucketsort( std::shared_ptr< monty::ndarray< long long,1 > > _220,std::shared_ptr< monty::ndarray< int,1 > > _221,long long _222,long long _223,int _224,int _225){ ::mosek::fusion::Utils::Tools::bucketsort(_220,_222,_223,_221,_224,_225); }void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _226,    std::shared_ptr< monty::ndarray< long long,1 > > _227,    std::shared_ptr< monty::ndarray< long long,1 > > _228,    long long _229,    long long _230,    std::shared_ptr< monty::ndarray< long long,1 > > _231) { mosek::fusion::p_Sort::getminmax(_226,_227,_228,_229,_230,_231); }void mosek::fusion::p_Sort::getminmax( std::shared_ptr< monty::ndarray< long long,1 > > _226,std::shared_ptr< monty::ndarray< long long,1 > > _227,std::shared_ptr< monty::ndarray< long long,1 > > _228,long long _229,long long _230,std::shared_ptr< monty::ndarray< long long,1 > > _231){ (((*_231)((int)0)) = ((*_227)(((*_226)(_229))))); (((*_231)((int)1)) = ((*_227)(((*_226)(_229))))); long long _7513 = (_229 + (int)1); long long _7514 = _230; for (long long _232 = _7513;_232<_7514;++_232){ if ((((*_231)((int)0)) > ((*_227)(((*_226)(_232)))))){ (((*_231)((int)0)) = ((*_227)(((*_226)(_232))))); }else {}if ((((*_231)((int)1)) < ((*_227)(((*_226)(_232)))))){ (((*_231)((int)1)) = ((*_227)(((*_226)(_232))))); }else {}}if (_228){ (((*_231)((int)2)) = ((*_228)(((*_226)(_229))))); (((*_231)((int)3)) = ((*_228)(((*_226)(_229))))); long long _7515 = (_229 + (int)1); long long _7516 = _230; for (long long _233 = _7515;_233<_7516;++_233){ if ((((*_231)((int)2)) > ((*_228)(((*_226)(_233)))))){ (((*_231)((int)2)) = ((*_228)(((*_226)(_233))))); }else {}if ((((*_231)((int)3)) < ((*_228)(((*_226)(_233)))))){ (((*_231)((int)3)) = ((*_228)(((*_226)(_233))))); }else {}}}else {}}void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    std::shared_ptr< monty::ndarray< int,1 > > _236,    long long _237,    long long _238,    std::shared_ptr< monty::ndarray< int,1 > > _239) { mosek::fusion::p_Sort::getminmax(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::getminmax( std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,std::shared_ptr< monty::ndarray< int,1 > > _236,long long _237,long long _238,std::shared_ptr< monty::ndarray< int,1 > > _239){ (((*_239)((int)0)) = ((*_235)(((*_234)(_237))))); (((*_239)((int)1)) = ((*_235)(((*_234)(_237))))); long long _7517 = (_237 + (int)1); long long _7518 = _238; for (long long _240 = _7517;_240<_7518;++_240){ if ((((*_239)((int)0)) > ((*_235)(((*_234)(_240)))))){ (((*_239)((int)0)) = ((*_235)(((*_234)(_240))))); }else {}if ((((*_239)((int)1)) < ((*_235)(((*_234)(_240)))))){ (((*_239)((int)1)) = ((*_235)(((*_234)(_240))))); }else {}}if (_236){ (((*_239)((int)2)) = ((*_236)(((*_234)(_237))))); (((*_239)((int)3)) = ((*_236)(((*_234)(_237))))); long long _7519 = (_237 + (int)1); long long _7520 = _238; for (long long _241 = _7519;_241<_7520;++_241){ if ((((*_239)((int)2)) > ((*_236)(((*_234)(_241)))))){ (((*_239)((int)2)) = ((*_236)(((*_234)(_241))))); }else {}if ((((*_239)((int)3)) < ((*_236)(((*_234)(_241)))))){ (((*_239)((int)3)) = ((*_236)(((*_234)(_241))))); }else {}}}else {}}bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _242,    std::shared_ptr< monty::ndarray< long long,1 > > _243,    long long _244,    long long _245,    bool _246) { return mosek::fusion::p_Sort::issorted(_242,_243,_244,_245,_246); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _242,std::shared_ptr< monty::ndarray< long long,1 > > _243,long long _244,long long _245,bool _246){ long long _7521 = _244; long long _7522 = (_245 - (int)1); for (long long _247 = _7521;_247<_7522;++_247){ if ((((*_243)(((*_242)(_247)))) > ((*_243)(((*_242)((_247 + (int)1))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _248,    std::shared_ptr< monty::ndarray< int,1 > > _249,    long long _250,    long long _251,    bool _252) { return mosek::fusion::p_Sort::issorted(_248,_249,_250,_251,_252); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _248,std::shared_ptr< monty::ndarray< int,1 > > _249,long long _250,long long _251,bool _252){ long long _7523 = _250; long long _7524 = (_251 - (int)1); for (long long _253 = _7523;_253<_7524;++_253){ if ((((*_249)(((*_248)(_253)))) > ((*_249)(((*_248)((_253 + (int)1))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _254,    std::shared_ptr< monty::ndarray< long long,1 > > _255,    std::shared_ptr< monty::ndarray< long long,1 > > _256,    long long _257,    long long _258,    bool _259) { return mosek::fusion::p_Sort::issorted(_254,_255,_256,_257,_258,_259); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _254,std::shared_ptr< monty::ndarray< long long,1 > > _255,std::shared_ptr< monty::ndarray< long long,1 > > _256,long long _257,long long _258,bool _259){ long long _7525 = _257; long long _7526 = (_258 - (int)1); for (long long _260 = _7525;_260<_7526;++_260){ if (((((*_255)(((*_254)(_260)))) > ((*_255)(((*_254)((_260 + (int)1)))))) || ((((*_255)(((*_254)((_260 + (int)1))))) == ((*_255)(((*_254)(_260))))) && (((*_256)(((*_254)(_260)))) > ((*_256)(((*_254)((_260 + (int)1))))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _261,    std::shared_ptr< monty::ndarray< int,1 > > _262,    std::shared_ptr< monty::ndarray< int,1 > > _263,    long long _264,    long long _265,    bool _266) { return mosek::fusion::p_Sort::issorted(_261,_262,_263,_264,_265,_266); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _261,std::shared_ptr< monty::ndarray< int,1 > > _262,std::shared_ptr< monty::ndarray< int,1 > > _263,long long _264,long long _265,bool _266){ long long _7527 = _264; long long _7528 = (_265 - (int)1); for (long long _267 = _7527;_267<_7528;++_267){ if (((((*_262)(((*_261)(_267)))) > ((*_262)(((*_261)((_267 + (int)1)))))) || ((((*_262)(((*_261)(_267)))) == ((*_262)(((*_261)((_267 + (int)1)))))) && (((*_263)(((*_261)(_267)))) > ((*_263)(((*_261)((_267 + (int)1))))))))){ return false; }else {}}return true; }void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (monty::rc_ptr< ::mosek::fusion::Set > _268){ return new mosek::fusion::IndexCounter(_268); }mosek::fusion::IndexCounter::IndexCounter  (monty::rc_ptr< ::mosek::fusion::Set > _268) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_268); }void mosek::fusion::p_IndexCounter::_initialize  (monty::rc_ptr< ::mosek::fusion::Set > _268){monty::rc_reserve __reserve_this(_pubthis); { { (n = mosek::fusion::p_Set::_get_impl(_268)->nd); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); (start = (long long)0); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7529 = (int)0; int _7530 = n; for (int _269 = _7529;_269<_7530;++_269){ (((*strides)(_269)) = _268->stride(_269)); }(dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); int _7531 = (int)0; int _7532 = n; for (int _270 = _7531;_270<_7532;++_270){ (((*dims)(_270)) = _268->dim(_270)); }}}}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _271,    std::shared_ptr< monty::ndarray< int,1 > > _272,    monty::rc_ptr< ::mosek::fusion::Set > _273){ return new mosek::fusion::IndexCounter(_271,_272,_273); }mosek::fusion::IndexCounter::IndexCounter  (long long _271,    std::shared_ptr< monty::ndarray< int,1 > > _272,    monty::rc_ptr< ::mosek::fusion::Set > _273) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_271,_272,_273); }void mosek::fusion::p_IndexCounter::_initialize  (long long _271,    std::shared_ptr< monty::ndarray< int,1 > > _272,    monty::rc_ptr< ::mosek::fusion::Set > _273){monty::rc_reserve __reserve_this(_pubthis); { { (n = (int)((_272)->size(0))); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7533 = (int)0; int _7534 = n; for (int _274 = _7533;_274<_7534;++_274){ (((*st)(_274)) = _271); }(strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7535 = (int)0; int _7536 = n; for (int _275 = _7535;_275<_7536;++_275){ (((*strides)(_275)) = _273->stride(_275)); }(dims = _272); (start = _271); }}}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    std::shared_ptr< monty::ndarray< long long,1 > > _278){ return new mosek::fusion::IndexCounter(_276,_277,_278); }mosek::fusion::IndexCounter::IndexCounter  (long long _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    std::shared_ptr< monty::ndarray< long long,1 > > _278) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_276,_277,_278); }void mosek::fusion::p_IndexCounter::_initialize  (long long _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    std::shared_ptr< monty::ndarray< long long,1 > > _278){monty::rc_reserve __reserve_this(_pubthis); { { (n = (int)((_277)->size(0))); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7537 = (int)0; int _7538 = n; for (int _279 = _7537;_279<_7538;++_279){ (((*st)(_279)) = _276); }(strides = _278); (dims = _277); (start = _276); }}}bool mosek::fusion::IndexCounter::atEnd  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd( ){ return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1)))); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter::getIndex  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex( ){ return ii; }long long mosek::fusion::IndexCounter::next  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next( ){ long long _280 = _pubthis->get(); _pubthis->inc(); return _280; }long long mosek::fusion::IndexCounter::get  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get( ){ return ((*st)((int)0)); }void mosek::fusion::IndexCounter::inc  ( ) { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc( ){ ( ++ ((*ii)((int)0)) ); (((*st)((int)0)) = (((*st)((int)0)) + ((*strides)((n - (int)1))))); int _281; { (_281 = (int)0); for (;((_281 < (n - (int)1)) && (((*ii)(_281)) == ((*dims)(((n - _281) - (int)1)))));( ++ _281 )){ (((*ii)(_281)) = (int)0); ( ++ ((*ii)((_281 + (int)1))) ); (((*st)((_281 + (int)1))) = (((*st)((_281 + (int)1))) + ((*strides)(((n - _281) - (int)2))))); }}int _7539 = (int)0; int _7540 = _281; for (int _282 = _7539;_282<_7540;++_282){ (((*st)(_282)) = ((*st)(_281))); }}void mosek::fusion::IndexCounter::reset  ( ) { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset( ){ (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7541 = (int)0; int _7542 = n; for (int _283 = _7541;_283<_7542;++_283){ (((*st)(_283)) = start); }}void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286) { mosek::fusion::p_CommonTools::ndIncr(_284,_285,_286); }void mosek::fusion::p_CommonTools::ndIncr( std::shared_ptr< monty::ndarray< int,1 > > _284,std::shared_ptr< monty::ndarray< int,1 > > _285,std::shared_ptr< monty::ndarray< int,1 > > _286){ int _287 = ((int)((_284)->size(0)) - (int)1); ( ++ ((*_284)(_287)) ); while (((_287 > (int)0) && (((*_284)(_287)) >= ((*_286)(_287))))) { (((*_284)(_287)) = ((*_285)(_287))); ( ++ ((*_284)((_287 - (int)1))) ); }}void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _288,    std::shared_ptr< monty::ndarray< int,1 > > _289,    std::shared_ptr< monty::ndarray< double,1 > > _290,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _291,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _292,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _293,    long long _294,    int _295,    int _296) { mosek::fusion::p_CommonTools::transposeTriplets(_288,_289,_290,_291,_292,_293,_294,_295,_296); }void mosek::fusion::p_CommonTools::transposeTriplets( std::shared_ptr< monty::ndarray< int,1 > > _288,std::shared_ptr< monty::ndarray< int,1 > > _289,std::shared_ptr< monty::ndarray< double,1 > > _290,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _291,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _292,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _293,long long _294,int _295,int _296){ std::shared_ptr< monty::ndarray< long long,1 > > _297 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_295 + (int)2)))); std::shared_ptr< monty::ndarray< long long,1 > > _298 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_296 + (int)2)))); { long long _299 = (long long)0; for (;(_299 < _294);( ++ _299 )){ (((*_298)((((*_289)(_299)) + (int)2))) = (((*_298)((((*_289)(_299)) + (int)2))) + (int)1)); (((*_297)((((*_288)(_299)) + (int)2))) = (((*_297)((((*_288)(_299)) + (int)2))) + (int)1)); }}{ int _300 = (int)1; for (;(_300 < _295);( ++ _300 )){ (((*_297)((_300 + (int)1))) = (((*_297)((_300 + (int)1))) + ((*_297)(_300)))); }}{ int _301 = (int)1; for (;(_301 < _296);( ++ _301 )){ (((*_298)((_301 + (int)1))) = (((*_298)((_301 + (int)1))) + ((*_298)(_301)))); }}std::shared_ptr< monty::ndarray< long long,1 > > _302 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_294))); std::shared_ptr< monty::ndarray< long long,1 > > _303 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_294))); std::shared_ptr< monty::ndarray< double,1 > > _304 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_294))); int _7543 = (int)0; int _7544 = _295; for (int _305 = _7543;_305<_7544;++_305){ { long long _306 = ((*_297)(_305)); for (;(_306 < ((*_297)((_305 + (int)1))));( ++ _306 )){ int _307 = ((*_289)(_306)); long long _308 = ((*_298)(_307)); (((*_302)(_308)) = _305); (((*_303)(_308)) = _307); (((*_304)(_308)) = ((*_290)(_306))); (((*_298)(_307)) = (_308 + (int)1)); }}}(((*_291)((int)0)) = _303); (((*_292)((int)0)) = _302); (((*_293)((int)0)) = _304); }void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _309,    std::shared_ptr< monty::ndarray< int,1 > > _310,    std::shared_ptr< monty::ndarray< double,1 > > _311,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _312,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _313,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _314,    long long _315,    int _316,    int _317) { mosek::fusion::p_CommonTools::transposeTriplets(_309,_310,_311,_312,_313,_314,_315,_316,_317); }void mosek::fusion::p_CommonTools::transposeTriplets( std::shared_ptr< monty::ndarray< int,1 > > _309,std::shared_ptr< monty::ndarray< int,1 > > _310,std::shared_ptr< monty::ndarray< double,1 > > _311,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _312,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _313,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _314,long long _315,int _316,int _317){ std::shared_ptr< monty::ndarray< long long,1 > > _318 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_316 + (int)2)))); std::shared_ptr< monty::ndarray< long long,1 > > _319 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_317 + (int)2)))); { long long _320 = (long long)0; for (;(_320 < _315);( ++ _320 )){ (((*_319)((((*_310)(_320)) + (int)2))) = (((*_319)((((*_310)(_320)) + (int)2))) + (int)1)); (((*_318)((((*_309)(_320)) + (int)2))) = (((*_318)((((*_309)(_320)) + (int)2))) + (int)1)); }}{ int _321 = (int)1; for (;(_321 < _316);( ++ _321 )){ (((*_318)((_321 + (int)1))) = (((*_318)((_321 + (int)1))) + ((*_318)(_321)))); }}{ int _322 = (int)1; for (;(_322 < _317);( ++ _322 )){ (((*_319)((_322 + (int)1))) = (((*_319)((_322 + (int)1))) + ((*_319)(_322)))); }}std::shared_ptr< monty::ndarray< int,1 > > _323 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_315))); std::shared_ptr< monty::ndarray< int,1 > > _324 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_315))); std::shared_ptr< monty::ndarray< double,1 > > _325 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_315))); { int _326 = (int)0; for (;(_326 < _316);( ++ _326 )){ long long _7545 = ((*_318)(_326)); long long _7546 = ((*_318)((_326 + (int)1))); for (long long _327 = _7545;_327<_7546;++_327){ int _328 = ((*_310)(_327)); long long _329 = ((*_319)(_328)); (((*_323)(_329)) = _326); (((*_324)(_329)) = _328); (((*_325)(_329)) = ((*_311)(_327))); (((*_319)(_328)) = (_329 + (int)1)); }}}(((*_312)((int)0)) = _324); (((*_313)((int)0)) = _323); (((*_314)((int)0)) = _325); }void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _330,    std::shared_ptr< monty::ndarray< int,1 > > _331,    std::shared_ptr< monty::ndarray< double,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _333,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _334,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _335,    long long _336,    int _337,    int _338) { mosek::fusion::p_CommonTools::tripletSort(_330,_331,_332,_333,_334,_335,_336,_337,_338); }void mosek::fusion::p_CommonTools::tripletSort( std::shared_ptr< monty::ndarray< int,1 > > _330,std::shared_ptr< monty::ndarray< int,1 > > _331,std::shared_ptr< monty::ndarray< double,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _333,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _334,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _335,long long _336,int _337,int _338){ std::shared_ptr< monty::ndarray< int,1 > > _339 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_336))); std::shared_ptr< monty::ndarray< long long,1 > > _340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_338 + (int)2)))); long long _7547 = (long long)0; long long _7548 = _336; for (long long _341 = _7547;_341<_7548;++_341){ (((*_340)((((*_331)(_341)) + (int)2))) = (((*_340)((((*_331)(_341)) + (int)2))) + (int)1)); }int _7549 = (int)1; int _7550 = _338; for (int _342 = _7549;_342<_7550;++_342){ (((*_340)((_342 + (int)1))) = (((*_340)((_342 + (int)1))) + ((*_340)(_342)))); }int _7551 = (int)0; int _7552 = (int)_336; for (int _343 = _7551;_343<_7552;++_343){ int _344 = ((*_331)(_343)); (((*_339)(((*_340)((_344 + (int)1))))) = _343); (((*_340)((_344 + (int)1))) = (((*_340)((_344 + (int)1))) + (int)1)); }std::shared_ptr< monty::ndarray< long long,1 > > _345 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_337 + (int)2)))); std::shared_ptr< monty::ndarray< int,1 > > _346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_336))); { int _347 = (int)0; for (;(_347 < _336);( ++ _347 )){ (((*_345)((((*_330)(_347)) + (int)2))) = (((*_345)((((*_330)(_347)) + (int)2))) + (int)1)); }}{ int _348 = (int)1; for (;(_348 < _337);( ++ _348 )){ (((*_345)((_348 + (int)1))) = (((*_345)((_348 + (int)1))) + ((*_345)(_348)))); }}{ int _349 = (int)0; for (;(_349 < _338);( ++ _349 )){ { long long _350 = ((*_340)(_349)); for (;(_350 < ((*_340)((_349 + (int)1))));( ++ _350 )){ int _351 = ((*_330)(((*_339)(_350)))); (((*_346)(((*_345)((_351 + (int)1))))) = ((*_339)(_350))); (((*_345)((_351 + (int)1))) = (((*_345)((_351 + (int)1))) + (int)1)); }}}}int _352 = (int)1; { int _353 = ((*_330)(((*_346)((int)0)))); int _354 = ((*_331)(((*_346)((int)0)))); { int _355 = (int)1; for (;(_355 < _336);( ++ _355 )){ int _356 = ((*_346)(_355)); if (((_353 != ((*_330)(_356))) || (_354 != ((*_331)(_356))))){ (_353 = ((*_330)(_356))); (_354 = ((*_331)(_356))); ( ++ _352 ); }else {}}}}std::shared_ptr< monty::ndarray< int,1 > > _357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_352))); std::shared_ptr< monty::ndarray< int,1 > > _358 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_352))); std::shared_ptr< monty::ndarray< double,1 > > _359 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_352))); { int _360 = ((*_346)((int)0)); (((*_357)((int)0)) = ((*_330)(_360))); (((*_358)((int)0)) = ((*_331)(_360))); (((*_359)((int)0)) = ((*_332)(_360))); }int _361 = (int)1; int _7553 = (int)1; long long _7554 = _336; for (long long _362 = _7553;_362<_7554;++_362){ int _363 = ((*_346)(_362)); if (((((*_357)((_361 - (int)1))) == ((*_330)(_363))) && (((*_358)((_361 - (int)1))) == ((*_331)(_363))))){ (((*_359)((_361 - (int)1))) = (((*_359)((_361 - (int)1))) + ((*_332)(_363)))); }else { (((*_357)(_361)) = ((*_330)(_363))); (((*_358)(_361)) = ((*_331)(_363))); (((*_359)(_361)) = ((*_332)(_363))); ( ++ _361 ); }}(((*_333)((int)0)) = _357); (((*_334)((int)0)) = _358); (((*_335)((int)0)) = _359); }void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _364,    std::shared_ptr< monty::ndarray< int,1 > > _365) { mosek::fusion::p_CommonTools::argMSort(_364,_365); }void mosek::fusion::p_CommonTools::argMSort( std::shared_ptr< monty::ndarray< int,1 > > _364,std::shared_ptr< monty::ndarray< int,1 > > _365){ std::shared_ptr< monty::ndarray< int,1 > > _366 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_364)->size(0))))); bool _367 = false; { int _368 = (int)1; for (;(_368 < (int)((_364)->size(0)));(_368 *= (int)2)){ (_367 = (! _367)); int _7555 = (int)0; int _7556 = (int)((_364)->size(0)); int _7557 = (_368 * (int)2); for (int _369 = _7555;_369<_7556;_369 += _7557){ if (_367){ ::mosek::fusion::p_CommonTools::mergeInto(_364,_366,_365,_369,(_369 + _368),(_369 + ((int)2 * _368))); }else { ::mosek::fusion::p_CommonTools::mergeInto(_366,_364,_365,_369,(_369 + _368),(_369 + ((int)2 * _368))); }}}}if (_367){ ::mosek::fusion::Utils::Tools::arraycopy(_366,(int)0,_364,(int)0,(int)((_364)->size(0))); }else {}}void mosek::fusion::p_CommonTools::mergeInto( std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,std::shared_ptr< monty::ndarray< int,1 > > _372,int _373,int _374,int _375){ int _376 = ([&]() -> int { if ( (_375 > (int)((_370)->size(0)))) return ((int)((_370)->size(0))); else return (_375); })(); int _377 = ([&]() -> int { if ( (_374 > _376)) return (_376); else return (_374); })(); if ((_377 == _376)){ ::mosek::fusion::Utils::Tools::arraycopy(_370,_373,_371,_373,(_377 - _373)); }else { int _378 = _373; int _379 = _377; int _380; { (_380 = _373); for (;((_378 < _377) && (_379 < _376));( ++ _380 )){ if ((((*_372)(((*_370)(_378)))) < ((*_372)(((*_370)(_379)))))){ (((*_371)(_380)) = ((*_370)(_378))); ( ++ _378 ); }else { (((*_371)(_380)) = ((*_370)(_379))); ( ++ _379 ); }}}while ((_378 < _377)) { (((*_371)(_380)) = ((*_370)(_378))); ( ++ _378 ); ( ++ _380 ); }while ((_379 < _376)) { (((*_371)(_380)) = ((*_370)(_379))); ( ++ _379 ); ( ++ _380 ); }}}void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _381,    std::shared_ptr< monty::ndarray< long long,1 > > _382,    std::shared_ptr< monty::ndarray< long long,1 > > _383,    long long _384,    long long _385) { mosek::fusion::p_CommonTools::argQsort(_381,_382,_383,_384,_385); }void mosek::fusion::p_CommonTools::argQsort( std::shared_ptr< monty::ndarray< long long,1 > > _381,std::shared_ptr< monty::ndarray< long long,1 > > _382,std::shared_ptr< monty::ndarray< long long,1 > > _383,long long _384,long long _385){ if (! _383){ ::mosek::fusion::Utils::Tools::argsort(_381,_382,_384,_385); }else { ::mosek::fusion::Utils::Tools::argsort(_381,_382,_383,_384,_385); }}void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _386,    std::shared_ptr< monty::ndarray< int,1 > > _387,    std::shared_ptr< monty::ndarray< int,1 > > _388,    long long _389,    long long _390) { mosek::fusion::p_CommonTools::argQsort(_386,_387,_388,_389,_390); }void mosek::fusion::p_CommonTools::argQsort( std::shared_ptr< monty::ndarray< long long,1 > > _386,std::shared_ptr< monty::ndarray< int,1 > > _387,std::shared_ptr< monty::ndarray< int,1 > > _388,long long _389,long long _390){ if (! _388){ ::mosek::fusion::Utils::Tools::argsort(_386,_387,_389,_390); }else { ::mosek::fusion::Utils::Tools::argsort(_386,_387,_388,_389,_390); }}void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _391,    int _392,    int _393,    int _394){ return new mosek::fusion::SolutionStruct(_391,_392,_393,_394); }mosek::fusion::SolutionStruct::SolutionStruct  (int _391,    int _392,    int _393,    int _394) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_391,_392,_393,_394); }void mosek::fusion::p_SolutionStruct::_initialize  (int _391,    int _392,    int _393,    int _394){monty::rc_reserve __reserve_this(_pubthis); { { (pobj = 0.0); (dobj = 0.0); (pstatus = ::mosek::fusion::SolutionStatus::Unknown); (dstatus = ::mosek::fusion::SolutionStatus::Unknown); (probstatus = ::mosek::fusion::ProblemStatus::Unknown); (sol_numvar = _391); (sol_numcon = _392); (sol_numcone = _393); (sol_numbarvar = _394); (slx = nullptr); (sux = nullptr); (xx = nullptr); (slc = nullptr); (suc = nullptr); (y = nullptr); (xc = nullptr); (snx = nullptr); (barx = nullptr); (bars = nullptr); if ((_391 > (int)0)){ (slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); }else {}if ((_394 > (int)0)){ (barx = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_394)))); (bars = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_394)))); }else {}if ((_392 > (int)0)){ (slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); (suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); (y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); (xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)))); }else {}if ((_393 > (int)0)){ (snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); }else {}}}}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _395){ return new mosek::fusion::SolutionStruct(_395); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _395) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_395); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _395){monty::rc_reserve __reserve_this(_pubthis); { { (sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numcon); (sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numvar); (sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numcone); (sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_395)->sol_numbarvar); (pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_395)->pstatus); (dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_395)->dstatus); (probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_395)->probstatus); (pobj = mosek::fusion::p_SolutionStruct::_get_impl(_395)->pobj); (dobj = mosek::fusion::p_SolutionStruct::_get_impl(_395)->dobj); (xc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->xc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->xc)); else return (nullptr); })()); (xx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->xx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->xx)); else return (nullptr); })()); (slc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->slc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->slx)); else return (nullptr); })()); (suc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->suc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->sux)); else return (nullptr); })()); (y = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->y) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->y)); else return (nullptr); })()); if (mosek::fusion::p_SolutionStruct::_get_impl(_395)->barx){ (barx = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _7558; for (int _396=(int)0, _7559=(int)((mosek::fusion::p_SolutionStruct::_get_impl(_395)->barx)->size(0)); _396 < _7559;++_396)_7558.push_back(::mosek::fusion::Utils::Tools::arraycopy(((*mosek::fusion::p_SolutionStruct::_get_impl(_395)->barx)(_396)))); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_7558.size()),_7558.begin(),_7558.end())); })()); }else { (barx = nullptr); }if (mosek::fusion::p_SolutionStruct::_get_impl(_395)->bars){ (bars = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _7560; for (int _397=(int)0, _7561=(int)((mosek::fusion::p_SolutionStruct::_get_impl(_395)->bars)->size(0)); _397 < _7561;++_397)_7560.push_back(::mosek::fusion::Utils::Tools::arraycopy(((*mosek::fusion::p_SolutionStruct::_get_impl(_395)->bars)(_397)))); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_7560.size()),_7560.begin(),_7560.end())); })()); }else { (bars = nullptr); }(slx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->slx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->slx)); else return (nullptr); })()); (sux = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->sux) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->sux)); else return (nullptr); })()); (snx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_395)->snx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_395)->snx)); else return (nullptr); })()); }}}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone  ( ) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::clone( ){ return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(_pubthis); }void mosek::fusion::SolutionStruct::resize  ( int _398,    int _399,    int _400,    int _401) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_398,_399,_400,_401); }void mosek::fusion::p_SolutionStruct::resize( int _398,int _399,int _400,int _401){ if ((_401 < (int)0)){ }else if ((_401 <= sol_numbarvar)){ (sol_numbarvar = _401); }else if ((_398 <= (int)((barx)->size(0)))){ int _7562 = sol_numvar; int _7563 = _398; for (int _402 = _7562;_402<_7563;++_402){ (((*barx)(_402)) = nullptr); (((*bars)(_402)) = nullptr); }}else { int _403; if (((sol_numbarvar * (int)2) > (_401 + (int)100))){ (_403 = (sol_numbarvar * (int)2)); }else { (_403 = (_401 + (int)100)); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _404 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_403))); int _7564 = (int)0; int _7565 = (int)((barx)->size(0)); for (int _405 = _7564;_405<_7565;++_405){ (((*_404)(_405)) = ((*barx)(_405))); }(barx = _404); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _406 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_403))); int _7566 = (int)0; int _7567 = (int)((bars)->size(0)); for (int _407 = _7566;_407<_7567;++_407){ (((*_406)(_407)) = ((*bars)(_407))); }(bars = _406); (sol_numbarvar = _401); }if ((_398 < (int)0)){ }else if ((_398 <= sol_numvar)){ (sol_numvar = _398); }else if ((_398 <= (int)((xx)->size(0)))){ int _7568 = sol_numvar; int _7569 = _398; for (int _408 = _7568;_408<_7569;++_408){ (((*slx)(_408)) = 0.0); (((*sux)(_408)) = 0.0); (((*xx)(_408)) = 0.0); }(sol_numvar = _398); }else { int _409; if (((sol_numvar * (int)2) > (_398 + (int)100))){ (_409 = (sol_numvar * (int)2)); }else { (_409 = (_398 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _410 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_409))); ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_410,(int)0,(int)((slx)->size(0))); (slx = _410); std::shared_ptr< monty::ndarray< double,1 > > _411 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_409))); ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_411,(int)0,(int)((sux)->size(0))); (sux = _411); std::shared_ptr< monty::ndarray< double,1 > > _412 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_409))); ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_412,(int)0,(int)((xx)->size(0))); (xx = _412); { int _413 = sol_numvar; for (;(_413 < _398);( ++ _413 )){ (((*slx)(_413)) = 0.0); (((*sux)(_413)) = 0.0); (((*xx)(_413)) = 0.0); }}(sol_numvar = _398); }if ((_399 < (int)0)){ }else if ((_399 <= sol_numcon)){ (sol_numcon = _399); }else if ((_399 <= (int)((xx)->size(0)))){ int _7570 = sol_numcon; int _7571 = _399; for (int _414 = _7570;_414<_7571;++_414){ (((*slc)(_414)) = 0.0); (((*suc)(_414)) = 0.0); (((*xc)(_414)) = 0.0); (((*y)(_414)) = 0.0); }(sol_numcon = _399); }else { int _415; if (((sol_numcon * (int)2) > (_399 + (int)100))){ (_415 = (sol_numcon * (int)2)); }else { (_415 = (_399 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _416 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_416,(int)0,(int)((slc)->size(0))); (slc = _416); std::shared_ptr< monty::ndarray< double,1 > > _417 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_417,(int)0,(int)((suc)->size(0))); (suc = _417); std::shared_ptr< monty::ndarray< double,1 > > _418 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_418,(int)0,(int)((xc)->size(0))); (xc = _418); std::shared_ptr< monty::ndarray< double,1 > > _419 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_415))); ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_419,(int)0,(int)((y)->size(0))); (y = _419); int _7572 = sol_numcon; int _7573 = _399; for (int _420 = _7572;_420<_7573;++_420){ (((*slc)(_420)) = 0.0); (((*suc)(_420)) = 0.0); (((*xc)(_420)) = 0.0); (((*y)(_420)) = 0.0); }(sol_numcon = _399); }if ((_400 < (int)0)){ }else if ((_400 <= sol_numcone)){ (sol_numcone = _400); }else if ((_400 <= (int)((xx)->size(0)))){ int _7574 = sol_numcone; int _7575 = _400; for (int _421 = _7574;_421<_7575;++_421){ (((*snx)(_421)) = 0.0); }(sol_numcone = _400); }else { int _422; if (((sol_numcone * (int)2) > (_400 + (int)100))){ (_422 = (sol_numcone * (int)2)); }else { (_422 = (_400 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _423 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_422))); ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_423,(int)0,(int)((snx)->size(0))); (snx = _423); { int _424 = sol_numcone; for (;(_424 < _400);( ++ _424 )){ (((*snx)(_424)) = 0.0); }}(sol_numcone = _400); }}bool mosek::fusion::SolutionStruct::isDualAcceptable  ( mosek::fusion::AccSolutionStatus _425) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_425); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable( mosek::fusion::AccSolutionStatus _425){ return isAcceptable(dstatus,_425); }bool mosek::fusion::SolutionStruct::isPrimalAcceptable  ( mosek::fusion::AccSolutionStatus _426) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_426); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable( mosek::fusion::AccSolutionStatus _426){ return isAcceptable(pstatus,_426); }bool mosek::fusion::p_SolutionStruct::isAcceptable( mosek::fusion::SolutionStatus _427,mosek::fusion::AccSolutionStatus _428){ if ((_428 == ::mosek::fusion::AccSolutionStatus::Anything)){ return true; }else if ((_428 == ::mosek::fusion::AccSolutionStatus::Optimal)){ return (_427 == ::mosek::fusion::SolutionStatus::Optimal); }else if ((_428 == ::mosek::fusion::AccSolutionStatus::NearOptimal)){ return ((_427 == ::mosek::fusion::SolutionStatus::Optimal) || (_427 == ::mosek::fusion::SolutionStatus::NearOptimal)); }else if ((_428 == ::mosek::fusion::AccSolutionStatus::Feasible)){ return ((_427 == ::mosek::fusion::SolutionStatus::Optimal) || ((_427 == ::mosek::fusion::SolutionStatus::NearOptimal) || (_427 == ::mosek::fusion::SolutionStatus::Feasible))); }else if ((_428 == ::mosek::fusion::AccSolutionStatus::Certificate)){ return (_427 == ::mosek::fusion::SolutionStatus::Certificate); }else {}return false; }void mosek::fusion::p_SolutionStruct::destroy(){snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _429,    std::shared_ptr< monty::ndarray< int,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< double,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434,    std::shared_ptr< monty::ndarray< int,1 > > _435){ return new mosek::fusion::ConNZStruct(_429,_430,_431,_432,_433,_434,_435); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _429,    std::shared_ptr< monty::ndarray< int,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< double,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434,    std::shared_ptr< monty::ndarray< int,1 > > _435) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_429,_430,_431,_432,_433,_434,_435); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _429,    std::shared_ptr< monty::ndarray< int,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< double,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434,    std::shared_ptr< monty::ndarray< int,1 > > _435){monty::rc_reserve __reserve_this(_pubthis); { { (ptrb = _429); (subj = _430); (cof = _431); (bfix = _432); (barsubi = _433); (barsubj = _434); (barmidx = _435); }}}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _436){ return new mosek::fusion::Model(_436); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _436) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_436); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _436){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(_436);(model_name = mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(mosek::fusion::p_Model::_get_impl(_436)->model_name).get())->a(std::string ("(clone)")).get())->toString()); (acceptable_sol = mosek::fusion::p_Model::_get_impl(_436)->acceptable_sol); (solutionptr = mosek::fusion::p_Model::_get_impl(_436)->solutionptr); monty::rc_ptr< ::mosek::fusion::Model > _437 = _pubthis; (vars = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::ModelVariable > > _7576; for (int _438=(int)0, _7577=mosek::fusion::p_Model::_get_impl(_436)->vars_used; _438 < _7577;++_438)_7576.push_back(mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_436)->vars)(_438)).get())->clone(_437)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_7576.size()),_7576.begin(),_7576.end())); })()); (vars_used = mosek::fusion::p_Model::_get_impl(_436)->vars_used); (var_map = mosek::fusion::Utils::p_StringIntMap::_get_impl(mosek::fusion::p_Model::_get_impl(_436)->var_map.get())->clone()); (task_vars_allocated = mosek::fusion::p_Model::_get_impl(_436)->task_vars_allocated); (task_vars_used = mosek::fusion::p_Model::_get_impl(_436)->task_vars_used); (cons = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::ModelConstraint > > _7578; for (int _439=(int)0, _7579=mosek::fusion::p_Model::_get_impl(_436)->cons_used; _439 < _7579;++_439)_7578.push_back(mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_436)->cons)(_439)).get())->clone(_437)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_7578.size()),_7578.begin(),_7578.end())); })()); (cons_used = mosek::fusion::p_Model::_get_impl(_436)->cons_used); (con_map = mosek::fusion::Utils::p_StringIntMap::_get_impl(mosek::fusion::p_Model::_get_impl(_436)->con_map.get())->clone()); (natvarmap_Var = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7580; for (int _440=(int)0, _7581=mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num; _440 < _7581;++_440)_7580.push_back(((*mosek::fusion::p_Model::_get_impl(_436)->natvarmap_Var)(_440))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7580.size()),_7580.begin(),_7580.end())); })()); (natvarmap_idx = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7582; for (int _441=(int)0, _7583=mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num; _441 < _7583;++_441)_7582.push_back(((*mosek::fusion::p_Model::_get_impl(_436)->natvarmap_idx)(_441))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7582.size()),_7582.begin(),_7582.end())); })()); (natvarmap_num = mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num); (natbarvarmap_Var = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7584; for (int _442=(int)0, _7585=mosek::fusion::p_Model::_get_impl(_436)->natvarmap_num; _442 < _7585;++_442)_7584.push_back(((*mosek::fusion::p_Model::_get_impl(_436)->natvarmap_Var)(_442))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7584.size()),_7584.begin(),_7584.end())); })()); (natbarvarmap_num = mosek::fusion::p_Model::_get_impl(_436)->natbarvarmap_num); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); }}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(std::string (""),std::string (""));(model_name = std::string ("")); (acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal); (solutionptr = ::mosek::fusion::SolutionType::Default); (natvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)))); (natvarmap_idx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)))); (natvarmap_num = (int)0); (natbarvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (natbarvarmap_num = (int)0); (task_vars_allocated = (int)0); (task_vars_used = (int)0); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)1024)))); (vars_used = (int)0); (var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape((int)1024)))); (cons_used = (int)0); (con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); }}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _443){ return new mosek::fusion::Model(_443); }mosek::fusion::Model::Model  (const std::string &  _443) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_443); }void mosek::fusion::p_Model::_initialize  (const std::string &  _443){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(_443,std::string (""));(model_name = _443); (acceptable_sol = ::mosek::fusion::AccSolutionStatus::NearOptimal); (solutionptr = ::mosek::fusion::SolutionType::Default); (natvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)))); (natvarmap_idx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)))); (natvarmap_num = (int)0); (natbarvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (natbarvarmap_num = (int)0); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)1024)))); (vars_used = (int)0); (var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); (task_vars_allocated = (int)0); (task_vars_used = (int)0); (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape((int)1024)))); (cons_used = (int)0); (con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); }}void mosek::fusion::Model::putlicensewait  ( bool _444) { mosek::fusion::p_Model::putlicensewait(_444); }void mosek::fusion::p_Model::putlicensewait( bool _444){ ::mosek::fusion::p_BaseModel::env_putlicensewait(_444); }void mosek::fusion::Model::putlicensepath  ( const std::string & _445) { mosek::fusion::p_Model::putlicensepath(_445); }void mosek::fusion::p_Model::putlicensepath( const std::string & _445){ ::mosek::fusion::p_BaseModel::env_putlicensepath(_445); }void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _446) { mosek::fusion::p_Model::putlicensecode(_446); }void mosek::fusion::p_Model::putlicensecode( std::shared_ptr< monty::ndarray< int,1 > > _446){ ::mosek::fusion::p_BaseModel::env_putlicensecode(_446); }void mosek::fusion::p_Model::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _447,int _448,int _449,std::shared_ptr< monty::ndarray< long long,1 > > _450,int _451,std::shared_ptr< monty::ndarray< int,1 > > _452,std::shared_ptr< monty::ndarray< int,1 > > _453,std::shared_ptr< monty::ndarray< int,1 > > _454){ std::shared_ptr< monty::ndarray< long long,1 > > _455 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_447)->size(0)) + (int)1)))); int _7586 = (int)0; int _7587 = (int)((_447)->size(0)); for (int _456 = _7586;_456<_7587;++_456){ (((*_455)((_456 + (int)1))) = (((*_455)(_456)) + ((*_447)(_456))->size())); }if (((int)((_447)->size(0)) == (int)1)){ ((*_447)((int)0))->inst(_450,_448,_449,(long long)((int)0),(long long)(_451),_452,_453,_454); }else if (((int)((_447)->size(0)) == (int)2)){ int _7588 = _448; int _7589 = _449; for (int _457 = _7588;_457<_7589;++_457){ if ((((*_450)(_457)) < ((*_455)((int)1)))){ ((*_447)((int)0))->inst(((*_450)(_457)),(long long)(((_451 + _457) - _448)),_452,_453,_454); }else { ((*_447)((int)1))->inst((((*_450)(_457)) - ((*_455)((int)1))),(long long)(((_451 + _457) - _448)),_452,_453,_454); }}}else if (((int)((_447)->size(0)) == (int)3)){ int _7590 = _448; int _7591 = _449; for (int _458 = _7590;_458<_7591;++_458){ if ((((*_450)(_458)) < ((*_455)((int)1)))){ ((*_447)((int)0))->inst(((*_450)(_458)),(long long)(((_451 + _458) - _448)),_452,_453,_454); }else if ((((*_450)(_458)) < ((*_455)((int)2)))){ ((*_447)((int)1))->inst((((*_450)(_458)) - ((*_455)((int)1))),(long long)(((_451 + _458) - _448)),_452,_453,_454); }else { ((*_447)((int)2))->inst((((*_450)(_458)) - ((*_455)((int)2))),(long long)(((_451 + _458) - _448)),_452,_453,_454); }}}else { int _459 = (int)4; long long _460 = ((*_455)((int)((_447)->size(0)))); int _461 = (int)0; { int _462 = (int)((_447)->size(0)); while ((_462 > (int)0)) { (_462 /= (int)2); ( ++ _461 ); }}if ((false && (((_449 - _448) + _460) < ((_459 * (_449 - _448)) * _461)))){ std::shared_ptr< monty::ndarray< int,1 > > _463 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_460 + (int)1)))); int _7592 = _448; int _7593 = _449; for (int _464 = _7592;_464<_7593;++_464){ ( ++ ((*_463)(((*_450)(_464)))) ); }int _7594 = (int)0; long long _7595 = _460; for (long long _465 = _7594;_465<_7595;++_465){ (((*_463)((_465 + (int)1))) += ((*_463)(_465))); }std::shared_ptr< monty::ndarray< long long,1 > > _466 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_449 - _448)))); int _7596 = _448; int _7597 = _449; for (int _467 = _7596;_467<_7597;++_467){ (((*_466)((((*_463)(((*_450)(_467)))) - _448))) = _467); ( ++ ((*_463)(((*_450)(_467)))) ); }int _468 = (int)0; int _469 = (int)0; while (((_469 < (int)((_466)->size(0))) && (_468 < (int)((_447)->size(0))))) { if ((((*_455)((_468 + (int)1))) < ((*_450)(((*_466)(_469)))))){ ( ++ _468 ); }else { ((*_447)(_468))->inst((((*_450)(((*_466)(_469)))) - ((*_455)(_468))),((_451 + ((*_466)(_469))) - _448),_452,_453,_454); ( ++ _469 ); }}}else { int _7598 = _448; int _7599 = _449; for (int _470 = _7598;_470<_7599;++_470){ int _471 = ((int)((_455)->size(0)) / (int)2); { int _472 = (int)0; int _473 = ((int)((_455)->size(0)) - (int)1); int _474 = (int)0; while ((_472 < _473)) { (_474 = ((_472 + _473) / (int)2)); if ((((*_450)(_470)) < ((*_455)(_474)))){ (_473 = _474); }else if ((((*_450)(_470)) >= ((*_455)((_474 + (int)1))))){ (_472 = _474); }else { (_472 = _474); (_473 = _474); }}(_471 = _474); }((*_447)(_471))->inst((((*_450)(_470)) - ((*_455)(_471))),(long long)(((_451 + _470) - _448)),_452,_453,_454); }}}}void mosek::fusion::p_Model::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _475,std::shared_ptr< monty::ndarray< long long,1 > > _476,std::shared_ptr< monty::ndarray< int,1 > > _477,std::shared_ptr< monty::ndarray< int,1 > > _478,std::shared_ptr< monty::ndarray< int,1 > > _479){ ::mosek::fusion::p_Model::inst(_475,(int)0,(int)((_476)->size(0)),_476,(int)0,_477,_478,_479); }void mosek::fusion::Model::dispose  ( ) { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose( ){ int _7600 = (int)0; int _7601 = vars_used; for (int _480 = _7600;_480<_7601;++_480){ (((*vars)(_480)) = nullptr); }(vars_used = (int)0); int _7602 = (int)0; int _7603 = cons_used; for (int _481 = _7602;_481<_7603;++_481){ (((*cons)(_481)) = nullptr); }(cons_used = (int)0); ::mosek::fusion::p_BaseModel::dispose(); }void mosek::fusion::p_Model::varname( int _482,const std::string & _483){ task_var_name(_482,_483); }void mosek::fusion::p_Model::nativeVarToStr( int _484,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _485){ if (((_484 < (int)0) || (_484 >= natvarmap_num))){ throw ::mosek::fusion::IndexError(std::string ("Native variable index out of bounds"));}else {}((*vars)(((*natvarmap_Var)(_484))))->elementName(((*natvarmap_idx)(_484)),_485); }int mosek::fusion::p_Model::append_linearvar( monty::rc_ptr< ::mosek::fusion::ModelVariable > _486,long long _487,mosek::fusion::RelationKey _488,double _489){ int _490 = alloc_linearvar(std::string (""),_488,_489); natvarmap_ensure((int)1); (((*natvarmap_idx)(_490)) = _487); (((*natvarmap_Var)(_490)) = vars_used); (natvarmap_num = (natvarmap_num + (int)1)); return _490; }int mosek::fusion::p_Model::append_rangedvar( monty::rc_ptr< ::mosek::fusion::ModelVariable > _491,long long _492,double _493,double _494){ int _495 = alloc_rangedvar(std::string (""),_493,_494); natvarmap_ensure((int)1); (((*natvarmap_idx)(_495)) = _492); (((*natvarmap_Var)(_495)) = vars_used); (natvarmap_num = (natvarmap_num + (int)1)); return _495; }MSKtask_t mosek::fusion::Model::getTask  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getTask(); }MSKtask_t mosek::fusion::p_Model::getTask( ){ return task_get(); }void mosek::fusion::Model::flushNames  ( ) { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames( ){ int _7604 = (int)0; int _7605 = vars_used; for (int _496 = _7604;_496<_7605;++_496){ mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_496)).get())->flushNames(); }int _7606 = (int)0; int _7607 = cons_used; for (int _497 = _7606;_497<_7607;++_497){ mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_497)).get())->flushNames(); }}void mosek::fusion::Model::writeTask  ( const std::string & _498) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_498); }void mosek::fusion::p_Model::writeTask( const std::string & _498){ _pubthis->flushNames(); task_setnumvar(task_vars_used); (task_vars_allocated = task_vars_used); task_write(_498); }long long mosek::fusion::Model::getSolverLIntInfo  ( const std::string & _499) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_499); }long long mosek::fusion::p_Model::getSolverLIntInfo( const std::string & _499){ return task_get_liinf(_499); }int mosek::fusion::Model::getSolverIntInfo  ( const std::string & _500) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_500); }int mosek::fusion::p_Model::getSolverIntInfo( const std::string & _500){ return task_get_iinf(_500); }double mosek::fusion::Model::getSolverDoubleInfo  ( const std::string & _501) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_501); }double mosek::fusion::p_Model::getSolverDoubleInfo( const std::string & _501){ return task_get_dinf(_501); }void mosek::fusion::Model::setCallbackHandler  ( mosek::cbhandler_t _502) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_502); }void mosek::fusion::p_Model::setCallbackHandler( mosek::cbhandler_t _502){ task_setCallbackHandler(_502); }void mosek::fusion::Model::setDataCallbackHandler  ( mosek::datacbhandler_t _503) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_503); }void mosek::fusion::p_Model::setDataCallbackHandler( mosek::datacbhandler_t _503){ task_setDataCallbackHandler(_503); }void mosek::fusion::Model::setLogHandler  ( mosek::msghandler_t _504) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_504); }void mosek::fusion::p_Model::setLogHandler( mosek::msghandler_t _504){ task_setLogHandler(_504); }void mosek::fusion::Model::setSolverParam  ( const std::string & _505,    double _506) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_505,_506); }void mosek::fusion::p_Model::setSolverParam( const std::string & _505,double _506){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_505,_506); }void mosek::fusion::Model::setSolverParam  ( const std::string & _507,    int _508) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_507,_508); }void mosek::fusion::p_Model::setSolverParam( const std::string & _507,int _508){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_507,_508); }void mosek::fusion::Model::setSolverParam  ( const std::string & _509,    const std::string & _510) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_509,_510); }void mosek::fusion::p_Model::setSolverParam( const std::string & _509,const std::string & _510){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_509,_510); }void mosek::fusion::Model::breakSolver  ( ) { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver( ){ task_break_solve(); }void mosek::fusion::Model::solve  ( ) { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve( ){ task_setnumvar(task_vars_used); (task_vars_allocated = task_vars_used); flush_initsol(::mosek::fusion::SolutionType::Interior); flush_initsol(::mosek::fusion::SolutionType::Integer); flush_initsol(::mosek::fusion::SolutionType::Basic); task_solve(); }void mosek::fusion::Model::flushSolutions  ( ) { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions( ){ flush_initsol(::mosek::fusion::SolutionType::Interior); flush_initsol(::mosek::fusion::SolutionType::Integer); flush_initsol(::mosek::fusion::SolutionType::Basic); }void mosek::fusion::p_Model::flush_initsol( mosek::fusion::SolutionType _511){ if (initsol_xx){ try { monty::rc_ptr< ::mosek::fusion::SolutionStruct > _513 = get_sol_cache(_511,true); if (mosek::fusion::p_SolutionStruct::_get_impl(_513)->xx){ int _7608 = (int)0; int _7609 = (int)((initsol_xx)->size(0)); for (int _514 = _7608;_514<_7609;++_514){ if ((! ((*initsol_xx_flag)(_514)))){ (((*initsol_xx)(_514)) = ((*mosek::fusion::p_SolutionStruct::_get_impl(_513)->xx)(_514))); }else {}}}else { int _7610 = (int)0; int _7611 = (int)((initsol_xx)->size(0)); for (int _515 = _7610;_515<_7611;++_515){ if ((! ((*initsol_xx_flag)(_515)))){ (((*initsol_xx)(_515)) = 0.0); }else {}}}}catch (mosek::fusion::SolutionError _512){ int _7612 = (int)0; int _7613 = (int)((initsol_xx)->size(0)); for (int _516 = _7612;_516<_7613;++_516){ if ((! ((*initsol_xx_flag)(_516)))){ (((*initsol_xx)(_516)) = 0.0); }else {}}}task_putxx_slice(_511,(int)0,(int)((initsol_xx)->size(0)),initsol_xx); }else {}}mosek::fusion::SolutionStatus mosek::fusion::Model::getDualSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus( ){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _517 = nullptr; if ((solutionptr == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_517 = sol_itg); }else if (sol_bas){ (_517 = sol_bas); }else { (_517 = sol_itr); }}else if ((solutionptr == ::mosek::fusion::SolutionType::Interior)){ (_517 = sol_itr); }else if ((solutionptr == ::mosek::fusion::SolutionType::Basic)){ (_517 = sol_bas); }else if ((solutionptr == ::mosek::fusion::SolutionType::Integer)){ (_517 = sol_itg); }else {}if (! _517){ return ::mosek::fusion::SolutionStatus::Undefined; }else if ((! synched)){ return ::mosek::fusion::SolutionStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_517)->dstatus; }}mosek::fusion::SolutionStatus mosek::fusion::Model::getPrimalSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus( ){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _518 = nullptr; if ((solutionptr == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_518 = sol_itg); }else if (sol_bas){ (_518 = sol_bas); }else { (_518 = sol_itr); }}else if ((solutionptr == ::mosek::fusion::SolutionType::Basic)){ (_518 = sol_bas); }else if ((solutionptr == ::mosek::fusion::SolutionType::Integer)){ (_518 = sol_itg); }else { (_518 = sol_itr); }if (! _518){ return ::mosek::fusion::SolutionStatus::Undefined; }else if ((! synched)){ return ::mosek::fusion::SolutionStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_518)->pstatus; }}double mosek::fusion::Model::dualObjValue  ( ) { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue( ){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj; }double mosek::fusion::Model::primalObjValue  ( ) { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue( ){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj; }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::get_sol_cache( mosek::fusion::SolutionType _519,bool _520,bool _521){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _522 = nullptr; mosek::fusion::SolutionType _523 = _519; if ((_523 == ::mosek::fusion::SolutionType::Default)){ (_523 = solutionptr); }else {}if ((_523 == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_522 = sol_itg); }else if (sol_bas){ (_522 = sol_bas); }else { (_522 = sol_itr); }}else if ((_523 == ::mosek::fusion::SolutionType::Interior)){ (_522 = sol_itr); }else if ((_523 == ::mosek::fusion::SolutionType::Basic)){ (_522 = sol_bas); }else if ((_523 == ::mosek::fusion::SolutionType::Integer)){ (_522 = sol_itg); }else {}if (! _522){ throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));}else { if ((_521 || ((_520 && _522->isPrimalAcceptable(acceptable_sol)) || ((! _520) && _522->isDualAcceptable(acceptable_sol))))){ return _522; }else { monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _524 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::SolutionStatus _525 = mosek::fusion::p_SolutionStruct::_get_impl(_522)->pstatus; if ((! _520)){ (_525 = mosek::fusion::p_SolutionStruct::_get_impl(_522)->dstatus); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Solution status is ")); if ((_525 == ::mosek::fusion::SolutionStatus::Undefined)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Undefined")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Unknown)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Unknown")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Optimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Optimal")); }else if ((_525 == ::mosek::fusion::SolutionStatus::NearOptimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearOptimal")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Feasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Feasible")); }else if ((_525 == ::mosek::fusion::SolutionStatus::NearFeasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearFeasible")); }else if ((_525 == ::mosek::fusion::SolutionStatus::Certificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Certificate")); }else if ((_525 == ::mosek::fusion::SolutionStatus::NearCertificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearCertificate")); }else if ((_525 == ::mosek::fusion::SolutionStatus::IllposedCert)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("IllposedCert")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string (" but at least ")); if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Anything")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Optimal")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::NearOptimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("NearOptimal")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Feasible")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string ("Certificate")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->a(std::string (" is expected")); throw ::mosek::fusion::SolutionError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_524.get())->toString());}}}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::get_sol_cache( mosek::fusion::SolutionType _526,bool _527){ return get_sol_cache(_526,_527,false); }void mosek::fusion::p_Model::setSolution_xx( std::shared_ptr< monty::ndarray< int,1 > > _528,std::shared_ptr< monty::ndarray< double,1 > > _529){ ensure_initsol_xx(); int _7614 = (int)0; int _7615 = (int)((_528)->size(0)); for (int _530 = _7614;_530<_7615;++_530){ (((*initsol_xx)(((*_528)(_530)))) = ((*_529)(_530))); (((*initsol_xx_flag)(((*_528)(_530)))) = true); }}void mosek::fusion::p_Model::ensure_initsol_xx( ){ if (! initsol_xx){ (initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natvarmap_num)))); (initsol_xx_flag = ([=]()->std::shared_ptr< monty::ndarray< bool,1 > > { std::vector< bool > _7616; for (int _531=(int)0, _7617=natvarmap_num; _531 < _7617;++_531)_7616.push_back(false); return std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_7616.size()),_7616.begin(),_7616.end())); })()); }else if (((int)((initsol_xx)->size(0)) < natvarmap_num)){ std::shared_ptr< monty::ndarray< double,1 > > _532 = initsol_xx; std::shared_ptr< monty::ndarray< bool,1 > > _533 = initsol_xx_flag; (initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natvarmap_num)))); (initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(natvarmap_num)))); ::mosek::fusion::Utils::Tools::arraycopy(_532,(int)0,initsol_xx,(int)0,(int)((_532)->size(0))); int _7618 = (int)0; int _7619 = (int)((_532)->size(0)); for (int _534 = _7618;_534<_7619;++_534){ (((*initsol_xx_flag)(_534)) = ((*_533)(_534))); }}else {}}std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > mosek::fusion::p_Model::getSolution_bars( mosek::fusion::SolutionType _535){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_535,false))->bars; }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > mosek::fusion::p_Model::getSolution_barx( mosek::fusion::SolutionType _536){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_536,false))->barx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y( mosek::fusion::SolutionType _537){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_537,false))->y; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc( mosek::fusion::SolutionType _538){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_538,true))->xc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx( mosek::fusion::SolutionType _539){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_539,false))->snx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc( mosek::fusion::SolutionType _540){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_540,false))->suc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc( mosek::fusion::SolutionType _541){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_541,false))->slc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux( mosek::fusion::SolutionType _542){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_542,false))->sux; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx( mosek::fusion::SolutionType _543){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_543,false))->slx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx( mosek::fusion::SolutionType _544){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_544,true))->xx; }void mosek::fusion::Model::selectedSolution  ( mosek::fusion::SolutionType _545) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_545); }void mosek::fusion::p_Model::selectedSolution( mosek::fusion::SolutionType _545){ (solutionptr = _545); }mosek::fusion::AccSolutionStatus mosek::fusion::Model::getAcceptedSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus( ){ return acceptable_sol; }void mosek::fusion::Model::acceptedSolutionStatus  ( mosek::fusion::AccSolutionStatus _546) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_546); }void mosek::fusion::p_Model::acceptedSolutionStatus( mosek::fusion::AccSolutionStatus _546){ (acceptable_sol = _546); }mosek::fusion::ProblemStatus mosek::fusion::Model::getProblemStatus  ( mosek::fusion::SolutionType _547) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_547); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus( mosek::fusion::SolutionType _547){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _548 = nullptr; if ((_547 == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_548 = sol_itg); }else if (sol_bas){ (_548 = sol_bas); }else { (_548 = sol_itr); }}else if ((_547 == ::mosek::fusion::SolutionType::Interior)){ (_548 = sol_itr); }else if ((_547 == ::mosek::fusion::SolutionType::Basic)){ (_548 = sol_bas); }else if ((_547 == ::mosek::fusion::SolutionType::Integer)){ (_548 = sol_itg); }else {}if (! _548){ return ::mosek::fusion::ProblemStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_548)->probstatus; }}mosek::fusion::SolutionStatus mosek::fusion::Model::getDualSolutionStatus  ( mosek::fusion::SolutionType _549) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_549); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus( mosek::fusion::SolutionType _549){ return getSolutionStatus(_549,false); }mosek::fusion::SolutionStatus mosek::fusion::Model::getPrimalSolutionStatus  ( mosek::fusion::SolutionType _550) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_550); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus( mosek::fusion::SolutionType _550){ return getSolutionStatus(_550,true); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus( mosek::fusion::SolutionType _551,bool _552){ try { monty::rc_ptr< ::mosek::fusion::SolutionStruct > _554 = get_sol_cache(_551,_552,true); if (_552){ return mosek::fusion::p_SolutionStruct::_get_impl(_554)->pstatus; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_554)->dstatus; }}catch (mosek::fusion::SolutionError _553){ return ::mosek::fusion::SolutionStatus::Undefined; }}void mosek::fusion::p_Model::objective_( const std::string & _555,mosek::fusion::ObjectiveSense _556,monty::rc_ptr< ::mosek::fusion::Expression > _557){ task_putobjectivename(_555); if ((mosek::fusion::p_Set::_get_impl(_557->getShape())->size != (long long)1)){ throw ::mosek::fusion::LengthError(std::string ("Objective expression must be of size 1."));}else {}if (((_556 != ::mosek::fusion::ObjectiveSense::Minimize) && (_556 != ::mosek::fusion::ObjectiveSense::Maximize))){ throw ::mosek::fusion::LengthError(std::string ("Objective sense required."));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _558 = _557->eval(); { int _7620 = (int)0; int _7621 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_558)->x)->size(0)); for (int _559 = _7620;_559<_7621;++_559){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_558)->x)(_559))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_558)->x)(_559))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}std::shared_ptr< monty::ndarray< int,1 > > _560 = nullptr; std::shared_ptr< monty::ndarray< double,1 > > _561 = nullptr; int _562 = (int)0; int _563 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _564 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _565 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _566 = nullptr; { int _567 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_558)->subj)->size(0)); (_564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_567)))); (_565 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_567)))); (_566 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_567)))); ::mosek::fusion::p_Model::inst(mosek::fusion::p_FlatExpr::_get_impl(_558)->x,mosek::fusion::p_FlatExpr::_get_impl(_558)->subj,_564,_565,_566); (_563 = (int)0); { int _568 = (int)0; for (;(_568 < _567);( ++ _568 )){ if ((((*_564)(_568)) >= (int)0)){ ( ++ _563 ); }else {}}}(_562 = (_567 - _563)); if ((_563 > (int)0)){ (_560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_563)))); }else {}if ((_562 == (int)0)){ (_560 = _564); (_561 = mosek::fusion::p_FlatExpr::_get_impl(_558)->cof); }else { int _569 = (int)0; (_561 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_563)))); (_560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_563)))); { long long _570 = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)0)); for (;(_570 < ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)1)));( ++ _570 )){ if ((((*_564)(_570)) >= (int)0)){ (((*_560)(_569)) = ((*_564)(_570))); (((*_561)(_569)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(_570))); ( ++ _569 ); }else {}}}}}double _571 = 0.0; if (mosek::fusion::p_FlatExpr::_get_impl(_558)->bfix){ (_571 = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->bfix)((int)0))); }else {}task_putobjective((_556 == ::mosek::fusion::ObjectiveSense::Maximize),_560,_561,_571); if ((_562 > (int)0)){ long long _572 = (long long)0; { long long _573 = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)0)); for (;(_573 < ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb)((int)1)));( ++ _573 )){ if ((((*_564)(_573)) < (int)0)){ ( ++ _572 ); }else {}}}if ((_572 > (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _574 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_572))); std::shared_ptr< monty::ndarray< long long,1 > > _575 = mosek::fusion::p_FlatExpr::_get_impl(_558)->ptrb; { int _576 = (int)0; { long long _577 = ((*_575)((int)0)); for (;(_577 < ((*_575)((int)1)));( ++ _577 )){ if ((((*_564)(_577)) < (int)0)){ (((*_574)(_576)) = (long long)_577); ( ++ _576 ); }else {}}}}::mosek::fusion::p_Sort::argsort(_574,_564,(long long)0,_572); { int _578 = (int)0; while ((_578 < _572)) { int _579 = _578; ( ++ _578 ); while (((_578 < _572) && (((*_564)(((*_574)(_578)))) == ((*_564)(((*_574)((_578 - (int)1)))))))) { ( ++ _578 ); }int _580 = (_578 - _579); ::mosek::fusion::p_Sort::argsort(_574,_565,_566,(long long)_579,(long long)_578); int _581 = (int)1; int _7622 = (_579 + (int)1); int _7623 = _578; for (int _582 = _7622;_582<_7623;++_582){ long long _583 = ((*_574)(_582)); long long _584 = ((*_574)((_582 - (int)1))); if (((((*_565)(_583)) != ((*_565)(_584))) || (((*_566)(_583)) != ((*_566)(_584))))){ ( ++ _581 ); }else {}}int _585 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _586 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_581))); std::shared_ptr< monty::ndarray< int,1 > > _587 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_581))); std::shared_ptr< monty::ndarray< double,1 > > _588 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_581))); (((*_586)((int)0)) = ((*_565)(((*_574)(_579))))); (((*_587)((int)0)) = ((*_566)(((*_574)(_579))))); if ((((*_586)((int)0)) == ((*_587)((int)0)))){ (((*_588)((int)0)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(((*_574)(_579))))); }else { (((*_588)((int)0)) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(((*_574)(_579)))))); }int _7624 = (_579 + (int)1); int _7625 = _578; for (int _589 = _7624;_589<_7625;++_589){ long long _590 = ((*_574)(_589)); long long _591 = ((*_574)((_589 - (int)1))); if (((((*_565)(_590)) != ((*_565)(_591))) || (((*_566)(_590)) != ((*_566)(_591))))){ ( ++ _585 ); (((*_586)(_585)) = ((*_565)(_590))); (((*_587)(_585)) = ((*_566)(_590))); }else {}if ((((*_586)(_585)) == ((*_587)(_585)))){ (((*_588)(_585)) = (((*_588)(_585)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(_590)))); }else { (((*_588)(_585)) = (((*_588)(_585)) + (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_558)->cof)(_590))))); }}int _592 = (- (((*_564)(((*_574)(_579)))) + (int)1)); int _593 = task_barvardim(_592); int _594 = task_append_barmatrix(_593,_586,_587,_588); task_putbarcj(_592,_594); }}}else {}}else {}}void mosek::fusion::Model::objective  ( double _595) { mosek::fusion::p_Model::_get_impl(this)->objective(_595); }void mosek::fusion::p_Model::objective( double _595){ objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_595)); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _596,    double _597) { mosek::fusion::p_Model::_get_impl(this)->objective(_596,_597); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _596,double _597){ objective_(std::string (""),_596,::mosek::fusion::p_Expr::constTerm(_597)); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _598,    monty::rc_ptr< ::mosek::fusion::Variable > _599) { mosek::fusion::p_Model::_get_impl(this)->objective(_598,_599); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _598,monty::rc_ptr< ::mosek::fusion::Variable > _599){ objective_(std::string (""),_598,_599->asExpr()); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _600,    monty::rc_ptr< ::mosek::fusion::Expression > _601) { mosek::fusion::p_Model::_get_impl(this)->objective(_600,_601); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _600,monty::rc_ptr< ::mosek::fusion::Expression > _601){ objective_(std::string (""),_600,_601); }void mosek::fusion::Model::objective  ( const std::string & _602,    double _603) { mosek::fusion::p_Model::_get_impl(this)->objective(_602,_603); }void mosek::fusion::p_Model::objective( const std::string & _602,double _603){ objective_(_602,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_603)); }void mosek::fusion::Model::objective  ( const std::string & _604,    mosek::fusion::ObjectiveSense _605,    double _606) { mosek::fusion::p_Model::_get_impl(this)->objective(_604,_605,_606); }void mosek::fusion::p_Model::objective( const std::string & _604,mosek::fusion::ObjectiveSense _605,double _606){ objective_(_604,_605,::mosek::fusion::p_Expr::constTerm(_606)); }void mosek::fusion::Model::objective  ( const std::string & _607,    mosek::fusion::ObjectiveSense _608,    monty::rc_ptr< ::mosek::fusion::Variable > _609) { mosek::fusion::p_Model::_get_impl(this)->objective(_607,_608,_609); }void mosek::fusion::p_Model::objective( const std::string & _607,mosek::fusion::ObjectiveSense _608,monty::rc_ptr< ::mosek::fusion::Variable > _609){ objective_(_607,_608,_609->asExpr()); }void mosek::fusion::Model::objective  ( const std::string & _610,    mosek::fusion::ObjectiveSense _611,    monty::rc_ptr< ::mosek::fusion::Expression > _612) { mosek::fusion::p_Model::_get_impl(this)->objective(_610,_611,_612); }void mosek::fusion::p_Model::objective( const std::string & _610,mosek::fusion::ObjectiveSense _611,monty::rc_ptr< ::mosek::fusion::Expression > _612){ objective_(_610,_611,_612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _613,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _614) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_613,_614); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _613,monty::rc_ptr< ::mosek::fusion::QConeDomain > _614){ return constraint_(std::string (""),nullptr,_613->asExpr(),_614); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _615,    monty::rc_ptr< ::mosek::fusion::Variable > _616,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _617) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_615,_616,_617); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _615,monty::rc_ptr< ::mosek::fusion::Variable > _616,monty::rc_ptr< ::mosek::fusion::QConeDomain > _617){ return constraint_(_615,nullptr,_616->asExpr(),_617); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _618,    monty::rc_ptr< ::mosek::fusion::Variable > _619,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _620) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_618,_619,_620); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _618,monty::rc_ptr< ::mosek::fusion::Variable > _619,monty::rc_ptr< ::mosek::fusion::QConeDomain > _620){ return constraint_(std::string (""),_618,_619->asExpr(),_620); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _621,    monty::rc_ptr< ::mosek::fusion::Set > _622,    monty::rc_ptr< ::mosek::fusion::Variable > _623,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _624) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_621,_622,_623,_624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _621,monty::rc_ptr< ::mosek::fusion::Set > _622,monty::rc_ptr< ::mosek::fusion::Variable > _623,monty::rc_ptr< ::mosek::fusion::QConeDomain > _624){ return constraint_(_621,_622,_623->asExpr(),_624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _625,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _626) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_625,_626); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _625,monty::rc_ptr< ::mosek::fusion::RangeDomain > _626){ return constraint_(std::string (""),nullptr,_625->asExpr(),_626); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _627,    monty::rc_ptr< ::mosek::fusion::Variable > _628,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _629) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_627,_628,_629); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _627,monty::rc_ptr< ::mosek::fusion::Variable > _628,monty::rc_ptr< ::mosek::fusion::RangeDomain > _629){ return constraint_(_627,nullptr,_628->asExpr(),_629); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _630,    monty::rc_ptr< ::mosek::fusion::Variable > _631,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _632) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_630,_631,_632); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _630,monty::rc_ptr< ::mosek::fusion::Variable > _631,monty::rc_ptr< ::mosek::fusion::RangeDomain > _632){ return constraint_(std::string (""),_630,_631->asExpr(),_632); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _633,    monty::rc_ptr< ::mosek::fusion::Set > _634,    monty::rc_ptr< ::mosek::fusion::Variable > _635,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _636) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_633,_634,_635,_636); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _633,monty::rc_ptr< ::mosek::fusion::Set > _634,monty::rc_ptr< ::mosek::fusion::Variable > _635,monty::rc_ptr< ::mosek::fusion::RangeDomain > _636){ return constraint_(_633,_634,_635->asExpr(),_636); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _637,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _638) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_637,_638); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _637,monty::rc_ptr< ::mosek::fusion::LinearDomain > _638){ return constraint_(std::string (""),nullptr,_637->asExpr(),_638); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _639,    monty::rc_ptr< ::mosek::fusion::Variable > _640,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _641) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_639,_640,_641); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _639,monty::rc_ptr< ::mosek::fusion::Variable > _640,monty::rc_ptr< ::mosek::fusion::LinearDomain > _641){ return constraint_(_639,nullptr,_640->asExpr(),_641); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _642,    monty::rc_ptr< ::mosek::fusion::Variable > _643,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _644) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_642,_643,_644); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _642,monty::rc_ptr< ::mosek::fusion::Variable > _643,monty::rc_ptr< ::mosek::fusion::LinearDomain > _644){ return constraint_(std::string (""),_642,_643->asExpr(),_644); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _645,    monty::rc_ptr< ::mosek::fusion::Set > _646,    monty::rc_ptr< ::mosek::fusion::Variable > _647,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _648) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_645,_646,_647,_648); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _645,monty::rc_ptr< ::mosek::fusion::Set > _646,monty::rc_ptr< ::mosek::fusion::Variable > _647,monty::rc_ptr< ::mosek::fusion::LinearDomain > _648){ return constraint_(_645,_646,_647->asExpr(),_648); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _649,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _650) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_649,_650); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _649,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _650){ return constraint_(std::string (""),_649->asExpr(),_650); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _651,    monty::rc_ptr< ::mosek::fusion::Variable > _652,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _653) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_651,_652,_653); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _651,monty::rc_ptr< ::mosek::fusion::Variable > _652,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _653){ return constraint_(_651,_652->asExpr(),_653); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _654,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _655) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_654,_655); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _654,monty::rc_ptr< ::mosek::fusion::PSDDomain > _655){ return constraint_(std::string (""),_654->asExpr(),_655); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _656,    monty::rc_ptr< ::mosek::fusion::Variable > _657,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _658) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_656,_657,_658); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _656,monty::rc_ptr< ::mosek::fusion::Variable > _657,monty::rc_ptr< ::mosek::fusion::PSDDomain > _658){ return constraint_(_656,_657->asExpr(),_658); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _659,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _660) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_659,_660); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _659,monty::rc_ptr< ::mosek::fusion::QConeDomain > _660){ return constraint_(std::string (""),nullptr,_659,_660); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _661,    monty::rc_ptr< ::mosek::fusion::Expression > _662,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _663) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_661,_662,_663); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _661,monty::rc_ptr< ::mosek::fusion::Expression > _662,monty::rc_ptr< ::mosek::fusion::QConeDomain > _663){ return constraint_(_661,nullptr,_662,_663); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _664,    monty::rc_ptr< ::mosek::fusion::Expression > _665,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _666) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_664,_665,_666); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _664,monty::rc_ptr< ::mosek::fusion::Expression > _665,monty::rc_ptr< ::mosek::fusion::QConeDomain > _666){ return constraint_(std::string (""),_664,_665,_666); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _667,    monty::rc_ptr< ::mosek::fusion::Set > _668,    monty::rc_ptr< ::mosek::fusion::Expression > _669,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _670) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_667,_668,_669,_670); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _667,monty::rc_ptr< ::mosek::fusion::Set > _668,monty::rc_ptr< ::mosek::fusion::Expression > _669,monty::rc_ptr< ::mosek::fusion::QConeDomain > _670){ return constraint_(_667,_668,_669,_670); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _671,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _672) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_671,_672); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _671,monty::rc_ptr< ::mosek::fusion::RangeDomain > _672){ return constraint_(std::string (""),nullptr,_671,_672); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _673,    monty::rc_ptr< ::mosek::fusion::Expression > _674,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _675) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_673,_674,_675); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _673,monty::rc_ptr< ::mosek::fusion::Expression > _674,monty::rc_ptr< ::mosek::fusion::RangeDomain > _675){ return constraint_(_673,nullptr,_674,_675); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _676,    monty::rc_ptr< ::mosek::fusion::Expression > _677,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _678) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_676,_677,_678); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _676,monty::rc_ptr< ::mosek::fusion::Expression > _677,monty::rc_ptr< ::mosek::fusion::RangeDomain > _678){ return constraint_(std::string (""),_676,_677,_678); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _679,    monty::rc_ptr< ::mosek::fusion::Set > _680,    monty::rc_ptr< ::mosek::fusion::Expression > _681,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _682) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_679,_680,_681,_682); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _679,monty::rc_ptr< ::mosek::fusion::Set > _680,monty::rc_ptr< ::mosek::fusion::Expression > _681,monty::rc_ptr< ::mosek::fusion::RangeDomain > _682){ return constraint_(_679,_680,_681,_682); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _683,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _684) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_683,_684); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _683,monty::rc_ptr< ::mosek::fusion::LinearDomain > _684){ return constraint_(std::string (""),nullptr,_683,_684); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _685,    monty::rc_ptr< ::mosek::fusion::Expression > _686,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _687) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_685,_686,_687); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _685,monty::rc_ptr< ::mosek::fusion::Expression > _686,monty::rc_ptr< ::mosek::fusion::LinearDomain > _687){ return constraint_(_685,nullptr,_686,_687); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _688,    monty::rc_ptr< ::mosek::fusion::Expression > _689,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _690) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_688,_689,_690); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _688,monty::rc_ptr< ::mosek::fusion::Expression > _689,monty::rc_ptr< ::mosek::fusion::LinearDomain > _690){ return constraint_(std::string (""),_688,_689,_690); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _691,    monty::rc_ptr< ::mosek::fusion::Set > _692,    monty::rc_ptr< ::mosek::fusion::Expression > _693,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _694) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_691,_692,_693,_694); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _691,monty::rc_ptr< ::mosek::fusion::Set > _692,monty::rc_ptr< ::mosek::fusion::Expression > _693,monty::rc_ptr< ::mosek::fusion::LinearDomain > _694){ return constraint_(_691,_692,_693,_694); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _695,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _696) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_695,_696); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _695,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _696){ return constraint_(std::string (""),_695,_696); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _697,    monty::rc_ptr< ::mosek::fusion::Expression > _698,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _699) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_697,_698,_699); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _697,monty::rc_ptr< ::mosek::fusion::Expression > _698,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _699){ return constraint_(_697,_698,_699); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _700,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _701) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_700,_701); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _700,monty::rc_ptr< ::mosek::fusion::PSDDomain > _701){ return constraint_(std::string (""),_700,_701); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _702,    monty::rc_ptr< ::mosek::fusion::Expression > _703,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _704) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_702,_703,_704); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _702,monty::rc_ptr< ::mosek::fusion::Expression > _703,monty::rc_ptr< ::mosek::fusion::PSDDomain > _704){ return constraint_(_702,_703,_704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _705) { return mosek::fusion::p_Model::_get_impl(this)->variable(_705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _705){ return variable_(std::string (""),nullptr,_705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _706,    int _707,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _708) { return mosek::fusion::p_Model::_get_impl(this)->variable(_706,_707,_708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _706,int _707,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _708){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_706,_706,_707),_708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _709,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _710) { return mosek::fusion::p_Model::_get_impl(this)->variable(_709,_710); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _709,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _710){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_709,_709),_710); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _711,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _712) { return mosek::fusion::p_Model::_get_impl(this)->variable(_711,_712); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _711,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _712){ return variable_(_711,nullptr,_712); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _713,    int _714,    int _715,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _716) { return mosek::fusion::p_Model::_get_impl(this)->variable(_713,_714,_715,_716); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _713,int _714,int _715,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _716){ return variable_(_713,::mosek::fusion::p_Set::make(_714,_714,_715),_716); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _717,    int _718,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _719) { return mosek::fusion::p_Model::_get_impl(this)->variable(_717,_718,_719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _717,int _718,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _719){ return variable_(_717,::mosek::fusion::p_Set::make(_718,_718),_719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _720,    monty::rc_ptr< ::mosek::fusion::Set > _721,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _722) { return mosek::fusion::p_Model::_get_impl(this)->variable(_720,_721,_722); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _720,monty::rc_ptr< ::mosek::fusion::Set > _721,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _722){ return variable_(_720,_721,_722); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _723,    std::shared_ptr< monty::ndarray< int,1 > > _724,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _725) { return mosek::fusion::p_Model::_get_impl(this)->variable(_723,_724,_725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _723,std::shared_ptr< monty::ndarray< int,1 > > _724,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _725){ return variable_(_723,::mosek::fusion::p_Set::make(_724),_725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::PSDDomain > _726) { return mosek::fusion::p_Model::_get_impl(this)->variable(_726); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::PSDDomain > _726){ return variable_(std::string (""),nullptr,_726); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _727,    int _728,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _729) { return mosek::fusion::p_Model::_get_impl(this)->variable(_727,_728,_729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _727,int _728,monty::rc_ptr< ::mosek::fusion::PSDDomain > _729){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_727,_727,_728),_729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _730,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _731) { return mosek::fusion::p_Model::_get_impl(this)->variable(_730,_731); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _730,monty::rc_ptr< ::mosek::fusion::PSDDomain > _731){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_730,_730),_731); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _732,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _733) { return mosek::fusion::p_Model::_get_impl(this)->variable(_732,_733); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _732,monty::rc_ptr< ::mosek::fusion::PSDDomain > _733){ return variable_(_732,nullptr,_733); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _734,    int _735,    int _736,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _737) { return mosek::fusion::p_Model::_get_impl(this)->variable(_734,_735,_736,_737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _734,int _735,int _736,monty::rc_ptr< ::mosek::fusion::PSDDomain > _737){ return variable_(_734,::mosek::fusion::p_Set::make(_735,_735,_736),_737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _738,    int _739,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _740) { return mosek::fusion::p_Model::_get_impl(this)->variable(_738,_739,_740); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _738,int _739,monty::rc_ptr< ::mosek::fusion::PSDDomain > _740){ return variable_(_738,::mosek::fusion::p_Set::make(_739,_739),_740); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _741,    monty::rc_ptr< ::mosek::fusion::Set > _742,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _743) { return mosek::fusion::p_Model::_get_impl(this)->variable(_741,_742,_743); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _741,monty::rc_ptr< ::mosek::fusion::Set > _742,monty::rc_ptr< ::mosek::fusion::PSDDomain > _743){ return variable_(_741,_742,_743); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _744,    std::shared_ptr< monty::ndarray< int,1 > > _745,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _746) { return mosek::fusion::p_Model::_get_impl(this)->variable(_744,_745,_746); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _744,std::shared_ptr< monty::ndarray< int,1 > > _745,monty::rc_ptr< ::mosek::fusion::PSDDomain > _746){ return variable_(_744,::mosek::fusion::p_Set::make(_745),_746); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::Model::variable  ( int _747,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _748) { return mosek::fusion::p_Model::_get_impl(this)->variable(_747,_748); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable( int _747,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _748){ return variable_(std::string (""),_747,_748); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::Model::variable  ( const std::string & _749,    int _750,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _751) { return mosek::fusion::p_Model::_get_impl(this)->variable(_749,_750,_751); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable( const std::string & _749,int _750,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _751){ return variable_(_749,_750,_751); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _752) { return mosek::fusion::p_Model::_get_impl(this)->variable(_752); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::QConeDomain > _752){ return variable_(std::string (""),nullptr,_752); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _753) { return mosek::fusion::p_Model::_get_impl(this)->variable(_753); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::RangeDomain > _753){ return ranged_variable(std::string (""),nullptr,_753); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _754) { return mosek::fusion::p_Model::_get_impl(this)->variable(_754); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::LinearDomain > _754){ return variable_(std::string (""),nullptr,_754); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _755,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _756) { return mosek::fusion::p_Model::_get_impl(this)->variable(_755,_756); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _755,monty::rc_ptr< ::mosek::fusion::RangeDomain > _756){ return ranged_variable(std::string (""),::mosek::fusion::p_Set::make(_755),_756); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _757,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _758) { return mosek::fusion::p_Model::_get_impl(this)->variable(_757,_758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _757,monty::rc_ptr< ::mosek::fusion::LinearDomain > _758){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_757),_758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _759,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _760) { return mosek::fusion::p_Model::_get_impl(this)->variable(_759,_760); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _759,monty::rc_ptr< ::mosek::fusion::QConeDomain > _760){ return variable_(std::string (""),_759,_760); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _761,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _762) { return mosek::fusion::p_Model::_get_impl(this)->variable(_761,_762); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _761,monty::rc_ptr< ::mosek::fusion::RangeDomain > _762){ return ranged_variable(std::string (""),_761,_762); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _763,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _764) { return mosek::fusion::p_Model::_get_impl(this)->variable(_763,_764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _763,monty::rc_ptr< ::mosek::fusion::LinearDomain > _764){ return variable_(std::string (""),_763,_764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _765,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _766) { return mosek::fusion::p_Model::_get_impl(this)->variable(_765,_766); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _765,monty::rc_ptr< ::mosek::fusion::QConeDomain > _766){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_765),_766); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _767,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _768) { return mosek::fusion::p_Model::_get_impl(this)->variable(_767,_768); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _767,monty::rc_ptr< ::mosek::fusion::RangeDomain > _768){ return ranged_variable(std::string (""),::mosek::fusion::p_Set::make(_767),_768); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _769,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _770) { return mosek::fusion::p_Model::_get_impl(this)->variable(_769,_770); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _769,monty::rc_ptr< ::mosek::fusion::LinearDomain > _770){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_769),_770); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _771) { return mosek::fusion::p_Model::_get_impl(this)->variable(_771); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _771){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_771),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _772) { return mosek::fusion::p_Model::_get_impl(this)->variable(_772); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _772){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_772),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( ) { return mosek::fusion::p_Model::_get_impl(this)->variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( ){ return variable_(std::string (""),::mosek::fusion::p_Set::make((int)1),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _773,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _774) { return mosek::fusion::p_Model::_get_impl(this)->variable(_773,_774); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _773,monty::rc_ptr< ::mosek::fusion::QConeDomain > _774){ return variable_(_773,nullptr,_774); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _775,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _776) { return mosek::fusion::p_Model::_get_impl(this)->variable(_775,_776); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _775,monty::rc_ptr< ::mosek::fusion::RangeDomain > _776){ return ranged_variable(_775,nullptr,_776); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _777,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _778) { return mosek::fusion::p_Model::_get_impl(this)->variable(_777,_778); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _777,monty::rc_ptr< ::mosek::fusion::LinearDomain > _778){ return variable_(_777,nullptr,_778); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _779,    std::shared_ptr< monty::ndarray< int,1 > > _780,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _781) { return mosek::fusion::p_Model::_get_impl(this)->variable(_779,_780,_781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _779,std::shared_ptr< monty::ndarray< int,1 > > _780,monty::rc_ptr< ::mosek::fusion::RangeDomain > _781){ return ranged_variable(_779,::mosek::fusion::p_Set::make(_780),_781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _782,    std::shared_ptr< monty::ndarray< int,1 > > _783,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _784) { return mosek::fusion::p_Model::_get_impl(this)->variable(_782,_783,_784); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _782,std::shared_ptr< monty::ndarray< int,1 > > _783,monty::rc_ptr< ::mosek::fusion::LinearDomain > _784){ return _pubthis->variable(_782,::mosek::fusion::p_Set::make(_783),_784); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _785,    monty::rc_ptr< ::mosek::fusion::Set > _786,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _787) { return mosek::fusion::p_Model::_get_impl(this)->variable(_785,_786,_787); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _785,monty::rc_ptr< ::mosek::fusion::Set > _786,monty::rc_ptr< ::mosek::fusion::QConeDomain > _787){ return variable_(_785,_786,_787); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _788,    monty::rc_ptr< ::mosek::fusion::Set > _789,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _790) { return mosek::fusion::p_Model::_get_impl(this)->variable(_788,_789,_790); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _788,monty::rc_ptr< ::mosek::fusion::Set > _789,monty::rc_ptr< ::mosek::fusion::RangeDomain > _790){ return ranged_variable(_788,_789,_790); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _791,    monty::rc_ptr< ::mosek::fusion::Set > _792,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _793) { return mosek::fusion::p_Model::_get_impl(this)->variable(_791,_792,_793); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _791,monty::rc_ptr< ::mosek::fusion::Set > _792,monty::rc_ptr< ::mosek::fusion::LinearDomain > _793){ return variable_(_791,_792,_793); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _794,    int _795,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _796) { return mosek::fusion::p_Model::_get_impl(this)->variable(_794,_795,_796); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _794,int _795,monty::rc_ptr< ::mosek::fusion::QConeDomain > _796){ return variable_(_794,::mosek::fusion::p_Set::make(_795),_796); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _797,    int _798,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _799) { return mosek::fusion::p_Model::_get_impl(this)->variable(_797,_798,_799); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _797,int _798,monty::rc_ptr< ::mosek::fusion::RangeDomain > _799){ return ranged_variable(_797,::mosek::fusion::p_Set::make(_798),_799); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _800,    int _801,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _802) { return mosek::fusion::p_Model::_get_impl(this)->variable(_800,_801,_802); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _800,int _801,monty::rc_ptr< ::mosek::fusion::LinearDomain > _802){ return variable_(_800,::mosek::fusion::p_Set::make(_801),_802); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _803,    std::shared_ptr< monty::ndarray< int,1 > > _804) { return mosek::fusion::p_Model::_get_impl(this)->variable(_803,_804); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _803,std::shared_ptr< monty::ndarray< int,1 > > _804){ return variable_(_803,::mosek::fusion::p_Set::make(_804),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _805,    int _806) { return mosek::fusion::p_Model::_get_impl(this)->variable(_805,_806); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _805,int _806){ return variable_(_805,::mosek::fusion::p_Set::make(_806),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _807) { return mosek::fusion::p_Model::_get_impl(this)->variable(_807); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _807){ return variable_(_807,::mosek::fusion::p_Set::make((int)1),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::ranged_variable( const std::string & _808,int _809,monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > _810){ monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _811 = nullptr; if ((((int)((_808).size()) > (int)0) && hasVariable(_808))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_808).get())->a(std::string ("'")).get())->toString());}else {}int _812 = _809; if ((_812 > (int)0)){ if (((mosek::fusion::p_SymmetricRangeDomain::_get_impl(_810)->dim > (int)0) && (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_810)->dim != _812))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}}else { (_812 = ([&]() -> int { if ( (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_810)->dim > (int)0)) return (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_810)->dim); else return ((int)1); })()); }int _813 = task_vars_used; int _814 = task_numcon(); int _815 = task_numcone(); int _816 = task_numbarvar(); {monty::finally _7626([&]{ if (! _811){ task_cleanup(_813,_814,_815,_816); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _817 = nullptr; int _818 = ((_812 * (_812 + (int)1)) / (int)2); int _819 = (int)0; if (mosek::fusion::p_RangeDomain::_get_impl(_810)->sparse_flag){ (_819 = task_alloc_vars(_818)); natvarmap_ensure(_818); (natvarmap_num = (natvarmap_num + _818)); std::shared_ptr< monty::ndarray< double,1 > > _820 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7627; for (int _821=(int)0, _7628=_812; _821 < _7628;++_821) for (int _822=(int)0, _7629=_821; _822 < _7629;++_822)_7627.push_back(mosek::fusion::p_SymmetricRangeDomain::_get_impl(_810.get())->get_lb_item((long long)((((_821 * (_821 + (int)1)) / (int)2) + _822)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7627.size()),_7627.begin(),_7627.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _823 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7630; for (int _824=(int)0, _7631=_812; _824 < _7631;++_824) for (int _825=(int)0, _7632=_824; _825 < _7632;++_825)_7630.push_back(mosek::fusion::p_SymmetricRangeDomain::_get_impl(_810.get())->get_ub_item((long long)((((_824 * (_824 + (int)1)) / (int)2) + _825)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7630.size()),_7630.begin(),_7630.end())); })(); task_var_putboundslice_ra(_819,(_819 + _818),_820,_823); (_817 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_818)))); int _7633 = (int)0; int _7634 = _818; for (int _826 = _7633;_826<_7634;++_826){ (((*_817)(_826)) = (_819 + _826)); }int _7635 = (int)0; int _7636 = _818; for (int _827 = _7635;_827<_7636;++_827){ (((*natvarmap_idx)((_827 + _819))) = (long long)_827); }int _7637 = (int)0; int _7638 = _818; for (int _828 = _7637;_828<_7638;++_828){ (((*natvarmap_Var)((_828 + _819))) = vars_used); }}else {}(_811 = ::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(_pubthis,_808,::mosek::fusion::RangeDomain::t(_810),_812,_817,numVariables())); if (mosek::fusion::p_RangeDomain::_get_impl(_810)->cardinal_flag){ _811->makeInteger(); }else {}}}addVariable(_808,::mosek::fusion::ModelVariable::t(_811)); return _811; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::ranged_variable( const std::string & _829,monty::rc_ptr< ::mosek::fusion::Set > _830,monty::rc_ptr< ::mosek::fusion::RangeDomain > _831){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _832 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _833; if ((((int)((_829).size()) > (int)0) && hasVariable(_829))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_829).get())->a(std::string ("'")).get())->toString());}else {}if (_830){ if ((! mosek::fusion::p_RangeDomain::_get_impl(_831.get())->match_shape(_830))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}(_833 = _830); }else { (_833 = mosek::fusion::p_RangeDomain::_get_impl(_831)->shape); if (! _833){ (_833 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else {}}int _834 = task_vars_used; int _835 = task_numcon(); int _836 = task_numcone(); int _837 = task_numbarvar(); {monty::finally _7639([&]{ if (! _832){ task_cleanup(_834,_835,_836,_837); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _838 = nullptr; int _839 = (int)mosek::fusion::p_Set::_get_impl(_833)->size; int _840 = (int)0; if ((! mosek::fusion::p_RangeDomain::_get_impl(_831)->sparse_flag)){ (_840 = task_alloc_vars(_839)); natvarmap_ensure(_839); (natvarmap_num = (natvarmap_num + _839)); std::shared_ptr< monty::ndarray< double,1 > > _841 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7640; for (long long _842=(long long)0, _7641=_839; _842 < _7641;++_842)_7640.push_back(mosek::fusion::p_RangeDomain::_get_impl(_831.get())->get_lb_item(_842)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7640.size()),_7640.begin(),_7640.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _843 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7642; for (long long _844=(long long)0, _7643=_839; _844 < _7643;++_844)_7642.push_back(mosek::fusion::p_RangeDomain::_get_impl(_831.get())->get_ub_item(_844)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7642.size()),_7642.begin(),_7642.end())); })(); task_var_putboundslice_ra(_840,(_840 + _839),_841,_843); (_838 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_839)))); int _7644 = (int)0; int _7645 = _839; for (int _845 = _7644;_845<_7645;++_845){ (((*_838)(_845)) = (_840 + _845)); }int _7646 = (int)0; int _7647 = _839; for (int _846 = _7646;_846<_7647;++_846){ (((*natvarmap_idx)((_846 + _840))) = (long long)_846); }int _7648 = (int)0; int _7649 = _839; for (int _847 = _7648;_847<_7649;++_847){ (((*natvarmap_Var)((_847 + _840))) = vars_used); }}else {}(_832 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(_pubthis,_829,_833,_831,_838,numVariables())); if (mosek::fusion::p_RangeDomain::_get_impl(_831)->cardinal_flag){ _832->makeInteger(); }else {}}}addVariable(_829,_832); return _832; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _848,monty::rc_ptr< ::mosek::fusion::Set > _849,monty::rc_ptr< ::mosek::fusion::QConeDomain > _850){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _851 = nullptr; monty::rc_ptr< ::mosek::fusion::ModelVariable > _852 = nullptr; if ((((int)((_848).size()) > (int)0) && hasVariable(_848))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_848).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _853 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _849) return (_849); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_QConeDomain::_get_impl(_850)->shape) return (mosek::fusion::p_QConeDomain::_get_impl(_850)->shape); else return (::mosek::fusion::p_IntSet::_new_IntSet((int)1)); })()); })(); if (((! mosek::fusion::p_QConeDomain::_get_impl(_850.get())->match_shape(_853)) || (_850->getAxis() >= mosek::fusion::p_Set::_get_impl(_853)->nd))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _854 = ([&]() -> int { if ( mosek::fusion::p_QConeDomain::_get_impl(_850)->shape) return (_850->getAxis()); else return ((mosek::fusion::p_Set::_get_impl(_853)->nd - (int)1)); })(); int _855 = _853->dim(_854); int _856 = (int)1; int _7650 = (int)0; int _7651 = mosek::fusion::p_Set::_get_impl(_853)->nd; for (int _857 = _7650;_857<_7651;++_857){ if ((_854 != _857)){ (_856 *= _853->dim(_857)); }else {}}int _858 = (int)1; int _7652 = (int)0; int _7653 = _854; for (int _859 = _7652;_859<_7653;++_859){ (_858 *= _853->dim(_859)); }int _860 = (int)1; int _7654 = (_854 + (int)1); int _7655 = mosek::fusion::p_Set::_get_impl(_853)->nd; for (int _861 = _7654;_861<_7655;++_861){ (_860 *= _853->dim(_861)); }if ((((mosek::fusion::p_QConeDomain::_get_impl(_850)->key == ::mosek::fusion::QConeKey::InQCone) && (_855 < (int)2)) || ((mosek::fusion::p_QConeDomain::_get_impl(_850)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_855 < (int)3)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));}else {}int _862 = task_vars_used; int _863 = task_numcon(); int _864 = task_numcone(); int _865 = task_numbarvar(); {monty::finally _7656([&]{ if (! _851){ (natvarmap_num = _862); (natbarvarmap_num = _865); task_cleanup(_862,_863,_864,_865); }else {}});{ int _866 = (int)mosek::fusion::p_Set::_get_impl(_853)->size; int _867 = task_alloc_vars(_866); natvarmap_ensure(_866); (natvarmap_num = (natvarmap_num + _866)); int _868 = (_867 + _866); int _7657 = (int)0; int _7658 = (_868 - _867); for (int _869 = _7657;_869<_7658;++_869){ (((*natvarmap_idx)((_869 + _867))) = (long long)_869); }task_var_putboundslice_fr(_867,_868); if (mosek::fusion::p_QConeDomain::_get_impl(_850)->int_flag){ task_var_putintlist(::mosek::fusion::Utils::Tools::range(_867,_868)); }else {}int _870; std::shared_ptr< monty::ndarray< int,1 > > _871 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7659; for (int _872=(int)0, _7660=(_856 * _855); _872 < _7660;++_872)_7659.push_back((_872 + _867)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7659.size()),_7659.begin(),_7659.end())); })(); if ((mosek::fusion::p_QConeDomain::_get_impl(_850)->key == ::mosek::fusion::QConeKey::InQCone)){ (_870 = task_append_quadcone(_855,_867,_856,_858,_860)); }else { (_870 = task_append_rquadcone(_855,_867,_856,_858,_860)); }(_852 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(_pubthis,_848,_850,_853,_871,_855,_870,_856,numVariables())); if (mosek::fusion::p_QConeDomain::_get_impl(_850)->int_flag){ }else {}int _7661 = (int)0; int _7662 = _866; for (int _873 = _7661;_873<_7662;++_873){ (((*natvarmap_Var)((_873 + _867))) = vars_used); }(_851 = _852); }}addVariable(_848,_851); return _851; }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable_( const std::string & _874,int _875,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _876){ monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _877 = nullptr; if ((((int)((_874).size()) > (int)0) && hasVariable(_874))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_874).get())->a(std::string ("'")).get())->toString());}else {}int _878 = _875; if ((_878 > (int)0)){ if (((mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->dim > (int)0) && (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->dim != _878))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}}else { (_878 = ([&]() -> int { if ( (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->dim > (int)0)) return (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->dim); else return ((int)1); })()); }int _879 = task_vars_used; int _880 = task_numcon(); int _881 = task_numcone(); int _882 = task_numbarvar(); {monty::finally _7663([&]{ if (! _877){ task_cleanup(_879,_880,_881,_882); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _883 = nullptr; mosek::fusion::RelationKey _884 = mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->key; int _885 = ((_878 * (_878 + (int)1)) / (int)2); int _886 = (int)0; if ((! mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->sparse_flag)){ (_886 = task_alloc_vars(_885)); natvarmap_ensure(_885); (natvarmap_num = (natvarmap_num + _885)); if ((_884 == ::mosek::fusion::RelationKey::IsFree)){ task_var_putboundslice_fr(_886,(_886 + _885)); }else { std::shared_ptr< monty::ndarray< double,1 > > _887 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_885))); { int _888 = (int)0; int _7664 = (int)0; int _7665 = _878; for (int _889 = _7664;_889<_7665;++_889){ int _7666 = (int)0; int _7667 = _889; for (int _890 = _7666;_890<_7667;++_890){ (((*_887)(_888)) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876.get())->get_rhs_item((long long)(((_889 * _878) + _890)))); ( ++ _888 ); }}}if ((_884 == ::mosek::fusion::RelationKey::LessThan)){ task_var_putboundslice_up(_886,(_886 + _885),_887); }else if ((_884 == ::mosek::fusion::RelationKey::GreaterThan)){ task_var_putboundslice_lo(_886,(_886 + _885),_887); }else if ((_884 == ::mosek::fusion::RelationKey::EqualsTo)){ task_var_putboundslice_fx(_886,(_886 + _885),_887); }else {}}(_883 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7668; for (int _891=(int)0, _7669=_885; _891 < _7669;++_891)_7668.push_back((_886 + _891)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7668.size()),_7668.begin(),_7668.end())); })()); int _7670 = (int)0; int _7671 = _885; for (int _892 = _7670;_892<_7671;++_892){ (((*natvarmap_idx)((_892 + _886))) = (long long)_892); }}else {}(_877 = ::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(_pubthis,_874,_876,_878,_883,numVariables())); if (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->cardinal_flag){ _877->makeInteger(); }else {}if ((! mosek::fusion::p_SymmetricLinearDomain::_get_impl(_876)->sparse_flag)){ int _7672 = (int)0; int _7673 = _885; for (int _893 = _7672;_893<_7673;++_893){ (((*natvarmap_Var)((_893 + _886))) = vars_used); }}else {}}}addVariable(_874,::mosek::fusion::ModelVariable::t(_877)); return _877; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _894,monty::rc_ptr< ::mosek::fusion::Set > _895,monty::rc_ptr< ::mosek::fusion::LinearDomain > _896){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _897 = nullptr; monty::rc_ptr< ::mosek::fusion::ModelVariable > _898 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _899; if ((((int)((_894).size()) > (int)0) && hasVariable(_894))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_894).get())->a(std::string ("'")).get())->toString());}else {}if (_895){ if ((! mosek::fusion::p_LinearDomain::_get_impl(_896.get())->match_shape(_895))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}(_899 = _895); }else { (_899 = mosek::fusion::p_LinearDomain::_get_impl(_896)->shape); if (! _899){ (_899 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else {}}int _900 = task_vars_used; int _901 = task_numcon(); int _902 = task_numcone(); int _903 = task_numbarvar(); {monty::finally _7674([&]{ if (! _897){ task_cleanup(_900,_901,_902,_903); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _904 = nullptr; mosek::fusion::RelationKey _905 = mosek::fusion::p_LinearDomain::_get_impl(_896)->key; int _906 = (int)mosek::fusion::p_Set::_get_impl(_899)->size; int _907 = (int)0; if ((! mosek::fusion::p_LinearDomain::_get_impl(_896)->sparse_flag)){ (_907 = task_alloc_vars(_906)); natvarmap_ensure(_906); (natvarmap_num = (natvarmap_num + _906)); if ((_905 == ::mosek::fusion::RelationKey::IsFree)){ task_var_putboundslice_fr(_907,(_907 + _906)); }else { std::shared_ptr< monty::ndarray< double,1 > > _908 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_906))); int _7675 = (int)0; int _7676 = _906; for (int _909 = _7675;_909<_7676;++_909){ (((*_908)(_909)) = mosek::fusion::p_LinearDomain::_get_impl(_896.get())->get_rhs_item((long long)_909)); }if ((_905 == ::mosek::fusion::RelationKey::LessThan)){ task_var_putboundslice_up(_907,(_907 + _906),_908); }else if ((_905 == ::mosek::fusion::RelationKey::GreaterThan)){ task_var_putboundslice_lo(_907,(_907 + _906),_908); }else if ((_905 == ::mosek::fusion::RelationKey::EqualsTo)){ task_var_putboundslice_fx(_907,(_907 + _906),_908); }else {}}(_904 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7677; for (int _910=(int)0, _7678=_906; _910 < _7678;++_910)_7677.push_back((_907 + _910)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7677.size()),_7677.begin(),_7677.end())); })()); int _7679 = (int)0; int _7680 = _906; for (int _911 = _7679;_911<_7680;++_911){ (((*natvarmap_idx)((_911 + _907))) = (long long)_911); }}else {}(_898 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(_pubthis,_894,_896,_899,_904,numVariables())); if (mosek::fusion::p_LinearDomain::_get_impl(_896)->cardinal_flag){ }else {}(_897 = _898); if (mosek::fusion::p_LinearDomain::_get_impl(_896)->cardinal_flag){ _898->makeInteger(); }else {}if ((! mosek::fusion::p_LinearDomain::_get_impl(_896)->sparse_flag)){ int _7681 = (int)0; int _7682 = _906; for (int _912 = _7681;_912<_7682;++_912){ (((*natvarmap_Var)((_912 + _907))) = vars_used); }}else {}}}addVariable(_894,_897); return _897; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _913,monty::rc_ptr< ::mosek::fusion::Set > _914,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _915){ monty::rc_ptr< ::mosek::fusion::Set > _916 = nullptr; if (! _914){ if (! mosek::fusion::p_LinPSDDomain::_get_impl(_915)->shape){ throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));}else { (_916 = mosek::fusion::p_LinPSDDomain::_get_impl(_915)->shape); }}else if (! mosek::fusion::p_LinPSDDomain::_get_impl(_915)->shape){ (_916 = _914); }else { if (((mosek::fusion::p_Set::_get_impl(_914)->nd != mosek::fusion::p_Set::_get_impl(mosek::fusion::p_LinPSDDomain::_get_impl(_915)->shape)->nd) || ((_914->dim((int)0) != mosek::fusion::p_LinPSDDomain::_get_impl(_915)->shape->dim((int)0)) || (_914->dim((int)1) != mosek::fusion::p_LinPSDDomain::_get_impl(_915)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Ambiguous dimensions for variable"));}else { (_916 = _914); }}int _917 = _916->dim((int)0); int _918 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _917)))) - (int)1) / (int)2); if ((((_918 * (_918 + (int)1)) / (int)2) != _917)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));}else {}int _919 = (int)1; int _7683 = (int)1; int _7684 = mosek::fusion::p_Set::_get_impl(_916)->nd; for (int _920 = _7683;_920<_7684;++_920){ (_919 *= _916->dim(_920)); }int _921 = task_append_barvar(_918,_919); monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _922 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(_pubthis,_913,_918,_916,_921,numVariables()); natbarvarmap_ensure((int)1); (((*natbarvarmap_Var)(natbarvarmap_num)) = vars_used); ( ++ natbarvarmap_num ); addVariable(_913,::mosek::fusion::ModelVariable::t(_922)); return _922; }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable_( const std::string & _923,monty::rc_ptr< ::mosek::fusion::Set > _924,monty::rc_ptr< ::mosek::fusion::PSDDomain > _925){ int _926; int _927; if (_924){ if (((mosek::fusion::p_Set::_get_impl(_924)->nd != (int)2) && (mosek::fusion::p_Set::_get_impl(_924)->nd != (int)3))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else if (((mosek::fusion::p_Set::_get_impl(_924)->nd == (int)2) && (_924->dim((int)0) != _924->dim((int)1)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else if (((mosek::fusion::p_Set::_get_impl(_924)->nd == (int)3) && (_924->dim((int)1) != _924->dim((int)2)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else {}(_926 = _924->dim((int)1)); (_927 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(_924)->nd == (int)2)) return ((int)1); else return (_924->dim((int)0)); })()); if (mosek::fusion::p_PSDDomain::_get_impl(_925)->shape){ if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_925)->shape)->nd != mosek::fusion::p_Set::_get_impl(_924)->nd) || (((mosek::fusion::p_Set::_get_impl(_924)->nd == (int)2) && ((mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)0) != _926) || (mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)1) != _926))) || ((mosek::fusion::p_Set::_get_impl(_924)->nd == (int)3) && ((mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)0) != _927) || ((mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)1) != _926) || (mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)2) != _926))))))){ throw ::mosek::fusion::DomainError(std::string ("Domain and shape do not match"));}else {}}else {}}else { if (! mosek::fusion::p_PSDDomain::_get_impl(_925)->shape){ throw ::mosek::fusion::DomainError(std::string ("Either domain size of shape must be defined"));}else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_925)->shape)->nd != (int)2) && (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_925)->shape)->nd != (int)3))){ throw ::mosek::fusion::DomainError(std::string ("Invalid domain shape"));}else { (_926 = mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)1)); (_927 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_925)->shape)->nd == (int)2)) return ((int)1); else return (mosek::fusion::p_PSDDomain::_get_impl(_925)->shape->dim((int)0)); })()); }}int _928 = task_append_barvar(_926,_927); monty::rc_ptr< ::mosek::fusion::PSDVariable > _929 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(_pubthis,_923,_926,_928,_927,numVariables()); natbarvarmap_ensure((int)1); (((*natbarvarmap_Var)(natbarvarmap_num)) = vars_used); ( ++ natbarvarmap_num ); addVariable(_923,::mosek::fusion::ModelVariable::t(_929)); return _929; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _930,monty::rc_ptr< ::mosek::fusion::Set > _931,monty::rc_ptr< ::mosek::fusion::Expression > _932,monty::rc_ptr< ::mosek::fusion::RangeDomain > _933){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _934 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _935; if ((((int)((_930).size()) > (int)0) && hasConstraint(_930))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_930).get())->a(std::string ("'")).get())->toString());}else {}(_935 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _931) return (_931); else return (_932->getShape()); })()); if ((! mosek::fusion::p_RangeDomain::_get_impl(_933.get())->match_shape(_935))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _936 = _932->eval(); { int _7685 = (int)0; int _7686 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_936)->x)->size(0)); for (int _937 = _7685;_937<_7686;++_937){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_936)->x)(_937))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_936)->x)(_937))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _938 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_936)->ptrb,mosek::fusion::p_Set::_get_impl(_935)->size,mosek::fusion::p_FlatExpr::_get_impl(_936)->inst,mosek::fusion::p_FlatExpr::_get_impl(_936)->subj,mosek::fusion::p_FlatExpr::_get_impl(_936)->cof,mosek::fusion::p_FlatExpr::_get_impl(_936)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_936)->x); int _939 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_938)->ptrb)->size(0)) - (int)1); int _940 = task_vars_used; int _941 = task_numcone(); int _942 = task_numcon(); int _943 = task_numbarvar(); {monty::finally _7687([&]{ if (! _934){ (natvarmap_num = _940); (natbarvarmap_num = _943); task_cleanup(_940,_942,_941,_943); }else {}});{ int _944 = _939; int _945 = task_append_con(_944); int _946 = (_945 + _944); if (((int)((_930).size()) > (int)0)){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _947 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); { int _948 = (int)0; for (;(_948 < _944);( ++ _948 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_947.get())->clear().get())->a(_930).get())->a(std::string ("[")).get())->a(_948).get())->a(std::string ("]")); task_con_name((_948 + _945),mosek::fusion::Utils::p_StringBuffer::_get_impl(_947.get())->toString()); }}}else {}if ((mosek::fusion::p_ConNZStruct::_get_impl(_938)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_938)->subj)->size(0)) > (int)0))){ task_putarowslice(_945,_946,mosek::fusion::p_ConNZStruct::_get_impl(_938)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_938)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_938)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_938)->barsubi){ int _7688 = (int)0; int _7689 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_938)->barsubi)->size(0)); for (int _949 = _7688;_949<_7689;++_949){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_938)->barsubi)(_949)) + _945),((*mosek::fusion::p_ConNZStruct::_get_impl(_938)->barsubj)(_949)),((*mosek::fusion::p_ConNZStruct::_get_impl(_938)->barmidx)(_949))); }}else {}std::shared_ptr< monty::ndarray< double,1 > > _950 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_939))); std::shared_ptr< monty::ndarray< double,1 > > _951 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_939))); if (mosek::fusion::p_ConNZStruct::_get_impl(_938)->bfix){ int _7690 = (int)0; int _7691 = _939; for (int _952 = _7690;_952<_7691;++_952){ (((*_950)(_952)) = (mosek::fusion::p_RangeDomain::_get_impl(_933.get())->get_lb_item((long long)_952) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_938)->bfix)(_952)))); (((*_951)(_952)) = (mosek::fusion::p_RangeDomain::_get_impl(_933.get())->get_ub_item((long long)_952) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_938)->bfix)(_952)))); }}else { int _953 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_938)->ptrb)->size(0)) - (int)1); int _7692 = (int)0; int _7693 = _939; for (int _954 = _7692;_954<_7693;++_954){ (((*_950)(_954)) = mosek::fusion::p_RangeDomain::_get_impl(_933.get())->get_lb_item((long long)_954)); (((*_951)(_954)) = mosek::fusion::p_RangeDomain::_get_impl(_933.get())->get_ub_item((long long)_954)); }}std::shared_ptr< monty::ndarray< int,1 > > _955 = ::mosek::fusion::Utils::Tools::range(_945,_946); task_con_putboundslice_ra(_945,_946,_950,_951); (_934 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(_pubthis,_930,_935,_933,_955,mosek::fusion::p_ConNZStruct::_get_impl(_938)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_938)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_938)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_938)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_938)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_938)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_938)->barmidx)); addConstraint(_930,_934); }}return _934; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _956,monty::rc_ptr< ::mosek::fusion::Set > _957,monty::rc_ptr< ::mosek::fusion::Expression > _958,monty::rc_ptr< ::mosek::fusion::QConeDomain > _959){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _960 = nullptr; int _961 = (int)mosek::fusion::p_Set::_get_impl(_958->getShape())->size; if ((((int)((_956).size()) > (int)0) && hasConstraint(_956))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_956).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _962 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _957) return (_957); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_QConeDomain::_get_impl(_959)->shape) return (mosek::fusion::p_QConeDomain::_get_impl(_959)->shape); else return (_958->getShape()); })()); })(); if (((mosek::fusion::p_QConeDomain::_get_impl(_959)->shape && (! mosek::fusion::p_QConeDomain::_get_impl(_959.get())->match_shape(_962))) || (_958->getShape() && (! _962->compare(_958->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _963 = ([&]() -> int { if ( mosek::fusion::p_QConeDomain::_get_impl(_959)->shape) return (_959->getAxis()); else return ((mosek::fusion::p_Set::_get_impl(_962)->nd - (int)1)); })(); int _964 = _962->dim(_963); int _965 = (int)1; int _7694 = (int)0; int _7695 = mosek::fusion::p_Set::_get_impl(_962)->nd; for (int _966 = _7694;_966<_7695;++_966){ if ((_963 != _966)){ (_965 *= _962->dim(_966)); }else {}}int _967 = (int)1; int _7696 = (int)0; int _7697 = _963; for (int _968 = _7696;_968<_7697;++_968){ (_967 *= _962->dim(_968)); }int _969 = (int)1; int _7698 = (_963 + (int)1); int _7699 = mosek::fusion::p_Set::_get_impl(_962)->nd; for (int _970 = _7698;_970<_7699;++_970){ (_969 *= _962->dim(_970)); }monty::rc_ptr< ::mosek::fusion::FlatExpr > _971 = _958->eval(); { int _7700 = (int)0; int _7701 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_971)->x)->size(0)); for (int _972 = _7700;_972<_7701;++_972){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_971)->x)(_972))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_971)->x)(_972))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _973 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_971)->ptrb,mosek::fusion::p_Set::_get_impl(_962)->size,mosek::fusion::p_FlatExpr::_get_impl(_971)->inst,mosek::fusion::p_FlatExpr::_get_impl(_971)->subj,mosek::fusion::p_FlatExpr::_get_impl(_971)->cof,mosek::fusion::p_FlatExpr::_get_impl(_971)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_971)->x); int _974 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_973)->ptrb)->size(0)) - (int)1); int _975 = task_vars_used; int _976 = task_numcon(); int _977 = task_numcone(); int _978 = task_numbarvar(); {monty::finally _7702([&]{ if (! _960){ (natvarmap_num = _975); (natbarvarmap_num = _978); task_cleanup(_975,_976,_977,_978); }else {}});{ int _979 = task_append_con(_974); int _980 = (_979 + _974); if ((mosek::fusion::p_ConNZStruct::_get_impl(_973)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_973)->subj)->size(0)) > (int)0))){ task_putarowslice(_979,_980,mosek::fusion::p_ConNZStruct::_get_impl(_973)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_973)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_973)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_973)->barsubi){ int _7703 = (int)0; int _7704 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_973)->barsubi)->size(0)); for (int _981 = _7703;_981<_7704;++_981){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_973)->barsubi)(_981)) + _979),((*mosek::fusion::p_ConNZStruct::_get_impl(_973)->barsubj)(_981)),((*mosek::fusion::p_ConNZStruct::_get_impl(_973)->barmidx)(_981))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _982 = ::mosek::fusion::Utils::Tools::range(_979,_980); std::shared_ptr< monty::ndarray< double,1 > > _983 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_980 - _979)))); int _984 = (_964 * _965); std::shared_ptr< monty::ndarray< double,1 > > _985 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_984))); { std::shared_ptr< monty::ndarray< double,1 > > _986 = mosek::fusion::p_ConNZStruct::_get_impl(_973)->bfix; std::shared_ptr< monty::ndarray< double,1 > > _987 = mosek::fusion::p_FlatExpr::_get_impl(_971)->bfix; { if (! mosek::fusion::p_ConNZStruct::_get_impl(_973)->bfix){ int _7705 = (int)0; int _7706 = (_980 - _979); for (int _988 = _7705;_988<_7706;++_988){ (((*_983)(_988)) = (- ((*mosek::fusion::p_ConNZStruct::_get_impl(_973)->bfix)(_988)))); }}else {}if (mosek::fusion::p_FlatExpr::_get_impl(_971)->bfix){ int _7707 = (int)0; int _7708 = _984; for (int _989 = _7707;_989<_7708;++_989){ (((*_985)(_989)) = (- ((*mosek::fusion::p_ConNZStruct::_get_impl(_973)->bfix)(_989)))); }}else {}}}task_con_putboundslice_fx(_979,_980,_985); int _990 = task_alloc_vars(_984); natvarmap_ensure(_984); (natvarmap_num = (natvarmap_num + _984)); int _991 = (_990 + _984); task_putaijlist(::mosek::fusion::Utils::Tools::range(_979,_980),::mosek::fusion::Utils::Tools::range(_990,_991),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7709; for (int _992=(int)0, _7710=_984; _992 < _7710;++_992)_7709.push_back((- 1.0)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7709.size()),_7709.begin(),_7709.end())); })(),(long long)(_984)); task_var_putboundslice_fr(_990,_991); int _993; if ((mosek::fusion::p_QConeDomain::_get_impl(_959)->key == ::mosek::fusion::QConeKey::InQCone)){ (_993 = task_append_quadcone(_964,_990,_965,_967,_969)); }else { (_993 = task_append_rquadcone(_964,_990,_965,_967,_969)); }(_960 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(_pubthis,_956,_959,_962,::mosek::fusion::Utils::Tools::range(_979,_980),_990,_991,_964,_993,_965,mosek::fusion::p_ConNZStruct::_get_impl(_973)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_973)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_973)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_973)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_973)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_973)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_973)->barmidx)); addConstraint(_956,_960); return _960; }}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _994,monty::rc_ptr< ::mosek::fusion::Set > _995,monty::rc_ptr< ::mosek::fusion::Expression > _996,monty::rc_ptr< ::mosek::fusion::LinearDomain > _997){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _998 = nullptr; int _999 = (int)mosek::fusion::p_Set::_get_impl(_996->getShape())->size; monty::rc_ptr< ::mosek::fusion::Set > _1000; if ((((int)((_994).size()) > (int)0) && hasConstraint(_994))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_994).get())->a(std::string ("'")).get())->toString());}else {}(_1000 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _995) return (_995); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_LinearDomain::_get_impl(_997)->shape) return (mosek::fusion::p_LinearDomain::_get_impl(_997)->shape); else return (_996->getShape()); })()); })()); if (((mosek::fusion::p_LinearDomain::_get_impl(_997)->shape && (! mosek::fusion::p_LinearDomain::_get_impl(_997.get())->match_shape(_1000))) || (_996->getShape() && (! _1000->compare(_996->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _1001 = _996->eval(); { int _7711 = (int)0; int _7712 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1001)->x)->size(0)); for (int _1002 = _7711;_1002<_7712;++_1002){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1001)->x)(_1002))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1001)->x)(_1002))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _1003 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_1001)->ptrb,mosek::fusion::p_Set::_get_impl(_1000)->size,mosek::fusion::p_FlatExpr::_get_impl(_1001)->inst,mosek::fusion::p_FlatExpr::_get_impl(_1001)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1001)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1001)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1001)->x); int _1004 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1003)->ptrb)->size(0)) - (int)1); int _1005 = task_vars_used; int _1006 = task_numcon(); int _1007 = task_numcone(); int _1008 = task_numbarvar(); {monty::finally _7713([&]{ if (! _998){ (natvarmap_num = _1005); (natbarvarmap_num = _1008); task_cleanup(_1005,_1006,_1007,_1008); }else {}});{ int _1009 = _1004; int _1010 = task_append_con(_1009); int _1011 = (_1010 + _1009); if ((mosek::fusion::p_ConNZStruct::_get_impl(_1003)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1003)->subj)->size(0)) > (int)0))){ task_putarowslice(_1010,_1011,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barsubi){ int _7714 = (int)0; int _7715 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barsubi)->size(0)); for (int _1012 = _7714;_1012<_7715;++_1012){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barsubi)(_1012)) + _1010),((*mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barsubj)(_1012)),((*mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barmidx)(_1012))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _1013 = ::mosek::fusion::Utils::Tools::range(_1010,_1011); std::shared_ptr< monty::ndarray< double,1 > > _1014 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_ConNZStruct::_get_impl(_1003)->bfix) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7716; for (int _1015=(int)0, _7717=(_1011 - _1010); _1015 < _7717;++_1015)_7716.push_back(mosek::fusion::p_LinearDomain::_get_impl(_997.get())->get_rhs_item((long long)(_1015))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7716.size()),_7716.begin(),_7716.end())); })()); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7718; for (int _1016=(int)0, _7719=(_1011 - _1010); _1016 < _7719;++_1016)_7718.push_back((mosek::fusion::p_LinearDomain::_get_impl(_997.get())->get_rhs_item((long long)(_1016)) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_1003)->bfix)(_1016)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7718.size()),_7718.begin(),_7718.end())); })()); })(); mosek::fusion::RelationKey _1017 = mosek::fusion::p_LinearDomain::_get_impl(_997)->key; if ((_1017 == ::mosek::fusion::RelationKey::IsFree)){ task_con_putboundslice_fr(_1010,_1011); }else if ((_1017 == ::mosek::fusion::RelationKey::LessThan)){ task_con_putboundslice_up(_1010,_1011,_1014); }else if ((_1017 == ::mosek::fusion::RelationKey::GreaterThan)){ task_con_putboundslice_lo(_1010,_1011,_1014); }else { task_con_putboundslice_fx(_1010,_1011,_1014); }(_998 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(_pubthis,_994,_997,_1000,_1013,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_1003)->barmidx)); addConstraint(_994,_998); return _998; }}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > mosek::fusion::p_Model::build_conA( std::shared_ptr< monty::ndarray< long long,1 > > _1018,long long _1019,std::shared_ptr< monty::ndarray< long long,1 > > _1020,std::shared_ptr< monty::ndarray< long long,1 > > _1021,std::shared_ptr< monty::ndarray< double,1 > > _1022,std::shared_ptr< monty::ndarray< double,1 > > _1023,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1024){ std::shared_ptr< monty::ndarray< int,1 > > _1025 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _1026 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1019 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _1027 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _1028 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _1020) return (_1020); else return (([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7720; for (long long _1029=(long long)0, _7721=((int)((_1018)->size(0)) - (int)1); _1029 < _7721;++_1029)_7720.push_back(_1029); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7720.size()),_7720.begin(),_7720.end())); })()); })(); std::shared_ptr< monty::ndarray< double,1 > > _1030 = _1023; int _1031 = (int)0; int _1032 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _1033; std::shared_ptr< monty::ndarray< int,1 > > _1034; std::shared_ptr< monty::ndarray< int,1 > > _1035; std::shared_ptr< monty::ndarray< long long,1 > > _1036; { int _1037 = (int)((_1021)->size(0)); (_1033 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1037)))); (_1034 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1037)))); (_1035 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1037)))); std::shared_ptr< monty::ndarray< int,1 > > _1038 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1037))); ::mosek::fusion::p_Model::inst(_1024,_1021,_1033,_1034,_1035); (_1036 = ::mosek::fusion::Utils::Tools::range((long long)((_1021)->size(0)))); if ((_1037 > ((int)3 * (int)((_1018)->size(0))))){ int _7722 = (int)0; int _7723 = ((int)((_1018)->size(0)) - (int)1); for (int _1039 = _7722;_1039<_7723;++_1039){ ::mosek::fusion::p_Sort::argsort(_1036,_1033,((*_1018)(_1039)),((*_1018)((_1039 + (int)1))),true); long long _7724 = ((*_1018)(_1039)); long long _7725 = ((*_1018)((_1039 + (int)1))); for (long long _1040 = _7724;_1040<_7725;++_1040){ (((*_1038)(_1040)) = _1039); }}}else { int _7726 = (int)0; int _7727 = ((int)((_1018)->size(0)) - (int)1); for (int _1041 = _7726;_1041<_7727;++_1041){ long long _7728 = ((*_1018)(_1041)); long long _7729 = ((*_1018)((_1041 + (int)1))); for (long long _1042 = _7728;_1042<_7729;++_1042){ (((*_1038)(_1042)) = _1041); }}::mosek::fusion::p_Sort::argsort(_1036,_1038,_1033,(long long)((int)0),(long long)((int)((_1036)->size(0))),true); }(_1032 = (int)0); (_1031 = (int)0); if (((int)((_1036)->size(0)) > (int)0)){ if ((((*_1033)(((*_1036)((int)0)))) >= (int)0)){ ( ++ _1032 ); }else { ( ++ _1031 ); }int _7730 = (int)1; int _7731 = _1037; for (int _1043 = _7730;_1043<_7731;++_1043){ if ((((*_1033)(((*_1036)(_1043)))) < (int)0)){ ( ++ _1031 ); }else if (((((*_1038)(((*_1036)(_1043)))) != ((*_1038)(((*_1036)((_1043 - (int)1)))))) || (((*_1033)(((*_1036)(_1043)))) != ((*_1033)(((*_1036)((_1043 - (int)1)))))))){ ( ++ _1032 ); }else {}}}else {}if ((_1032 == _1037)){ (_1025 = _1033); (_1027 = _1022); if (((int)((_1028)->size(0)) == _1019)){ (_1026 = _1018); }else { int _1044 = (int)0; int _7732 = (int)0; int _7733 = ((int)((_1026)->size(0)) - (int)1); for (int _1045 = _7732;_1045<_7733;++_1045){ if (((_1044 < (int)((_1028)->size(0))) && (_1045 == ((*_1028)(_1044))))){ ( ++ _1044 ); (((*_1026)((_1045 + (int)1))) = ((*_1018)(_1044))); }else { (((*_1026)((_1045 + (int)1))) = ((*_1026)(_1045))); }}}}else { int _1046 = (int)0; long long _1047 = (long long)0; (_1025 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1032)))); (_1027 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1032)))); int _1048 = (int)0; int _7734 = (int)0; int _7735 = ((int)((_1026)->size(0)) - (int)1); for (int _1049 = _7734;_1049<_7735;++_1049){ if (((_1048 >= (int)((_1028)->size(0))) || (_1049 != ((*_1028)(_1048))))){ (((*_1026)((_1049 + (int)1))) = ((*_1026)(_1049))); }else { long long _1050 = ((*_1018)(_1048)); while (((_1050 < ((*_1018)((_1048 + (int)1)))) && (((*_1033)(((*_1036)(_1050)))) < (int)0))) { ( ++ _1050 ); }long long _1051 = _1050; while ((_1051 < ((*_1018)((_1048 + (int)1))))) { ( ++ _1051 ); }if ((_1051 > _1050)){ int _1052 = (int)0; (((*_1025)(((*_1026)(_1049)))) = ((*_1033)(((*_1036)(_1050))))); (((*_1027)(((*_1026)(_1049)))) = ((*_1022)(((*_1036)(_1050))))); long long _7736 = (_1050 + (int)1); long long _7737 = _1051; for (long long _1053 = _7736;_1053<_7737;++_1053){ if ((((*_1033)(((*_1036)((_1053 - (int)1))))) != ((*_1033)(((*_1036)(_1053)))))){ ( ++ _1052 ); (((*_1025)((_1052 + ((*_1026)(_1049))))) = ((*_1033)(((*_1036)(_1053))))); (((*_1027)((_1052 + ((*_1026)(_1049))))) = ((*_1022)(((*_1036)(_1053))))); }else { (((*_1027)((_1052 + ((*_1026)(_1049))))) += ((*_1022)(((*_1036)(_1053))))); }}(((*_1026)((_1049 + (int)1))) = ((((*_1026)(_1049)) + _1052) + (int)1)); }else { (((*_1026)((_1049 + (int)1))) = ((*_1026)(_1049))); }( ++ _1048 ); }}}}std::shared_ptr< monty::ndarray< long long,1 > > _1054 = _1026; std::shared_ptr< monty::ndarray< int,1 > > _1055 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _1056 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _1057 = nullptr; int _1058 = (int)0; if ((_1031 > (int)0)){ int _7738 = (int)0; int _7739 = ((int)((_1018)->size(0)) - (int)1); for (int _1059 = _7738;_1059<_7739;++_1059){ long long _1060 = ((*_1018)(_1059)); while (((_1060 < ((*_1018)((_1059 + (int)1)))) && (((*_1033)(((*_1036)(_1060)))) < (int)0))) { ( ++ _1060 ); }if ((_1060 > ((*_1018)(_1059)))){ ( ++ _1058 ); long long _7740 = (((*_1018)(_1059)) + (int)1); long long _7741 = _1060; for (long long _1061 = _7740;_1061<_7741;++_1061){ if ((((*_1033)(((*_1036)((_1061 - (int)1))))) != ((*_1033)(((*_1036)(_1061)))))){ ( ++ _1058 ); }else {}}}else {}}if ((_1058 > (int)0)){ int _1062 = (int)0; (_1055 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1058)))); (_1056 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1058)))); (_1057 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1058)))); int _7742 = (int)0; int _7743 = ((int)((_1018)->size(0)) - (int)1); for (int _1063 = _7742;_1063<_7743;++_1063){ long long _1064 = ((*_1018)(_1063)); while (((_1064 < ((*_1018)((_1063 + (int)1)))) && (((*_1033)(((*_1036)(_1064)))) < (int)0))) { long long _1065 = _1064; int _1066 = ((*_1033)(((*_1036)(_1064)))); ( ++ _1064 ); while (((_1064 < ((*_1018)((_1063 + (int)1)))) && (((*_1033)(((*_1036)(_1064)))) == _1066))) { ( ++ _1064 ); }int _1067 = (- (_1066 + (int)1)); int _1068 = task_barvardim(_1067); long long _7744 = _1065; long long _7745 = _1064; for (long long _1069 = _7744;_1069<_7745;++_1069){ long long _1070 = ((*_1036)(_1069)); if ((((*_1034)(_1070)) < ((*_1035)(_1070)))){ int _1071 = ((*_1034)(_1070)); (((*_1034)(_1070)) = ((*_1035)(_1070))); (((*_1035)(_1070)) = _1071); (((*_1022)(_1070)) *= 0.5); }else if ((((*_1034)(_1070)) > ((*_1035)(_1070)))){ (((*_1022)(_1070)) *= 0.5); }else {}}if (((_1064 - _1065) > (int)1)){ if (((_1064 - _1065) < ((int)2 * _1068))){ ::mosek::fusion::p_Sort::argsort(_1036,_1034,_1035,_1065,_1064,true); }else { ::mosek::fusion::p_Sort::argbucketsort(_1036,_1035,_1065,_1064,(int)0,_1068); ::mosek::fusion::p_Sort::argbucketsort(_1036,_1034,_1065,_1064,(int)0,_1068); }}else {}int _1072 = (int)1; long long _7746 = (_1065 + (int)1); long long _7747 = _1064; for (long long _1073 = _7746;_1073<_7747;++_1073){ if (((((*_1035)(((*_1036)(_1073)))) != ((*_1035)(((*_1036)((_1073 - (int)1)))))) || (((*_1034)(((*_1036)(_1073)))) != ((*_1034)(((*_1036)((_1073 - (int)1)))))))){ ( ++ _1072 ); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _1074 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1072))); std::shared_ptr< monty::ndarray< int,1 > > _1075 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1072))); std::shared_ptr< monty::ndarray< double,1 > > _1076 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1072))); { int _1077 = (int)0; (((*_1074)((int)0)) = ((*_1034)(((*_1036)(_1065))))); (((*_1075)((int)0)) = ((*_1035)(((*_1036)(_1065))))); (((*_1076)((int)0)) = ((*_1022)(((*_1036)(_1065))))); long long _7748 = (_1065 + (int)1); long long _7749 = _1064; for (long long _1078 = _7748;_1078<_7749;++_1078){ if (((((*_1035)(((*_1036)(_1078)))) != ((*_1035)(((*_1036)((_1078 - (int)1)))))) || (((*_1034)(((*_1036)(_1078)))) != ((*_1034)(((*_1036)((_1078 - (int)1)))))))){ ( ++ _1077 ); (((*_1074)(_1077)) = ((*_1034)(((*_1036)(_1078))))); (((*_1075)(_1077)) = ((*_1035)(((*_1036)(_1078))))); (((*_1076)(_1077)) = ((*_1022)(((*_1036)(_1078))))); }else { (((*_1076)(_1077)) += ((*_1022)(((*_1036)(_1078))))); }}}(((*_1055)(_1062)) = (int)((*_1028)(_1063))); (((*_1056)(_1062)) = _1067); (((*_1057)(_1062)) = task_append_barmatrix(_1068,_1074,_1075,_1076)); ( ++ _1062 ); }}}else {}}else {}std::shared_ptr< monty::ndarray< double,1 > > _1079 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1019))); if (_1023){ int _7750 = (int)0; int _7751 = (int)((_1028)->size(0)); for (int _1080 = _7750;_1080<_7751;++_1080){ (((*_1079)(((*_1028)(_1080)))) = ((*_1023)(_1080))); }}else {}return ::mosek::fusion::p_ConNZStruct::_new_ConNZStruct(_1026,_1025,_1027,_1079,_1055,_1056,_1057); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _1081,monty::rc_ptr< ::mosek::fusion::Expression > _1082,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1083){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1084 = nullptr; int _1085 = (int)mosek::fusion::p_Set::_get_impl(_1082->getShape())->size; if ((((int)((_1081).size()) > (int)0) && hasConstraint(_1081))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_1081).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _1086 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_LinPSDDomain::_get_impl(_1083)->shape) return (mosek::fusion::p_LinPSDDomain::_get_impl(_1083)->shape); else return (_1082->getShape()); })(); if (((mosek::fusion::p_LinPSDDomain::_get_impl(_1083)->shape && (! mosek::fusion::p_LinPSDDomain::_get_impl(_1083)->shape->compare(_1086))) || (_1082->getShape() && (! _1086->compare(_1082->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _1087 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _1086->dim((int)0))))) - (int)1) / (int)2); if ((((_1087 * (_1087 + (int)1)) / (int)2) != _1086->dim((int)0))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));}else {}int _1088 = (int)0; int _1089 = _1086->dim((int)0); int _1090 = (int)1; int _7752 = (int)1; int _7753 = mosek::fusion::p_Set::_get_impl(_1086)->nd; for (int _1091 = _7752;_1091<_7753;++_1091){ (_1090 *= _1086->dim(_1091)); }monty::rc_ptr< ::mosek::fusion::FlatExpr > _1092 = _1082->eval(); { int _7754 = (int)0; int _7755 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1092)->x)->size(0)); for (int _1093 = _7754;_1093<_7755;++_1093){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1092)->x)(_1093))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1092)->x)(_1093))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _1094 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_1092)->ptrb,mosek::fusion::p_Set::_get_impl(_1086)->size,mosek::fusion::p_FlatExpr::_get_impl(_1092)->inst,mosek::fusion::p_FlatExpr::_get_impl(_1092)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1092)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1092)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1092)->x); int _1095 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1094)->ptrb)->size(0)) - (int)1); int _1096 = task_vars_used; int _1097 = task_numcon(); int _1098 = task_numcone(); int _1099 = task_numbarvar(); {monty::finally _7756([&]{ if (! _1084){ (natvarmap_num = _1096); (natbarvarmap_num = _1099); task_cleanup(_1096,_1097,_1098,_1099); }else {}});{ int _1100 = task_append_con(_1095); int _1101 = (_1100 + _1095); if ((mosek::fusion::p_ConNZStruct::_get_impl(_1094)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1094)->subj)->size(0)) > (int)0))){ task_putarowslice(_1100,_1101,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barsubi){ int _7757 = (int)0; int _7758 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barsubi)->size(0)); for (int _1102 = _7757;_1102<_7758;++_1102){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barsubi)(_1102)) + _1100),((*mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barsubj)(_1102)),((*mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barmidx)(_1102))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _1103 = ::mosek::fusion::Utils::Tools::range(_1100,_1101); std::shared_ptr< monty::ndarray< double,1 > > _1104 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_ConNZStruct::_get_impl(_1094)->bfix) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_1101 - _1100))))); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7759; for (int _1105=(int)0, _7760=(_1101 - _1100); _1105 < _7760;++_1105)_7759.push_back((- ((*mosek::fusion::p_ConNZStruct::_get_impl(_1094)->bfix)(_1105)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7759.size()),_7759.begin(),_7759.end())); })()); })(); int _1106 = (_1089 * _1090); std::shared_ptr< monty::ndarray< double,1 > > _1107 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_FlatExpr::_get_impl(_1092)->bfix) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7761; for (int _1108=(int)0, _7762=_1106; _1108 < _7762;++_1108)_7761.push_back((- ((*mosek::fusion::p_ConNZStruct::_get_impl(_1094)->bfix)(_1108)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7761.size()),_7761.begin(),_7761.end())); })()); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1106)))); })(); task_con_putboundslice_fx(_1100,_1101,_1107); int _1109 = task_append_barvar(_1087,_1090); { std::shared_ptr< monty::ndarray< int,1 > > _1110 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1111 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1112 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _1113 = (int)0; int _7763 = (int)0; int _7764 = _1087; for (int _1114 = _7763;_1114<_7764;++_1114){ (((*_1111)((int)0)) = _1114); int _7765 = _1114; int _7766 = _1087; for (int _1115 = _7765;_1115<_7766;++_1115){ (((*_1110)((int)0)) = _1115); (((*_1112)((int)0)) = (- ([&]() -> double { if ( (_1115 == _1114)) return (1.0); else return (0.5); })())); int _1116 = task_append_barmatrix(_1087,_1110,_1111,_1112); int _7767 = (int)0; int _7768 = _1090; for (int _1117 = _7767;_1117<_7768;++_1117){ task_putbaraij(((_1100 + _1113) + (_1117 * _1089)),(_1109 + _1117),_1116); }( ++ _1113 ); }}}(_1084 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(_pubthis,_1081,_1086,::mosek::fusion::Utils::Tools::range(_1100,_1101),_1089,_1109,_1090,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_1094)->barmidx)); addConstraint(_1081,_1084); }}return _1084; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _1118,monty::rc_ptr< ::mosek::fusion::Expression > _1119,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1120){ monty::rc_ptr< ::mosek::fusion::Constraint > _1121; if ((mosek::fusion::p_PSDDomain::_get_impl(_1120)->key == ::mosek::fusion::PSDKey::IsSymPSD)){ return nonsym_psdconstraint(_1118,_1119,_1120); }else if ((mosek::fusion::p_PSDDomain::_get_impl(_1120)->key == ::mosek::fusion::PSDKey::IsTrilPSD)){ monty::rc_ptr< ::mosek::fusion::FlatExpr > _1122 = _1119->eval(); { int _7769 = (int)0; int _7770 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1122)->x)->size(0)); for (int _1123 = _7769;_1123<_7770;++_1123){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1122)->x)(_1123))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1122)->x)(_1123))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}if ((! (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)0) == mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)1))) || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape)->nd == (int)3) && (mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)1) == mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)2)))))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else {}int _1124 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape)->nd == (int)2)) return ((int)1); else return (mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)0)); })(); int _1125 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape)->nd == (int)2)) return (mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)0)); else return (mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape->dim((int)1)); })(); int _1126 = (((_1124 * _1125) * (_1125 + (int)1)) / (int)2); if ((mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape && ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape)->nd != mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1122)->shape)->nd) || (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape)->nd == (int)2) && ((mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape->dim((int)0) != _1125) || (mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape->dim((int)1) != _1125))) || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape)->nd == (int)3) && ((mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape->dim((int)0) != _1124) || ((mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape->dim((int)1) != _1125) || (mosek::fusion::p_PSDDomain::_get_impl(_1120)->shape->dim((int)2) != _1125)))))))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _1127 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1126))); { int _1128 = (int)0; int _7771 = (int)0; int _7772 = _1124; for (int _1129 = _7771;_1129<_7772;++_1129){ int _7773 = (int)0; int _7774 = _1125; for (int _1130 = _7773;_1130<_7774;++_1130){ int _7775 = (int)0; int _7776 = (_1130 + (int)1); for (int _1131 = _7775;_1131<_7776;++_1131){ (((*_1127)(_1128)) = (long long)((((_1129 * _1125) * _1125) + (_1130 * _1125)) + _1131)); ( ++ _1128 ); }}}}std::shared_ptr< monty::ndarray< double,1 > > _1132 = mosek::fusion::p_FlatExpr::_get_impl(_1122)->bfix; if (! _1132){ (_1132 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_1122)->ptrb)->size(0)) - (int)1))))); }else {}return sdptrilcon(_1118,_1125,_1124,mosek::fusion::p_FlatExpr::_get_impl(_1122)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_1122)->inst,_1127,mosek::fusion::p_FlatExpr::_get_impl(_1122)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1122)->cof,_1132,mosek::fusion::p_FlatExpr::_get_impl(_1122)->x); }else { throw ::mosek::fusion::UnexpectedError(std::string ("Invalid domain"));}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::nonsym_psdconstraint( const std::string & _1133,monty::rc_ptr< ::mosek::fusion::Expression > _1134,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1135){ monty::rc_ptr< ::mosek::fusion::FlatExpr > _1136 = _1134->eval(); if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape->dim((int)0) != mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape->dim((int)1)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape)->nd == (int)3) && (mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape->dim((int)1) != mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape->dim((int)2)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else {}int _1137 = mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape->dim((int)1); int _1138 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape)->nd == (int)2)) return ((int)1); else return (mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape->dim((int)0)); })(); int _1139 = (((_1138 * _1137) * (_1137 + (int)1)) / (int)2); if (mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape)->nd != mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1136)->shape)->nd)){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape)->nd == (int)2) && ((mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape->dim((int)0) != _1137) || (mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape->dim((int)1) != _1137)))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape)->nd == (int)3) && ((mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape->dim((int)1) != _1137) || ((mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape->dim((int)2) != _1137) || (mosek::fusion::p_PSDDomain::_get_impl(_1135)->shape->dim((int)0) != _1138))))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else {}}else {}if ((! mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst || ((int)((mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)->size(0)) == _1139))){ long long _1140 = _1139; std::shared_ptr< monty::ndarray< long long,1 > > _1141 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1140))); std::shared_ptr< monty::ndarray< long long,1 > > _1142 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1140 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _1143 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1144 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1145 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7777; for (long long _1146=(int)0, _7778=_1140; _1146 < _7778;++_1146)_7777.push_back(_1146); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7777.size()),_7777.begin(),_7777.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1147 = nullptr; { int _1148 = (int)0; int _7779 = (int)0; int _7780 = _1138; for (int _1149 = _7779;_1149<_7780;++_1149){ int _7781 = (int)0; int _7782 = _1137; for (int _1150 = _7781;_1150<_7782;++_1150){ int _7783 = (int)0; int _7784 = (_1150 + (int)1); for (int _1151 = _7783;_1151<_7784;++_1151){ long long _1152 = (long long)((((_1149 * _1137) * _1137) + (_1150 * _1137)) + _1151); long long _1153 = (long long)((((_1149 * _1137) * _1137) + (_1151 * _1137)) + _1150); if ((_1150 == _1151)){ (((*_1142)((_1148 + (int)1))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1152 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1152)))); }else { (((*_1142)((_1148 + (int)1))) = (((((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1152 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1152))) + ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1153 + (int)1)))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1153)))); }(((*_1141)(_1148)) = _1152); ( ++ _1148 ); }}}int _7785 = (int)0; int _7786 = _1139; for (int _1154 = _7785;_1154<_7786;++_1154){ (((*_1142)((_1154 + (int)1))) = (((*_1142)((_1154 + (int)1))) + ((*_1142)(_1154)))); }}if (mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix){ (_1147 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1141)->size(0)))))); int _1155 = (int)0; int _7787 = (int)0; int _7788 = _1138; for (int _1156 = _7787;_1156<_7788;++_1156){ int _7789 = (int)0; int _7790 = _1137; for (int _1157 = _7789;_1157<_7790;++_1157){ int _7791 = (int)0; int _7792 = (_1157 + (int)1); for (int _1158 = _7791;_1158<_7792;++_1158){ long long _1159 = (long long)((((_1156 * _1137) * _1137) + (_1157 * _1137)) + _1158); long long _1160 = (long long)((((_1156 * _1137) * _1137) + (_1158 * _1137)) + _1157); if ((_1157 == _1158)){ (((*_1147)(_1155)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix)(_1159))); }else { (((*_1147)(_1155)) = (0.5 * (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix)(_1159)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix)(_1160))))); }( ++ _1155 ); }}}}else {}{ int _1161 = (int)0; int _7793 = (int)0; int _7794 = _1138; for (int _1162 = _7793;_1162<_7794;++_1162){ int _7795 = (int)0; int _7796 = _1137; for (int _1163 = _7795;_1163<_7796;++_1163){ int _7797 = (int)0; int _7798 = (_1163 + (int)1); for (int _1164 = _7797;_1164<_7798;++_1164){ int _1165 = ((((_1162 * _1137) * _1137) + (_1163 * _1137)) + _1164); int _1166 = ((((_1162 * _1137) * _1137) + (_1164 * _1137)) + _1163); if ((_1163 == _1164)){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165)),_1144,((*_1142)(_1161)),(((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1165 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165)),_1143,((*_1142)(_1161)),(((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1165 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165)))); }else { long long _1167 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1165 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165))); long long _1168 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1166 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1166))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165)),_1144,((*_1142)(_1161)),_1167); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1166)),_1144,(((*_1142)(_1161)) + _1167),_1168); long long _7799 = (long long)0; long long _7800 = _1167; for (long long _1169 = _7799;_1169<_7800;++_1169){ (((*_1143)((((*_1142)(_1161)) + _1169))) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1165)) + _1169))))); }long long _7801 = (long long)0; long long _7802 = _1168; for (long long _1170 = _7801;_1170<_7802;++_1170){ (((*_1143)(((((*_1142)(_1161)) + _1167) + _1170))) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1166)) + _1170))))); }}( ++ _1161 ); }}}}return sdptrilcon(_1133,_1137,_1138,_1142,_1141,_1145,_1144,_1143,_1147,mosek::fusion::p_FlatExpr::_get_impl(_1136)->x); }else { int _1171 = (_1137 * _1137); std::shared_ptr< monty::ndarray< long long,1 > > _1172 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst); int _7803 = (int)0; int _7804 = (int)((_1172)->size(0)); for (int _1173 = _7803;_1173<_7804;++_1173){ long long _1174 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)(_1173)) / _1171); long long _1175 = ((((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)(_1173)) / _1137) % _1137); long long _1176 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)(_1173)) % _1137); if ((_1176 > _1175)){ (((*_1172)(_1173)) = (((_1174 * _1171) + (_1176 * _1137)) + _1175)); }else { (((*_1172)(_1173)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)(_1173))); }if ((_1175 != _1176)){ long long _7805 = ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(_1173)); long long _7806 = ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((_1173 + (int)1))); for (long long _1177 = _7805;_1177<_7806;++_1177){ (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->cof)(_1177)) /= (int)2); }if (mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix){ (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix)(_1173)) /= (int)2); }else {}}else {}}std::shared_ptr< monty::ndarray< long long,1 > > _1178 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7807; for (int _1179=(int)0, _7808=(int)((_1172)->size(0)); _1179 < _7808;++_1179)_7807.push_back(_1179); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7807.size()),_7807.begin(),_7807.end())); })(); { std::shared_ptr< monty::ndarray< long long,1 > > _1180 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((_1138 * _1137) + (int)1)))); ::mosek::fusion::p_Sort::argTransposeSort(_1178,_1180,_1138,_1137,_1137,_1172); ::mosek::fusion::p_Sort::argTransposeSort(_1178,_1180,(_1138 * _1137),_1137,(int)1,_1172); }int _1181 = (int)0; if (((int)((_1178)->size(0)) > (int)0)){ ( ++ _1181 ); int _7809 = (int)1; int _7810 = (int)((_1178)->size(0)); for (int _1182 = _7809;_1182<_7810;++_1182){ if ((((*_1172)(((*_1178)(_1182)))) > ((*_1172)(((*_1178)((_1182 - (int)1))))))){ ( ++ _1181 ); }else {}}}else {}if (((int)((_1172)->size(0)) == _1181)){ return sdptrilcon(_1133,_1137,_1138,mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb,_1172,_1178,mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1136)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1136)->x); }else { std::shared_ptr< monty::ndarray< long long,1 > > _1183 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1181 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _1184 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1181))); std::shared_ptr< monty::ndarray< long long,1 > > _1185 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _1186 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _1187 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1181))); { int _1188 = (int)0; long long _1189 = (long long)0; int _7811 = (int)0; int _7812 = (int)((_1178)->size(0)); for (int _1190 = _7811;_1190<_7812;++_1190){ if (((_1190 > (int)0) && (((*_1172)(((*_1178)(_1190)))) != ((*_1172)(((*_1178)((_1190 - (int)1)))))))){ ( ++ _1188 ); }else {}long long _1191 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)((((*_1178)(_1190)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(((*_1178)(_1190))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(((*_1178)(_1190)))),_1185,_1189,_1191); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1136)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->ptrb)(((*_1178)(_1190)))),_1186,_1189,_1191); (_1189 += _1191); (((*_1183)((_1188 + (int)1))) = _1189); (((*_1184)(_1188)) = ((*_1172)(((*_1178)(_1190))))); }}if (mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix){ int _1192 = (int)0; int _7813 = (int)0; int _7814 = (int)((_1178)->size(0)); for (int _1193 = _7813;_1193<_7814;++_1193){ if (((_1193 > (int)0) && (((*_1172)(((*_1178)(_1193)))) != ((*_1172)(((*_1178)((_1193 - (int)1)))))))){ ( ++ _1192 ); }else {}long long _1194 = ((((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)(((*_1178)(_1193)))) / _1137) % _1137); long long _1195 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->inst)(((*_1178)(_1193)))) % _1137); (((*_1187)(_1192)) += ((*mosek::fusion::p_FlatExpr::_get_impl(_1136)->bfix)(((*_1178)(_1193))))); }}else {}return sdptrilcon(_1133,_1137,_1138,_1183,_1184,::mosek::fusion::Utils::Tools::range((long long)((_1184)->size(0))),_1185,_1186,_1187,mosek::fusion::p_FlatExpr::_get_impl(_1136)->x); }}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::sdptrilcon( const std::string & _1196,int _1197,int _1198,std::shared_ptr< monty::ndarray< long long,1 > > _1199,std::shared_ptr< monty::ndarray< long long,1 > > _1200,std::shared_ptr< monty::ndarray< long long,1 > > _1201,std::shared_ptr< monty::ndarray< long long,1 > > _1202,std::shared_ptr< monty::ndarray< double,1 > > _1203,std::shared_ptr< monty::ndarray< double,1 > > _1204,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1205){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1206 = nullptr; long long _1207 = (int)0; int _7815 = (int)0; int _7816 = (int)((_1201)->size(0)); for (int _1208 = _7815;_1208<_7816;++_1208){ (_1207 = (_1207 + (((*_1199)((((*_1201)(_1208)) + (int)1))) - ((*_1199)(((*_1201)(_1208))))))); }std::shared_ptr< monty::ndarray< int,1 > > _1209 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1207))); std::shared_ptr< monty::ndarray< int,1 > > _1210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1207))); std::shared_ptr< monty::ndarray< int,1 > > _1211 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1207))); std::shared_ptr< monty::ndarray< long long,1 > > _1212 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_1201)->size(0)) + (int)1)))); { int _1213 = (int)0; int _7817 = (int)0; int _7818 = (int)((_1201)->size(0)); for (int _1214 = _7817;_1214<_7818;++_1214){ ::mosek::fusion::p_Model::inst(_1205,(int)((*_1199)(((*_1201)(_1214)))),(int)((*_1199)((((*_1201)(_1214)) + (int)1))),_1202,_1213,_1209,_1210,_1211); (_1213 = (_1213 + (int)(((*_1199)((((*_1201)(_1214)) + (int)1))) - ((*_1199)(((*_1201)(_1214))))))); (((*_1212)((_1214 + (int)1))) = _1213); }}int _1215 = (_1198 * ((_1197 * (_1197 + (int)1)) / (int)2)); long long _1216 = (long long)0; long long _7819 = (long long)0; long long _7820 = _1207; for (long long _1217 = _7819;_1217<_7820;++_1217){ if ((((*_1209)(_1217)) < (int)0)){ ( ++ _1216 ); }else {}}long long _1218 = (_1207 - _1216); std::shared_ptr< monty::ndarray< long long,1 > > _1219 = ::mosek::fusion::Utils::Tools::range(_1207); int _7821 = (int)0; int _7822 = (int)((_1201)->size(0)); for (int _1220 = _7821;_1220<_7822;++_1220){ ::mosek::fusion::p_CommonTools::argQsort(_1219,_1209,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),((*_1212)(_1220)),((*_1212)((_1220 + (int)1)))); }long long _1221 = (long long)0; int _7823 = (int)0; int _7824 = (int)((_1201)->size(0)); for (int _1222 = _7823;_1222<_7824;++_1222){ long long _1223 = ((*_1212)(_1222)); long long _1224 = ((*_1212)((_1222 + (int)1))); while (((_1223 < _1224) && (((*_1209)(((*_1219)(_1223)))) < (int)0))) { ( ++ _1223 ); }if ((_1223 < _1224)){ ( ++ _1221 ); ( ++ _1223 ); }else {}while ((_1223 < _1224)) { if ((((*_1209)(((*_1219)((_1223 - (int)1))))) < ((*_1209)(((*_1219)(_1223)))))){ ( ++ _1221 ); }else {}( ++ _1223 ); }}std::shared_ptr< monty::ndarray< long long,1 > > _1225 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1201)->size(0))))); if (_1200){ int _7825 = (int)0; int _7826 = (int)((_1201)->size(0)); for (int _1226 = _7825;_1226<_7826;++_1226){ long long _1227 = (((*_1200)(((*_1201)(_1226)))) / (_1197 * _1197)); long long _1228 = ((((*_1200)(((*_1201)(_1226)))) % (_1197 * _1197)) / _1197); long long _1229 = (((*_1200)(((*_1201)(_1226)))) % _1197); (((*_1225)(_1226)) = (((_1227 * ((_1197 * (_1197 + (int)1)) / (int)2)) + ((_1228 * (_1228 + (int)1)) / (int)2)) + _1229)); }}else { int _7827 = (int)0; int _7828 = (int)((_1201)->size(0)); for (int _1230 = _7827;_1230<_7828;++_1230){ long long _1231 = (((*_1201)(_1230)) / (_1197 * _1197)); long long _1232 = ((((*_1201)(_1230)) % (_1197 * _1197)) / _1197); long long _1233 = (((*_1201)(_1230)) % _1197); (((*_1225)(_1230)) = (((_1231 * ((_1197 * (_1197 + (int)1)) / (int)2)) + ((_1232 * (_1232 + (int)1)) / (int)2)) + _1233)); }}int _1234 = task_vars_used; int _1235 = task_numcon(); int _1236 = task_numcone(); int _1237 = task_numbarvar(); {monty::finally _7829([&]{ if (! _1206){ (natbarvarmap_num = _1237); (natvarmap_num = _1234); task_cleanup(_1234,_1235,_1236,_1237); }else {}});{ int _1238 = task_append_con(_1215); int _1239 = (_1238 + _1215); std::shared_ptr< monty::ndarray< long long,1 > > _1240 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1215 + (int)1)))); std::shared_ptr< monty::ndarray< int,1 > > _1241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1221))); std::shared_ptr< monty::ndarray< double,1 > > _1242 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1221))); if ((_1218 > (int)0)){ long long _1243 = (long long)0; int _7830 = (int)0; int _7831 = _1215; for (int _1244 = _7830;_1244<_7831;++_1244){ long long _1245 = ((*_1240)(_1244)); if (((_1243 < (int)((_1201)->size(0))) && (_1244 == ((*_1225)(_1243))))){ long long _1246 = ((*_1212)((_1243 + (int)1))); long long _1247 = ((*_1212)(_1243)); while (((_1247 < _1246) && (((*_1209)(((*_1219)(_1247)))) < (int)0))) { ( ++ _1247 ); }if ((_1247 < _1246)){ (((*_1241)(_1245)) = ((*_1209)(((*_1219)(_1247))))); (((*_1242)(_1245)) = ((*_1203)(((*_1219)(_1247))))); ( ++ _1247 ); while ((_1247 < _1246)) { if ((((*_1209)(((*_1219)(_1247)))) == ((*_1241)(_1245)))){ (((*_1242)(_1245)) = (((*_1242)(_1245)) + ((*_1203)(((*_1219)(_1247)))))); }else { ( ++ _1245 ); (((*_1241)(_1245)) = ((*_1209)(((*_1219)(_1247))))); (((*_1242)(_1245)) = ((*_1203)(((*_1219)(_1247))))); }( ++ _1247 ); }( ++ _1245 ); }else {}( ++ _1243 ); }else {}(((*_1240)((_1244 + (int)1))) = _1245); }task_putarowslice(_1238,_1239,_1240,_1241,_1242); }else {}std::shared_ptr< monty::ndarray< double,1 > > _1248 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1215))); if (_1204){ int _7832 = (int)0; int _7833 = (int)((_1201)->size(0)); for (int _1249 = _7832;_1249<_7833;++_1249){ (((*_1248)(((*_1225)(_1249)))) = (- ((*_1204)(((*_1201)(_1249)))))); }}else {}task_con_putboundslice_fx(_1238,_1239,_1248); if ((_1216 > (int)0)){ int _7834 = (int)0; int _7835 = (int)((_1201)->size(0)); for (int _1250 = _7834;_1250<_7835;++_1250){ long long _1251 = ((*_1199)(((*_1201)(_1250)))); long long _1252 = ((*_1199)((((*_1201)(_1250)) + (int)1))); long long _1253 = _1251; while (((_1253 < _1252) && (((*_1209)(((*_1219)(_1253)))) < (int)0))) { ( ++ _1253 ); }if ((_1251 < _1253)){ int _1254 = ((*_1209)(((*_1219)(_1251)))); while ((_1251 < _1253)) { long long _1255 = _1251; while (((_1251 < _1253) && (((*_1209)(((*_1219)(_1251)))) == _1254))) { ( ++ _1251 ); }int _1256 = (- (_1254 + (int)1)); ::mosek::fusion::p_CommonTools::argQsort(_1219,_1210,_1211,_1255,_1251); int _1257 = (int)1; long long _7836 = (_1255 + (int)1); long long _7837 = _1251; for (long long _1258 = _7836;_1258<_7837;++_1258){ if (((((*_1210)(((*_1219)(_1258)))) != ((*_1210)(((*_1219)((_1258 - (int)1)))))) || (((*_1211)(((*_1219)(_1258)))) != ((*_1211)(((*_1219)((_1258 - (int)1)))))))){ ( ++ _1257 ); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _1259 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1257))); std::shared_ptr< monty::ndarray< int,1 > > _1260 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1257))); std::shared_ptr< monty::ndarray< double,1 > > _1261 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1257))); { int _1262 = (- (int)1); int _1263 = (- (int)1); int _1264 = (int)0; long long _7838 = _1255; long long _7839 = _1251; for (long long _1265 = _7838;_1265<_7839;++_1265){ if (((((*_1210)(((*_1219)(_1265)))) == _1263) && (((*_1211)(((*_1219)(_1265)))) == _1264))){ (((*_1261)(_1262)) = (((*_1261)(_1262)) + ((*_1203)(((*_1219)(_1265)))))); }else { ( ++ _1262 ); (((*_1259)(_1262)) = ((*_1210)(((*_1219)(_1265))))); (((*_1260)(_1262)) = ((*_1211)(((*_1219)(_1265))))); (((*_1261)(_1262)) = ((*_1203)(((*_1219)(_1265))))); (_1263 = ((*_1259)(_1262))); (_1264 = ((*_1260)(_1262))); }}}int _1266 = task_barvardim(_1256); int _1267 = task_append_barmatrix(_1266,_1259,_1260,_1261); task_putbaraij((int)(((*_1225)(_1250)) + _1238),_1256,_1267); }}else {}}}else {}int _1268 = task_append_barvar(_1197,_1198); { std::shared_ptr< monty::ndarray< int,1 > > _1269 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1270 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1271 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _7840 = (int)0; int _7841 = _1197; for (int _1272 = _7840;_1272<_7841;++_1272){ int _7842 = (int)0; int _7843 = (_1272 + (int)1); for (int _1273 = _7842;_1273<_7843;++_1273){ (((*_1269)((int)0)) = _1272); (((*_1270)((int)0)) = _1273); (((*_1271)((int)0)) = (- ([&]() -> double { if ( (_1272 == _1273)) return (1.0); else return (0.5); })())); int _1274 = task_append_barmatrix(_1197,_1269,_1270,_1271); int _7844 = (int)0; int _7845 = _1198; for (int _1275 = _7844;_1275<_7845;++_1275){ int _1276 = (((((_1275 * _1197) * (_1197 + (int)1)) / (int)2) + ((_1272 * (_1272 + (int)1)) / (int)2)) + _1273); task_putbaraij((_1238 + _1276),(_1268 + _1275),_1274); }}}}monty::rc_ptr< ::mosek::fusion::Set > _1277 = nullptr; if ((_1198 == (int)1)){ (_1277 = ::mosek::fusion::p_NDSet::_new_NDSet(_1197,_1197)); }else { (_1277 = ::mosek::fusion::p_NDSet::_new_NDSet(_1197,_1197,_1198)); }(_1206 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(_pubthis,_1196,_1277,::mosek::fusion::Utils::Tools::range(_1238,_1239),_1197,_1268,_1198,_1240,_1241,_1242,_1248,nullptr,nullptr,nullptr)); natbarvarmap_ensure(_1198); (natbarvarmap_num += _1198); addConstraint(_1196,_1206); return _1206; }}}void mosek::fusion::p_Model::addConstraint( const std::string & _1278,monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1279){ if ((cons_used >= (int)((cons)->size(0)))){ int _1280 = ([&]() -> int { if ( ((int)((cons)->size(0)) > (int)100)) return (((int)((cons)->size(0)) * (int)2)); else return ((int)100); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _1281 = cons; (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_1280)))); int _7846 = (int)0; int _7847 = cons_used; for (int _1282 = _7846;_1282<_7847;++_1282){ (((*cons)(_1282)) = ((*_1281)(_1282))); }}else {}(((*cons)(cons_used)) = _1279); if (((int)((_1278).size()) > (int)0)){ mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->setItem(_1278,cons_used); }else {}( ++ cons_used ); }void mosek::fusion::p_Model::addVariable( const std::string & _1283,monty::rc_ptr< ::mosek::fusion::ModelVariable > _1284){ if ((vars_used >= (int)((vars)->size(0)))){ int _1285 = ([&]() -> int { if ( ((int)((vars)->size(0)) > (int)100)) return (((int)((vars)->size(0)) * (int)2)); else return ((int)100); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _1286 = vars; (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_1285)))); int _7848 = (int)0; int _7849 = vars_used; for (int _1287 = _7848;_1287<_7849;++_1287){ (((*vars)(_1287)) = ((*_1286)(_1287))); }}else {}(((*vars)(vars_used)) = _1284); if (((int)((_1283).size()) > (int)0)){ mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->setItem(_1283,vars_used); }else {}( ++ vars_used ); }long long mosek::fusion::Model::numConstraints  ( ) { return mosek::fusion::p_Model::_get_impl(this)->numConstraints(); }long long mosek::fusion::p_Model::numConstraints( ){ return cons_used; }long long mosek::fusion::Model::numVariables  ( ) { return mosek::fusion::p_Model::_get_impl(this)->numVariables(); }long long mosek::fusion::p_Model::numVariables( ){ return vars_used; }bool mosek::fusion::Model::hasConstraint  ( const std::string & _1288) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1288); }bool mosek::fusion::p_Model::hasConstraint( const std::string & _1288){ return mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->hasItem(_1288); }bool mosek::fusion::Model::hasVariable  ( const std::string & _1289) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1289); }bool mosek::fusion::p_Model::hasVariable( const std::string & _1289){ return mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->hasItem(_1289); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint  ( int _1290) { return mosek::fusion::p_Model::_get_impl(this)->getConstraint(_1290); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::getConstraint( int _1290){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelConstraint > { if ( ((_1290 >= (int)0) && (_1290 < cons_used))) return (((*cons)(_1290))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint  ( const std::string & _1291) { return mosek::fusion::p_Model::_get_impl(this)->getConstraint(_1291); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::getConstraint( const std::string & _1291){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelConstraint > { if ( mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->hasItem(_1291)) return (((*cons)(mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->getItem(_1291)))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable  ( int _1292) { return mosek::fusion::p_Model::_get_impl(this)->getVariable(_1292); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::getVariable( int _1292){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelVariable > { if ( ((_1292 >= (int)0) && (_1292 < vars_used))) return (((*vars)(_1292))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable  ( const std::string & _1293) { return mosek::fusion::p_Model::_get_impl(this)->getVariable(_1293); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::getVariable( const std::string & _1293){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelVariable > { if ( mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->hasItem(_1293)) return (((*vars)(mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->getItem(_1293)))); else return (nullptr); })(); }std::string mosek::fusion::Model::getName  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName( ){ return model_name; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone  ( ) { return mosek::fusion::p_Model::_get_impl(this)->clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::clone( ){ return ::mosek::fusion::p_Model::_new_Model(_pubthis); }void mosek::fusion::p_Model::natbarvarmap_ensure( int _1294){ if (((natbarvarmap_num + _1294) > (int)((natbarvarmap_Var)->size(0)))){ int _1295 = ((int)2 * (int)((natbarvarmap_Var)->size(0))); if ((_1295 < (natbarvarmap_num + _1294))){ (_1295 = (natbarvarmap_num + _1294)); }else {}std::shared_ptr< monty::ndarray< int,1 > > _1296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1295))); std::shared_ptr< monty::ndarray< int,1 > > _1297 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1295))); int _7850 = (int)0; int _7851 = natbarvarmap_num; for (int _1298 = _7850;_1298<_7851;++_1298){ (((*_1296)(_1298)) = ((*natbarvarmap_Var)(_1298))); }(natbarvarmap_Var = _1296); }else {}}void mosek::fusion::p_Model::natvarmap_ensure( int _1299){ if (((natvarmap_num + _1299) > (int)((natvarmap_idx)->size(0)))){ int _1300 = ((int)2 * (int)((natvarmap_idx)->size(0))); if ((_1300 < (natvarmap_num + _1299))){ (_1300 = (natvarmap_num + _1299)); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _1301 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1300))); ::mosek::fusion::Utils::Tools::arraycopy(natvarmap_idx,(int)0,_1301,(int)0,natvarmap_num); std::shared_ptr< monty::ndarray< int,1 > > _1302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1300))); int _7852 = (int)0; int _7853 = natvarmap_num; for (int _1303 = _7852;_1303<_7853;++_1303){ (((*_1302)(_1303)) = ((*natvarmap_Var)(_1303))); }(natvarmap_idx = _1301); (natvarmap_Var = _1302); }else {}}int mosek::fusion::p_Model::task_alloc_vars( int _1304){ if (((task_vars_allocated - task_vars_used) < _1304)){ int _1305 = ([&]() -> int { if ( (((_1304 + task_vars_used) - task_vars_allocated) < (int)1000)) return ((int)1000); else return (_1304); })(); task_append_var(_1305); (task_vars_allocated += _1305); }else {}int _1306 = task_vars_used; (task_vars_used += _1304); return _1306; }void mosek::fusion::p_Model::destroy(){con_map.reset();cons.reset();vars.reset();initsol_xx_flag.reset();initsol_xx.reset();natbarvarmap_Var.reset();var_map.reset();natvarmap_idx.reset();natvarmap_Var.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::CompoundVariable::CompoundVariable(mosek::fusion::p_CompoundVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "CompoundVariable()" << this << std::endl; */ }mosek::fusion::CompoundVariable::~CompoundVariable() {  /* std::cout << "~CompoundVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_CompoundVariable::p_CompoundVariable  (::mosek::fusion::CompoundVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::CompoundVariable::t mosek::fusion::p_CompoundVariable::_new_CompoundVariable  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1307,    int _1308){ return new mosek::fusion::CompoundVariable(_1307,_1308); }mosek::fusion::CompoundVariable::CompoundVariable  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1307,    int _1308) :    CompoundVariable(new mosek::fusion::p_CompoundVariable(this)){ mosek::fusion::p_CompoundVariable::_get_impl(this)->_initialize(_1307,_1308); }void mosek::fusion::p_CompoundVariable::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1307,    int _1308){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(::mosek::fusion::p_CompoundVariable::model_from_var(_1307),::mosek::fusion::p_CompoundVariable::compute_shape(_1307,_1308));int _1309 = (int)0; int _1310 = (int)0; int _7854 = (int)0; int _7855 = (int)((_1307)->size(0)); for (int _1311 = _7854;_1311<_7855;++_1311){ if ((mosek::fusion::p_Set::_get_impl(((*_1307)(_1311))->getShape())->size == (int)1)){ ( ++ _1309 ); ( ++ _1310 ); }else if ((mosek::fusion::p_Set::_get_impl(((*_1307)(_1311))->getShape())->size > (int)1)){ ( ++ _1309 ); (_1310 += ((*_1307)(_1311))->getShape()->dim(_1308)); }else {}}(vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_1309)))); (varsb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_1309 + (int)1))))); (((*varsb)((int)0)) = (int)0); (stackdim = _1308); { int _1312 = (int)0; int _7856 = (int)0; int _7857 = (int)((_1307)->size(0)); for (int _1313 = _7856;_1313<_7857;++_1313){ if ((mosek::fusion::p_Set::_get_impl(((*_1307)(_1313))->getShape())->size > (int)0)){ (((*vars)(_1312)) = ((*_1307)(_1313))); if ((mosek::fusion::p_Set::_get_impl(((*_1307)(_1313))->getShape())->size == (int)1)){ (((*varsb)((_1312 + (int)1))) = (((*varsb)(_1312)) + (int)1)); }else { (((*varsb)((_1312 + (int)1))) = (((*varsb)(_1312)) + ((*_1307)(_1313))->getShape()->dim(_1308))); }( ++ _1312 ); }else {}}}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::CompoundVariable::elementDesc  ( long long _1314,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1315) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->elementDesc(_1314,_1315); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_CompoundVariable::elementDesc( long long _1314,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1315){ if (((_1314 < (long long)0) || (_1314 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1316 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1314); int _1317 = (int)0; while ((((*_1316)(stackdim)) >= ((*varsb)((_1317 + (int)1))))) { ( ++ _1317 ); }(((*_1316)(stackdim)) = (((*_1316)(stackdim)) - ((*varsb)(_1317)))); ((*vars)(_1317))->elementDesc(mosek::fusion::p_Set::_get_impl(((*vars)(_1317))->getShape().get())->linearidx(_1316),_1315); return _1315; }void mosek::fusion::CompoundVariable::elementName  ( long long _1318,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1319) { mosek::fusion::p_CompoundVariable::_get_impl(this)->elementName(_1318,_1319); }void mosek::fusion::p_CompoundVariable::elementName( long long _1318,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1319){ if (((_1318 < (long long)0) || (_1318 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1320 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1318); int _1321 = (int)0; while ((((*_1320)(stackdim)) >= ((*varsb)((_1321 + (int)1))))) { ( ++ _1321 ); }(((*_1320)(stackdim)) = (((*_1320)(stackdim)) - ((*varsb)(_1321)))); ((*vars)(_1321))->elementName(mosek::fusion::p_Set::_get_impl(((*vars)(_1321))->getShape().get())->linearidx(_1320),_1319); }void mosek::fusion::CompoundVariable::inst  ( long long _1322,    long long _1323,    std::shared_ptr< monty::ndarray< int,1 > > _1324,    std::shared_ptr< monty::ndarray< int,1 > > _1325,    std::shared_ptr< monty::ndarray< int,1 > > _1326) { mosek::fusion::p_CompoundVariable::_get_impl(this)->inst(_1322,_1323,_1324,_1325,_1326); }void mosek::fusion::p_CompoundVariable::inst( long long _1322,long long _1323,std::shared_ptr< monty::ndarray< int,1 > > _1324,std::shared_ptr< monty::ndarray< int,1 > > _1325,std::shared_ptr< monty::ndarray< int,1 > > _1326){ if (((_1322 < (long long)0) || (_1322 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1327 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1322); int _1328 = (int)0; while ((((*_1327)(stackdim)) >= ((*varsb)((_1328 + (int)1))))) { ( ++ _1328 ); }(((*_1327)(stackdim)) = (((*_1327)(stackdim)) - ((*varsb)(_1328)))); ((*vars)(_1328))->inst(mosek::fusion::p_Set::_get_impl(((*vars)(_1328))->getShape().get())->linearidx(_1327),_1323,_1324,_1325,_1326); }void mosek::fusion::CompoundVariable::set_values  ( long long _1329,    std::shared_ptr< monty::ndarray< int,1 > > _1330,    std::shared_ptr< monty::ndarray< long long,1 > > _1331,    int _1332,    std::shared_ptr< monty::ndarray< double,1 > > _1333,    bool _1334) { mosek::fusion::p_CompoundVariable::_get_impl(this)->set_values(_1329,_1330,_1331,_1332,_1333,_1334); }void mosek::fusion::p_CompoundVariable::set_values( long long _1329,std::shared_ptr< monty::ndarray< int,1 > > _1330,std::shared_ptr< monty::ndarray< long long,1 > > _1331,int _1332,std::shared_ptr< monty::ndarray< double,1 > > _1333,bool _1334){ int _1335 = (int)((_1331)->size(0)); int _1336 = ((*_1330)((int)0)); int _7858 = (int)1; int _7859 = (int)((_1330)->size(0)); for (int _1337 = _7858;_1337<_7859;++_1337){ (_1336 = (_1336 * ((*_1330)(_1337)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1338 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7860; for (int _1339=(int)0, _7861=(int)((_1330)->size(0)); _1339 < _7861;++_1339)_7860.push_back(_1329); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7860.size()),_7860.begin(),_7860.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1340 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1330)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _1341 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _1342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1342)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _7862 = (int)1; int _7863 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1343 = _7862;_1343<_7863;++_1343){ (((*_1342)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1343) - (int)1))) = (((*_1342)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1343))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1343)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1344 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1345 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _7864 = (int)0; int _7865 = _1336; for (int _1346 = _7864;_1346<_7865;++_1346){ { long long _1347 = ((*_1338)((int)0)); int _7866 = (int)0; int _7867 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1348 = _7866;_1348<_7867;++_1348){ (((*_1341)(_1348)) = (int)(_1347 / ((*_1342)(_1348)))); (_1347 = (_1347 - ((long long)((*_1341)(_1348)) * ((*_1342)(_1348))))); }}{ int _1349 = (int)0; while ((((*_1341)(stackdim)) >= ((*varsb)((_1349 + (int)1))))) { ( ++ _1349 ); }(((*_1341)(stackdim)) = (((*_1341)(stackdim)) - ((*varsb)(_1349)))); (((*_1344)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1349))->getShape().get())->linearidx(_1341)); (((*_1345)((int)0)) = ((*_1333)((_1332 + _1346)))); ((*vars)(_1349))->set_values(_1344,_1345,_1334); }{ ( ++ ((*_1340)((int)0)) ); (((*_1338)((int)0)) = (((*_1338)((int)0)) + ((*_1331)((_1335 - (int)1))))); int _1350 = (int)0; { (_1350 = (int)0); for (;((_1350 < (_1335 - (int)1)) && (((*_1340)(_1350)) == ((*_1330)(_1350))));( ++ _1350 )){ (((*_1340)(_1350)) = (int)0); ( ++ ((*_1340)((_1350 + (int)1))) ); }}int _7868 = (int)0; int _7869 = _1350; for (int _1351 = _7868;_1351<_7869;++_1351){ (((*_1338)(_1351)) = ((*_1338)(_1350))); }}}}void mosek::fusion::CompoundVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1352,    std::shared_ptr< monty::ndarray< double,1 > > _1353,    bool _1354) { mosek::fusion::p_CompoundVariable::_get_impl(this)->set_values(_1352,_1353,_1354); }void mosek::fusion::p_CompoundVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1352,std::shared_ptr< monty::ndarray< double,1 > > _1353,bool _1354){ std::shared_ptr< monty::ndarray< long long,1 > > _1355 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1356 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7870 = (int)0; int _7871 = (int)((_1352)->size(0)); for (int _1358 = _7870;_1358<_7871;++_1358){ { long long _1359 = (long long)((*_1352)(_1358)); int _7872 = (int)0; int _7873 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1360 = _7872;_1360<_7873;++_1360){ (((*_1357)(_1360)) = (int)(_1359 / shape_p->stride(_1360))); (_1359 = (_1359 - ((long long)((*_1357)(_1360)) * shape_p->stride(_1360)))); }}{ int _1361 = (int)0; while ((((*_1357)(stackdim)) >= ((*varsb)((_1361 + (int)1))))) { ( ++ _1361 ); }(((*_1357)(stackdim)) = (((*_1357)(stackdim)) - ((*varsb)(_1361)))); (((*_1355)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1361))->getShape().get())->linearidx(_1357)); (((*_1356)((int)0)) = ((*_1353)(_1358))); ((*vars)(_1361))->set_values(_1355,_1356,_1354); }}}void mosek::fusion::CompoundVariable::values  ( long long _1362,    std::shared_ptr< monty::ndarray< int,1 > > _1363,    std::shared_ptr< monty::ndarray< long long,1 > > _1364,    int _1365,    std::shared_ptr< monty::ndarray< double,1 > > _1366,    bool _1367) { mosek::fusion::p_CompoundVariable::_get_impl(this)->values(_1362,_1363,_1364,_1365,_1366,_1367); }void mosek::fusion::p_CompoundVariable::values( long long _1362,std::shared_ptr< monty::ndarray< int,1 > > _1363,std::shared_ptr< monty::ndarray< long long,1 > > _1364,int _1365,std::shared_ptr< monty::ndarray< double,1 > > _1366,bool _1367){ int _1368 = (int)((_1364)->size(0)); int _1369 = ((*_1363)((int)0)); int _7874 = (int)1; int _7875 = (int)((_1363)->size(0)); for (int _1370 = _7874;_1370<_7875;++_1370){ (_1369 *= ((*_1363)(_1370))); }std::shared_ptr< monty::ndarray< long long,1 > > _1371 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7876; for (int _1372=(int)0, _7877=(int)((_1363)->size(0)); _1372 < _7877;++_1372)_7876.push_back(_1362); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7876.size()),_7876.begin(),_7876.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1373 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1363)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _1374 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _1375 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _7878 = (int)0; int _7879 = _1369; for (int _1376 = _7878;_1376<_7879;++_1376){ { long long _1377 = ((*_1371)((int)0)); int _7880 = (int)0; int _7881 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1378 = _7880;_1378<_7881;++_1378){ (((*_1374)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1378) - (int)1))) = (int)(_1377 % shape_p->dim(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1378) - (int)1)))); (_1377 /= shape_p->dim(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1378) - (int)1))); }}{ int _1379 = (int)0; while ((((*_1374)(stackdim)) >= ((*varsb)((_1379 + (int)1))))) { ( ++ _1379 ); }(((*_1374)(stackdim)) = (((*_1374)(stackdim)) - ((*varsb)(_1379)))); (((*_1375)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1379))->getShape().get())->linearidx(_1374)); ((*vars)(_1379))->values(_1375,(_1365 + _1376),_1366,_1367); }{ ( ++ ((*_1373)((int)0)) ); int _1380 = (int)0; { (_1380 = (int)0); for (;((_1380 < (_1368 - (int)1)) && (((*_1373)(_1380)) == ((*_1363)(((_1368 - (int)1) - _1380)))));( ++ _1380 )){ (((*_1373)(_1380)) = (int)0); ( ++ ((*_1373)((_1380 + (int)1))) ); }}(((*_1371)(_1380)) += ((*_1364)(((_1368 - _1380) - (int)1)))); int _7882 = (int)0; int _7883 = _1380; for (int _1381 = _7882;_1381<_7883;++_1381){ (((*_1371)(_1381)) = ((*_1371)(_1380))); }}}}void mosek::fusion::CompoundVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1382,    int _1383,    std::shared_ptr< monty::ndarray< double,1 > > _1384,    bool _1385) { mosek::fusion::p_CompoundVariable::_get_impl(this)->values(_1382,_1383,_1384,_1385); }void mosek::fusion::p_CompoundVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1382,int _1383,std::shared_ptr< monty::ndarray< double,1 > > _1384,bool _1385){ std::shared_ptr< monty::ndarray< long long,1 > > _1386 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1387 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7884 = (int)0; int _7885 = (int)((_1382)->size(0)); for (int _1388 = _7884;_1388<_7885;++_1388){ { long long _1389 = (long long)((*_1382)(_1388)); int _7886 = (int)0; int _7887 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1390 = _7886;_1390<_7887;++_1390){ (((*_1387)(_1390)) = (int)(_1389 / shape_p->stride(_1390))); (_1389 = (_1389 - ((long long)((*_1387)(_1390)) * shape_p->stride(_1390)))); }}{ int _1391 = (int)0; while ((((*_1387)(stackdim)) >= ((*varsb)((_1391 + (int)1))))) { ( ++ _1391 ); }(((*_1387)(stackdim)) = (((*_1387)(stackdim)) - ((*varsb)(_1391)))); (((*_1386)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1391))->getShape().get())->linearidx(_1387)); ((*vars)(_1391))->values(_1386,(_1383 + _1388),_1384,_1385); }}}void mosek::fusion::CompoundVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1392) { mosek::fusion::p_CompoundVariable::_get_impl(this)->make_continuous(_1392); }void mosek::fusion::p_CompoundVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1392){ std::shared_ptr< monty::ndarray< long long,1 > > _1393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1394 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7888 = (int)0; int _7889 = (int)((_1392)->size(0)); for (int _1395 = _7888;_1395<_7889;++_1395){ { long long _1396 = (long long)((*_1392)(_1395)); int _7890 = (int)0; int _7891 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1397 = _7890;_1397<_7891;++_1397){ (((*_1394)(_1397)) = (int)(_1396 / shape_p->stride(_1397))); (_1396 = (_1396 - ((long long)((*_1394)(_1397)) * shape_p->stride(_1397)))); }}{ int _1398 = (int)0; while ((((*_1394)(stackdim)) >= ((*varsb)((_1398 + (int)1))))) { ( ++ _1398 ); }(((*_1394)(stackdim)) = (((*_1394)(stackdim)) - ((*varsb)(_1398)))); (((*_1393)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1398))->getShape().get())->linearidx(_1394)); ((*vars)(_1398))->make_continuous(_1393); }}}void mosek::fusion::CompoundVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1399) { mosek::fusion::p_CompoundVariable::_get_impl(this)->make_integer(_1399); }void mosek::fusion::p_CompoundVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1399){ std::shared_ptr< monty::ndarray< long long,1 > > _1400 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1401 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7892 = (int)0; int _7893 = (int)((_1399)->size(0)); for (int _1402 = _7892;_1402<_7893;++_1402){ { long long _1403 = (long long)((*_1399)(_1402)); int _7894 = (int)0; int _7895 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1404 = _7894;_1404<_7895;++_1404){ (((*_1401)(_1404)) = (int)(_1403 / shape_p->stride(_1404))); (_1403 = (_1403 - ((long long)((*_1401)(_1404)) * shape_p->stride(_1404)))); }}{ int _1405 = (int)0; while ((((*_1401)(stackdim)) >= ((*varsb)((_1405 + (int)1))))) { ( ++ _1405 ); }(((*_1401)(stackdim)) = (((*_1401)(stackdim)) - ((*varsb)(_1405)))); (((*_1400)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1405))->getShape().get())->linearidx(_1401)); ((*vars)(_1405))->make_integer(_1400); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::CompoundVariable::asExpr  ( ) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_CompoundVariable::asExpr( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1406 = ::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(shape_p)->size + (int)1)); std::shared_ptr< monty::ndarray< double,1 > > _1407 = ::mosek::fusion::Utils::Tools::ones((int)mosek::fusion::p_Set::_get_impl(shape_p)->size); std::shared_ptr< monty::ndarray< long long,1 > > _1408 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((stackdim < (int)1)){ int _7896 = (int)0; int _7897 = (int)mosek::fusion::p_Set::_get_impl(shape_p)->size; for (int _1409 = _7896;_1409<_7897;++_1409){ (((*_1408)(_1409)) = _1409); }}else if ((stackdim >= mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ int _1410 = (int)0; long long _1411 = mosek::fusion::p_Set::_get_impl(((*vars)((int)0))->getShape())->size; int _7898 = (int)0; long long _7899 = _1411; for (long long _1412 = _7898;_1412<_7899;++_1412){ int _7900 = (int)0; int _7901 = (int)((vars)->size(0)); for (int _1413 = _7900;_1413<_7901;++_1413){ (((*_1408)(_1410)) = ((_1413 * _1411) + _1412)); ( ++ _1410 ); }}}else { int _1414 = (int)1; int _7902 = (int)0; int _7903 = stackdim; for (int _1415 = _7902;_1415<_7903;++_1415){ (_1414 *= shape_p->dim(_1415)); }std::shared_ptr< monty::ndarray< long long,1 > > _1416 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((vars)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1417 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((vars)->size(0)) + (int)1)))); int _7904 = (int)1; int _7905 = ((int)((vars)->size(0)) + (int)1); for (int _1418 = _7904;_1418<_7905;++_1418){ (((*_1417)(_1418)) = (((*_1417)((_1418 - (int)1))) + mosek::fusion::p_Set::_get_impl(((*vars)((_1418 - (int)1)))->getShape())->size)); }int _1419 = (int)0; int _7906 = (int)0; int _7907 = _1414; for (int _1420 = _7906;_1420<_7907;++_1420){ int _1421 = (int)0; int _7908 = (int)0; int _7909 = (int)((vars)->size(0)); for (int _1422 = _7908;_1422<_7909;++_1422){ int _7910 = (int)0; long long _7911 = ((*vars)(_1422))->getShape()->stride((stackdim - (int)1)); for (long long _1423 = _7910;_1423<_7911;++_1423){ (((*_1408)(_1419)) = ((((*_1417)(_1422)) + ((*_1416)(_1422))) + _1423)); ( ++ _1419 ); }(((*_1416)(_1422)) += ((*vars)(_1422))->getShape()->stride((stackdim - (int)1))); }}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1424 = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _7912; for (int _1425=(int)0, _7913=(int)((vars)->size(0)); _1425 < _7913;++_1425)_7912.push_back(((*vars)(_1425))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7912.size()),_7912.begin(),_7912.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_1406,_1424,_1408,_1407,nullptr,shape_p,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::CompoundVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _1426,    std::shared_ptr< monty::ndarray< int,1 > > _1427) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->slice(_1426,_1427); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_CompoundVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _1426,std::shared_ptr< monty::ndarray< int,1 > > _1427){ if (((int)((_1426)->size(0)) != (int)((_1427)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else if (((int)((_1426)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ throw ::mosek::fusion::SliceError(std::string ("Slice has wrong number of dimensions"));}else { int _7914 = (int)0; int _7915 = (int)((_1426)->size(0)); for (int _1428 = _7914;_1428<_7915;++_1428){ if (((((*_1426)(_1428)) < (int)0) || ((((*_1426)(_1428)) > ((*_1427)(_1428))) || (((*_1427)(_1428)) > shape_p->dim(_1428))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index is out of bounds"));}else {}}}bool _1429 = false; { { int _1430 = (int)0; for (;(_1430 < (int)((_1426)->size(0)));( ++ _1430 )){ if ((((*_1426)(_1430)) >= ((*_1427)(_1430)))){ (_1429 = true); }else {}}}}if (_1429){ int _1431 = (int)((_1426)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1432 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1431))); { int _1433 = (int)0; for (;(_1433 < _1431);( ++ _1433 )){ if ((((*_1426)(_1433)) < ((*_1427)(_1433)))){ (((*_1432)(_1433)) = (((*_1427)(_1433)) - ((*_1426)(_1433)))); }else { (((*_1432)(_1433)) = (int)0); }}}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_1432)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1431)))); }else if (((int)((_1426)->size(0)) == (int)1)){ return _pubthis->slice(((*_1426)((int)0)),((*_1427)((int)0))); }else { int _1434 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; std::shared_ptr< monty::ndarray< int,1 > > _1435 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1434))); std::shared_ptr< monty::ndarray< int,1 > > _1436 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1434))); int _1437; int _1438; int _1439; int _1440; { int _1441 = (int)0; while ((((*_1426)(stackdim)) >= ((*varsb)((_1441 + (int)1))))) { ( ++ _1441 ); }(_1437 = _1441); (_1438 = (((*_1426)(stackdim)) - (int)((*varsb)(_1441)))); while ((((*_1427)(stackdim)) > (int)((*varsb)((_1441 + (int)1))))) { ( ++ _1441 ); }(_1439 = _1441); (_1440 = (((*_1427)(stackdim)) - (int)((*varsb)(_1441)))); }{ int _1442 = (int)0; for (;(_1442 < _1434);( ++ _1442 )){ (((*_1435)(_1442)) = ((*_1426)(_1442))); (((*_1436)(_1442)) = ((*_1427)(_1442))); }}if ((_1437 == _1439)){ (((*_1435)(stackdim)) = _1438); (((*_1436)(stackdim)) = _1440); return ((*vars)(_1437))->slice(_1435,_1436); }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1443 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((_1439 - _1437) + (int)1)))); (((*_1435)(stackdim)) = _1438); (((*_1436)(stackdim)) = ((*vars)(_1437))->getShape()->dim(stackdim)); (((*_1443)((int)0)) = ((*vars)(_1437))->slice(_1435,_1436)); (((*_1435)(stackdim)) = (int)0); (((*_1436)(stackdim)) = _1440); (((*_1443)(((int)((_1443)->size(0)) - (int)1))) = ((*vars)(_1439))->slice(_1435,_1436)); int _7916 = (int)1; int _7917 = ((int)((_1443)->size(0)) - (int)1); for (int _1444 = _7916;_1444<_7917;++_1444){ (((*_1435)(stackdim)) = (int)0); (((*_1436)(stackdim)) = ((*vars)((_1444 + _1437)))->getShape()->dim(stackdim)); (((*_1443)(_1444)) = ((*vars)((_1444 + _1437)))->slice(_1435,_1436)); }return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_1443,stackdim); }}}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::CompoundVariable::slice  ( int _1445,    int _1446) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->slice(_1445,_1446); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_CompoundVariable::slice( int _1445,int _1446){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::SliceError(std::string ("Slice has wrong number of dimensions"));}else if ((_1445 > _1446)){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice range"));}else if (((_1445 < (int)0) || (_1446 > shape_p->dim((int)0)))){ throw ::mosek::fusion::SliceError(std::string ("Slice index is out of bounds"));}else {}if ((_1445 == _1446)){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet((int)0)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0})); }else {}int _1447; int _1448; int _1449; int _1450; { int _1451 = (int)0; while ((_1445 >= ((*varsb)((_1451 + (int)1))))) { ( ++ _1451 ); }(_1447 = _1451); (_1448 = (_1445 - ((*varsb)(_1451)))); while ((_1446 > ((*varsb)((_1451 + (int)1))))) { ( ++ _1451 ); }(_1449 = _1451); (_1450 = (_1446 - ((*varsb)(_1451)))); }if ((_1447 == _1449)){ return ((*vars)(_1447))->slice(_1448,_1450); }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1452 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((_1449 - _1447) + (int)1)))); if ((_1448 > (int)0)){ (((*_1452)((int)0)) = ((*vars)(_1447))->slice(_1448,((*vars)(_1447))->getShape()->dim((int)0))); }else { (((*_1452)((int)0)) = ((*vars)(_1447))); }if ((_1450 < ((*vars)(_1449))->getShape()->dim((int)0))){ (((*_1452)(((int)((_1452)->size(0)) - (int)1))) = ((*vars)(_1449))->slice((int)0,_1450)); }else { (((*_1452)(((int)((_1452)->size(0)) - (int)1))) = ((*vars)(_1449))); }{ int _1453 = (int)1; for (;(_1453 < ((int)((_1452)->size(0)) - (int)1));( ++ _1453 )){ (((*_1452)(_1453)) = ((*vars)((_1447 + _1453)))); }}return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_1452,(int)0); }}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_CompoundVariable::compute_shape( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1454,int _1455){ monty::rc_ptr< ::mosek::fusion::Set > _1456 = ((*_1454)((int)0))->getShape(); int _1457 = (int)0; int _7918 = (int)0; int _7919 = (int)((_1454)->size(0)); for (int _1458 = _7918;_1458<_7919;++_1458){ monty::rc_ptr< ::mosek::fusion::Variable > _1459 = ((*_1454)(_1458)); if ((mosek::fusion::p_Set::_get_impl(_1459->getShape())->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(_1459->getShape())->nd != mosek::fusion::p_Set::_get_impl(_1456)->nd)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}int _7920 = (int)0; int _7921 = mosek::fusion::p_Set::_get_impl(_1456)->nd; for (int _1460 = _7920;_1460<_7921;++_1460){ if (((_1460 != _1455) && (_1456->dim(_1460) != _1459->getShape()->dim(_1460)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}}(_1457 = (_1457 + _1459->getShape()->dim(_1455))); }else {}}if ((mosek::fusion::p_Set::_get_impl(_1456)->nd == (int)1)){ return ::mosek::fusion::p_IntSet::_new_IntSet(_1457); }else { std::shared_ptr< monty::ndarray< int,1 > > _1461 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7922; for (int _1462=(int)0, _7923=mosek::fusion::p_Set::_get_impl(_1456)->nd; _1462 < _7923;++_1462)_7922.push_back(_1456->dim(_1462)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7922.size()),_7922.begin(),_7922.end())); })(); (((*_1461)(_1455)) = _1457); return ::mosek::fusion::p_NDSet::_new_NDSet(_1461); }}monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_CompoundVariable::model_from_var( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1463){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::Model > { if ( (! _1463 || ((int)((_1463)->size(0)) == (int)0))) return (nullptr); else return (((*_1463)((int)0))->getModel()); })(); }void mosek::fusion::p_CompoundVariable::destroy(){varsb.reset();vars.reset();}void mosek::fusion::CompoundVariable::destroy() { mosek::fusion::p_CompoundVariable::_get_impl(this)->destroy(); }mosek::fusion::RepeatVariable::RepeatVariable(mosek::fusion::p_RepeatVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "RepeatVariable()" << this << std::endl; */ }mosek::fusion::RepeatVariable::~RepeatVariable() {  /* std::cout << "~RepeatVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RepeatVariable::p_RepeatVariable  (::mosek::fusion::RepeatVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RepeatVariable::t mosek::fusion::p_RepeatVariable::_new_RepeatVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1464,    int _1465,    int _1466){ return new mosek::fusion::RepeatVariable(_1464,_1465,_1466); }mosek::fusion::RepeatVariable::RepeatVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1464,    int _1465,    int _1466) :    RepeatVariable(new mosek::fusion::p_RepeatVariable(this)){ mosek::fusion::p_RepeatVariable::_get_impl(this)->_initialize(_1464,_1465,_1466); }void mosek::fusion::p_RepeatVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1464,    int _1465,    int _1466){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1464->getModel(),::mosek::fusion::p_RepeatVariable::compute_shape(_1464,_1465,_1466));monty::rc_ptr< ::mosek::fusion::Set > _1467 = _1464->getShape(); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->x = _1464); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->count = _1466); (xsize = _1467->getSize()); if ((_1465 >= (int)0)){ int _1468 = mosek::fusion::p_Set::_get_impl(_1467)->nd; if ((_1468 <= _1465)){ (_1468 = (_1465 + (int)1)); }else {}(mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->dim = _1465); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->xdims = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7924; for (int _1469=(int)0, _7925=_1468; _1469 < _7925;++_1469)_7924.push_back(_1467->dim(_1469)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7924.size()),_7924.begin(),_7924.end())); })()); }else { (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->dim = (int)0); (xdims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_1467)->nd + (int)1))))); (((*xdims)((int)0)) = (int)1); int _7926 = (int)0; int _7927 = mosek::fusion::p_Set::_get_impl(_1467)->nd; for (int _1470 = _7926;_1470<_7927;++_1470){ (((*xdims)((_1470 + (int)1))) = _1467->dim(_1470)); }}(mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->d0 = (int)1); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->d1 = (int)1); (mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->d2 = (int)1); { int _7928 = (int)0; int _7929 = _1465; for (int _1471 = _7928;_1471<_7929;++_1471){ (d0 *= ((*xdims)(_1471))); }(d1 = (((*xdims)(mosek::fusion::p_RepeatVariable::_get_impl(_pubthis)->dim)) * _1466)); int _7930 = (_1465 + (int)1); int _7931 = (int)((xdims)->size(0)); for (int _1472 = _7930;_1472<_7931;++_1472){ (d2 *= ((*xdims)(_1472))); }}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RepeatVariable::elementDesc  ( long long _1473,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1474) { return mosek::fusion::p_RepeatVariable::_get_impl(this)->elementDesc(_1473,_1474); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RepeatVariable::elementDesc( long long _1473,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1474){ if ((dim == (int)0)){ return x->elementDesc((_1473 % xsize),_1474); }else if ((dim >= mosek::fusion::p_Set::_get_impl(x->getShape())->nd)){ return x->elementDesc((_1473 / xsize),_1474); }else { long long _1475 = d0; long long _1476 = (((*xdims)(dim)) * d2); long long _1477 = (_1473 % _1476); long long _1478 = (_1473 / (_1476 * count)); return x->elementDesc(((_1478 * _1476) + _1477),_1474); }}void mosek::fusion::RepeatVariable::elementName  ( long long _1479,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1480) { mosek::fusion::p_RepeatVariable::_get_impl(this)->elementName(_1479,_1480); }void mosek::fusion::p_RepeatVariable::elementName( long long _1479,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1480){ if ((dim == (int)0)){ x->elementName((_1479 % xsize),_1480); }else if ((dim >= mosek::fusion::p_Set::_get_impl(x->getShape())->nd)){ x->elementName((_1479 / xsize),_1480); }else { long long _1481 = d0; long long _1482 = (x->getShape()->dim(dim) * d2); long long _1483 = (_1479 % _1482); long long _1484 = (_1479 / (_1482 * count)); x->elementName(((_1484 * _1482) + _1483),_1480); }}void mosek::fusion::RepeatVariable::inst  ( long long _1485,    long long _1486,    std::shared_ptr< monty::ndarray< int,1 > > _1487,    std::shared_ptr< monty::ndarray< int,1 > > _1488,    std::shared_ptr< monty::ndarray< int,1 > > _1489) { mosek::fusion::p_RepeatVariable::_get_impl(this)->inst(_1485,_1486,_1487,_1488,_1489); }void mosek::fusion::p_RepeatVariable::inst( long long _1485,long long _1486,std::shared_ptr< monty::ndarray< int,1 > > _1487,std::shared_ptr< monty::ndarray< int,1 > > _1488,std::shared_ptr< monty::ndarray< int,1 > > _1489){ if ((dim == (int)0)){ x->inst((_1485 % xsize),_1486,_1487,_1489,_1488); }else if (((d1 * d2) == (int)1)){ x->inst((_1485 / count),_1486,_1487,_1489,_1488); }else { long long _1490 = d0; long long _1491 = (x->getShape()->dim(dim) * d2); long long _1492 = (_1485 % _1491); long long _1493 = (_1485 / (_1491 * count)); x->inst(((_1493 * _1491) + _1492),_1486,_1487,_1489,_1488); }}void mosek::fusion::RepeatVariable::set_values  ( long long _1494,    std::shared_ptr< monty::ndarray< int,1 > > _1495,    std::shared_ptr< monty::ndarray< long long,1 > > _1496,    int _1497,    std::shared_ptr< monty::ndarray< double,1 > > _1498,    bool _1499) { mosek::fusion::p_RepeatVariable::_get_impl(this)->set_values(_1494,_1495,_1496,_1497,_1498,_1499); }void mosek::fusion::p_RepeatVariable::set_values( long long _1494,std::shared_ptr< monty::ndarray< int,1 > > _1495,std::shared_ptr< monty::ndarray< long long,1 > > _1496,int _1497,std::shared_ptr< monty::ndarray< double,1 > > _1498,bool _1499){ if ((((int)((_1495)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd) || ((int)((_1496)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd))){ throw ::mosek::fusion::IndexError(std::string ("Lengths of nsize and strides are not correct"));}else {}int _1500 = (int)((_1496)->size(0)); int _1501 = ((*_1495)((int)0)); int _7932 = (int)1; int _7933 = (int)((_1495)->size(0)); for (int _1502 = _7932;_1502<_7933;++_1502){ (_1501 = (_1501 * ((*_1495)(_1502)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1503 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7934; for (int _1504=(int)0, _7935=(int)((_1495)->size(0)); _1504 < _7935;++_1504)_7934.push_back(_1494); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7934.size()),_7934.begin(),_7934.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1505 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1494); std::shared_ptr< monty::ndarray< double,1 > > _1506 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1501))); std::shared_ptr< monty::ndarray< long long,1 > > _1507 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1501))); int _7936 = (int)0; int _7937 = _1501; for (int _1508 = _7936;_1508<_7937;++_1508){ (((*_1506)(_1508)) = ((*_1498)((_1508 + _1497)))); long long _1509 = (((*_1503)((int)0)) % d2); long long _1510 = ((((*_1503)((int)0)) / d2) % ((*xdims)(dim))); long long _1511 = (((*_1503)((int)0)) / (d1 * d2)); (((*_1507)(_1508)) = ((((_1509 * d2) + _1510) * ((*xdims)(dim))) + _1511)); { ( ++ ((*_1505)((int)0)) ); (((*_1503)((int)0)) = (((*_1503)((int)0)) + ((*_1496)((_1500 - (int)1))))); int _1512 = (int)0; while (((_1512 < (_1500 - (int)1)) && (((*_1505)(_1512)) == ((*_1495)(_1512))))) { (((*_1505)(_1512)) = (int)0); ( ++ ((*_1505)((_1512 + (int)1))) ); ( ++ _1512 ); }int _7938 = (int)0; int _7939 = _1512; for (int _1513 = _7938;_1513<_7939;++_1513){ (((*_1503)(_1513)) = ((*_1503)(_1512))); }}}_pubthis->set_values(_1507,_1506,_1499); }void mosek::fusion::RepeatVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1514,    std::shared_ptr< monty::ndarray< double,1 > > _1515,    bool _1516) { mosek::fusion::p_RepeatVariable::_get_impl(this)->set_values(_1514,_1515,_1516); }void mosek::fusion::p_RepeatVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1514,std::shared_ptr< monty::ndarray< double,1 > > _1515,bool _1516){ if ((dim == (int)0)){ x->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7940; for (int _1517=(int)0, _7941=(int)((_1514)->size(0)); _1517 < _7941;++_1517)_7940.push_back((((*_1514)(_1517)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7940.size()),_7940.begin(),_7940.end())); })(),_1515,_1516); }else if (((d1 * d2) == (int)1)){ x->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7942; for (int _1518=(int)0, _7943=(int)((_1514)->size(0)); _1518 < _7943;++_1518)_7942.push_back((((*_1514)(_1518)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7942.size()),_7942.begin(),_7942.end())); })(),_1515,_1516); }else { long long _1519 = d0; long long _1520 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1521 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1514)->size(0))))); int _7944 = (int)0; int _7945 = (int)((_1514)->size(0)); for (int _1522 = _7944;_1522<_7945;++_1522){ long long _1523 = (((*_1514)(_1522)) % _1520); long long _1524 = (((*_1514)(_1522)) / (_1520 * count)); (((*_1521)(_1522)) = ((_1524 * _1520) + _1523)); }x->set_values(_1521,_1515,_1516); }}void mosek::fusion::RepeatVariable::values  ( long long _1525,    std::shared_ptr< monty::ndarray< int,1 > > _1526,    std::shared_ptr< monty::ndarray< long long,1 > > _1527,    int _1528,    std::shared_ptr< monty::ndarray< double,1 > > _1529,    bool _1530) { mosek::fusion::p_RepeatVariable::_get_impl(this)->values(_1525,_1526,_1527,_1528,_1529,_1530); }void mosek::fusion::p_RepeatVariable::values( long long _1525,std::shared_ptr< monty::ndarray< int,1 > > _1526,std::shared_ptr< monty::ndarray< long long,1 > > _1527,int _1528,std::shared_ptr< monty::ndarray< double,1 > > _1529,bool _1530){ if ((((int)((_1526)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd) || ((int)((_1527)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd))){ throw ::mosek::fusion::IndexError(std::string ("Lengths of nsize and strides are not correct"));}else {}int _1531 = (int)((_1527)->size(0)); int _1532 = ((*_1526)((int)0)); int _7946 = (int)1; int _7947 = (int)((_1526)->size(0)); for (int _1533 = _7946;_1533<_7947;++_1533){ (_1532 = (_1532 * ((*_1526)(_1533)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1534 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7948; for (int _1535=(int)0, _7949=(int)((_1526)->size(0)); _1535 < _7949;++_1535)_7948.push_back(_1525); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7948.size()),_7948.begin(),_7948.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1536 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1525); std::shared_ptr< monty::ndarray< long long,1 > > _1537 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1532))); int _7950 = (int)0; int _7951 = _1532; for (int _1538 = _7950;_1538<_7951;++_1538){ long long _1539 = (((*_1534)((int)0)) % d2); long long _1540 = ((((*_1534)((int)0)) / d2) % ((*xdims)(dim))); long long _1541 = (((*_1534)((int)0)) / (d1 * d2)); (((*_1537)(_1538)) = ((((_1539 * d2) + _1540) * ((*xdims)(dim))) + _1541)); { ( ++ ((*_1536)((int)0)) ); (((*_1534)((int)0)) = (((*_1534)((int)0)) + ((*_1527)((_1531 - (int)1))))); int _1542 = (int)0; while (((_1542 < (_1531 - (int)1)) && (((*_1536)(_1542)) == ((*_1526)(_1542))))) { (((*_1536)(_1542)) = (int)0); ( ++ ((*_1536)((_1542 + (int)1))) ); ( ++ _1542 ); }int _7952 = (int)0; int _7953 = _1542; for (int _1543 = _7952;_1543<_7953;++_1543){ (((*_1534)(_1543)) = ((*_1534)(_1542))); }}}_pubthis->values(_1537,_1528,_1529,_1530); }void mosek::fusion::RepeatVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1544,    int _1545,    std::shared_ptr< monty::ndarray< double,1 > > _1546,    bool _1547) { mosek::fusion::p_RepeatVariable::_get_impl(this)->values(_1544,_1545,_1546,_1547); }void mosek::fusion::p_RepeatVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1544,int _1545,std::shared_ptr< monty::ndarray< double,1 > > _1546,bool _1547){ if ((d0 == (int)1)){ x->values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7954; for (int _1548=(int)0, _7955=(int)((_1544)->size(0)); _1548 < _7955;++_1548)_7954.push_back((((*_1544)(_1548)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7954.size()),_7954.begin(),_7954.end())); })(),_1545,_1546,_1547); }else if (((d1 * d2) == (int)1)){ x->values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7956; for (int _1549=(int)0, _7957=(int)((_1544)->size(0)); _1549 < _7957;++_1549)_7956.push_back((((*_1544)(_1549)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7956.size()),_7956.begin(),_7956.end())); })(),_1545,_1546,_1547); }else { long long _1550 = d0; long long _1551 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1552 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1544)->size(0))))); int _7958 = (int)0; int _7959 = (int)((_1544)->size(0)); for (int _1553 = _7958;_1553<_7959;++_1553){ long long _1554 = (((*_1544)(_1553)) % _1551); long long _1555 = (((*_1544)(_1553)) / (_1551 * count)); (((*_1552)(_1553)) = ((_1555 * _1551) + _1554)); }x->values(_1552,_1545,_1546,_1547); }}void mosek::fusion::RepeatVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1556) { mosek::fusion::p_RepeatVariable::_get_impl(this)->make_continuous(_1556); }void mosek::fusion::p_RepeatVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1556){ if ((d0 == (int)1)){ x->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7960; for (int _1557=(int)0, _7961=(int)((_1556)->size(0)); _1557 < _7961;++_1557)_7960.push_back((((*_1556)(_1557)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7960.size()),_7960.begin(),_7960.end())); })()); }else if (((d1 * d2) == (int)1)){ x->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7962; for (int _1558=(int)0, _7963=(int)((_1556)->size(0)); _1558 < _7963;++_1558)_7962.push_back((((*_1556)(_1558)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7962.size()),_7962.begin(),_7962.end())); })()); }else { long long _1559 = d0; long long _1560 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1561 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1556)->size(0))))); int _7964 = (int)0; int _7965 = (int)((_1556)->size(0)); for (int _1562 = _7964;_1562<_7965;++_1562){ long long _1563 = (((*_1556)(_1562)) % _1560); long long _1564 = (((*_1556)(_1562)) / (_1560 * count)); (((*_1561)(_1562)) = ((_1564 * _1560) + _1563)); }x->make_continuous(_1561); }}void mosek::fusion::RepeatVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1565) { mosek::fusion::p_RepeatVariable::_get_impl(this)->make_integer(_1565); }void mosek::fusion::p_RepeatVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1565){ if ((dim == (int)0)){ x->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7966; for (int _1566=(int)0, _7967=(int)((_1565)->size(0)); _1566 < _7967;++_1566)_7966.push_back((((*_1565)(_1566)) % xsize)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7966.size()),_7966.begin(),_7966.end())); })()); }else if (((d1 * d2) == (int)1)){ x->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7968; for (int _1567=(int)0, _7969=(int)((_1565)->size(0)); _1567 < _7969;++_1567)_7968.push_back((((*_1565)(_1567)) / count)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7968.size()),_7968.begin(),_7968.end())); })()); }else { long long _1568 = d0; long long _1569 = (x->getShape()->dim(dim) * d2); std::shared_ptr< monty::ndarray< long long,1 > > _1570 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1565)->size(0))))); int _7970 = (int)0; int _7971 = (int)((_1565)->size(0)); for (int _1571 = _7970;_1571<_7971;++_1571){ long long _1572 = (((*_1565)(_1571)) % _1569); long long _1573 = (((*_1565)(_1571)) / (_1569 * count)); (((*_1570)(_1571)) = ((_1573 * _1569) + _1572)); }x->make_integer(_1570); }}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_RepeatVariable::compute_shape( monty::rc_ptr< ::mosek::fusion::Variable > _1574,int _1575,int _1576){ monty::rc_ptr< ::mosek::fusion::Set > _1577 = _1574->getShape(); if ((_1575 >= (int)0)){ if (((mosek::fusion::p_Set::_get_impl(_1577)->nd == (int)1) && (_1575 == (int)0))){ return ::mosek::fusion::p_Set::make((_1577->dim((int)0) * _1576)); }else if ((_1575 < mosek::fusion::p_Set::_get_impl(_1577)->nd)){ std::shared_ptr< monty::ndarray< int,1 > > _1578 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7972; for (int _1579=(int)0, _7973=mosek::fusion::p_Set::_get_impl(_1577)->nd; _1579 < _7973;++_1579)_7972.push_back(_1577->dim(_1579)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7972.size()),_7972.begin(),_7972.end())); })(); (((*_1578)(_1575)) *= _1576); return ::mosek::fusion::p_Set::make(_1578); }else { std::shared_ptr< monty::ndarray< int,1 > > _1580 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_1575 + (int)1)))); int _7974 = (int)0; int _7975 = mosek::fusion::p_Set::_get_impl(_1577)->nd; for (int _1581 = _7974;_1581<_7975;++_1581){ (((*_1580)(_1581)) = _1577->dim(_1581)); }int _7976 = mosek::fusion::p_Set::_get_impl(_1577)->nd; int _7977 = _1575; for (int _1582 = _7976;_1582<_7977;++_1582){ (((*_1580)(_1582)) = (int)1); }(((*_1580)(_1575)) = _1576); return ::mosek::fusion::p_Set::make(_1580); }}else { std::shared_ptr< monty::ndarray< int,1 > > _1583 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_1577)->nd + (int)1)))); (((*_1583)((int)0)) = _1576); int _7978 = (int)0; int _7979 = mosek::fusion::p_Set::_get_impl(_1577)->nd; for (int _1584 = _7978;_1584<_7979;++_1584){ (((*_1583)((_1584 + (int)1))) = _1577->dim(_1584)); }return ::mosek::fusion::p_Set::make(_1583); }}void mosek::fusion::p_RepeatVariable::destroy(){xdims.reset();x.reset();}void mosek::fusion::RepeatVariable::destroy() { mosek::fusion::p_RepeatVariable::_get_impl(this)->destroy(); }mosek::fusion::PickVariable::PickVariable(mosek::fusion::p_PickVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "PickVariable()" << this << std::endl; */ }mosek::fusion::PickVariable::~PickVariable() {  /* std::cout << "~PickVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PickVariable::p_PickVariable  (::mosek::fusion::PickVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PickVariable::t mosek::fusion::p_PickVariable::_new_PickVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1585,    std::shared_ptr< monty::ndarray< long long,1 > > _1586){ return new mosek::fusion::PickVariable(_1585,_1586); }mosek::fusion::PickVariable::PickVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1585,    std::shared_ptr< monty::ndarray< long long,1 > > _1586) :    PickVariable(new mosek::fusion::p_PickVariable(this)){ mosek::fusion::p_PickVariable::_get_impl(this)->_initialize(_1585,_1586); }void mosek::fusion::p_PickVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1585,    std::shared_ptr< monty::ndarray< long long,1 > > _1586){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1585->getModel(),::mosek::fusion::p_Set::make((int)((_1586)->size(0))));(mosek::fusion::p_PickVariable::_get_impl(_pubthis)->origin = _1585); long long _1587 = _1585->getShape()->getSize(); int _7980 = (int)0; int _7981 = (int)((_1586)->size(0)); for (int _1588 = _7980;_1588<_7981;++_1588){ if (((((*_1586)(_1588)) < (int)0) || (((*_1586)(_1588)) >= _1587))){ throw ::mosek::fusion::IndexError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Index (")).get())->a(((*_1586)(_1588))).get())->a(std::string (") is out of bounds")).get())->toString());}else {}}(mosek::fusion::p_PickVariable::_get_impl(_pubthis)->indexes = _1586); }}void mosek::fusion::PickVariable::inst  ( long long _1589,    long long _1590,    std::shared_ptr< monty::ndarray< int,1 > > _1591,    std::shared_ptr< monty::ndarray< int,1 > > _1592,    std::shared_ptr< monty::ndarray< int,1 > > _1593) { mosek::fusion::p_PickVariable::_get_impl(this)->inst(_1589,_1590,_1591,_1592,_1593); }void mosek::fusion::p_PickVariable::inst( long long _1589,long long _1590,std::shared_ptr< monty::ndarray< int,1 > > _1591,std::shared_ptr< monty::ndarray< int,1 > > _1592,std::shared_ptr< monty::ndarray< int,1 > > _1593){ origin->inst(((*indexes)(_1589)),_1590,_1591,_1592,_1593); }void mosek::fusion::PickVariable::set_values  ( long long _1594,    std::shared_ptr< monty::ndarray< int,1 > > _1595,    std::shared_ptr< monty::ndarray< long long,1 > > _1596,    int _1597,    std::shared_ptr< monty::ndarray< double,1 > > _1598,    bool _1599) { mosek::fusion::p_PickVariable::_get_impl(this)->set_values(_1594,_1595,_1596,_1597,_1598,_1599); }void mosek::fusion::p_PickVariable::set_values( long long _1594,std::shared_ptr< monty::ndarray< int,1 > > _1595,std::shared_ptr< monty::ndarray< long long,1 > > _1596,int _1597,std::shared_ptr< monty::ndarray< double,1 > > _1598,bool _1599){ _pubthis->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7982; for (int _1600=(int)0, _7983=((*_1595)((int)0)); _1600 < _7983;++_1600)_7982.push_back((_1594 + (((*_1596)((int)0)) * _1600))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7982.size()),_7982.begin(),_7982.end())); })(),([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1597 == (int)0)) return (_1598); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7984; for (int _1601=(int)0, _7985=((*_1595)((int)0)); _1601 < _7985;++_1601)_7984.push_back(((*_1598)((_1601 + _1597)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7984.size()),_7984.begin(),_7984.end())); })()); })(),_1599); }void mosek::fusion::PickVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1602,    std::shared_ptr< monty::ndarray< double,1 > > _1603,    bool _1604) { mosek::fusion::p_PickVariable::_get_impl(this)->set_values(_1602,_1603,_1604); }void mosek::fusion::p_PickVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1602,std::shared_ptr< monty::ndarray< double,1 > > _1603,bool _1604){ origin->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7986; for (int _1605=(int)0, _7987=(int)((_1602)->size(0)); _1605 < _7987;++_1605)_7986.push_back(((*indexes)(((*_1602)(_1605))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7986.size()),_7986.begin(),_7986.end())); })(),_1603,_1604); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PickVariable::elementDesc  ( long long _1606,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1607) { return mosek::fusion::p_PickVariable::_get_impl(this)->elementDesc(_1606,_1607); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PickVariable::elementDesc( long long _1606,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1607){ return origin->elementDesc(((*indexes)(_1606)),_1607); }void mosek::fusion::PickVariable::elementName  ( long long _1608,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1609) { mosek::fusion::p_PickVariable::_get_impl(this)->elementName(_1608,_1609); }void mosek::fusion::p_PickVariable::elementName( long long _1608,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1609){ origin->elementName(((*indexes)(_1608)),_1609); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PickVariable::slice  ( int _1610,    int _1611) { return mosek::fusion::p_PickVariable::_get_impl(this)->slice(_1610,_1611); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_PickVariable::slice( int _1610,int _1611){ return ::mosek::fusion::p_PickVariable::_new_PickVariable(origin,([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7988; for (int _1612=_1610, _7989=_1611; _1612 < _7989;++_1612)_7988.push_back(((*indexes)(_1612))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7988.size()),_7988.begin(),_7988.end())); })()); }void mosek::fusion::PickVariable::values  ( long long _1613,    std::shared_ptr< monty::ndarray< int,1 > > _1614,    std::shared_ptr< monty::ndarray< long long,1 > > _1615,    int _1616,    std::shared_ptr< monty::ndarray< double,1 > > _1617,    bool _1618) { mosek::fusion::p_PickVariable::_get_impl(this)->values(_1613,_1614,_1615,_1616,_1617,_1618); }void mosek::fusion::p_PickVariable::values( long long _1613,std::shared_ptr< monty::ndarray< int,1 > > _1614,std::shared_ptr< monty::ndarray< long long,1 > > _1615,int _1616,std::shared_ptr< monty::ndarray< double,1 > > _1617,bool _1618){ std::shared_ptr< monty::ndarray< long long,1 > > _1619 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7990; for (int _1620=(int)0, _7991=((*_1614)((int)0)); _1620 < _7991;++_1620)_7990.push_back((_1613 + (_1620 * ((*_1615)((int)0))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7990.size()),_7990.begin(),_7990.end())); })(); _pubthis->values(_1619,_1616,_1617,_1618); }void mosek::fusion::PickVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1621,    int _1622,    std::shared_ptr< monty::ndarray< double,1 > > _1623,    bool _1624) { mosek::fusion::p_PickVariable::_get_impl(this)->values(_1621,_1622,_1623,_1624); }void mosek::fusion::p_PickVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1621,int _1622,std::shared_ptr< monty::ndarray< double,1 > > _1623,bool _1624){ std::shared_ptr< monty::ndarray< long long,1 > > _1625 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7992; for (int _1626=(int)0, _7993=(int)((_1621)->size(0)); _1626 < _7993;++_1626)_7992.push_back(((*indexes)(((*_1621)(_1626))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7992.size()),_7992.begin(),_7992.end())); })(); origin->values(_1625,_1622,_1623,_1624); }void mosek::fusion::PickVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1627) { mosek::fusion::p_PickVariable::_get_impl(this)->make_continuous(_1627); }void mosek::fusion::p_PickVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1627){ origin->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7994; for (int _1628=(int)0, _7995=(int)((_1627)->size(0)); _1628 < _7995;++_1628)_7994.push_back(((*indexes)(((*_1627)(_1628))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7994.size()),_7994.begin(),_7994.end())); })()); }void mosek::fusion::PickVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1629) { mosek::fusion::p_PickVariable::_get_impl(this)->make_integer(_1629); }void mosek::fusion::p_PickVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1629){ origin->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7996; for (int _1630=(int)0, _7997=(int)((_1629)->size(0)); _1630 < _7997;++_1630)_7996.push_back(((*indexes)(((*_1629)(_1630))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7996.size()),_7996.begin(),_7996.end())); })()); }void mosek::fusion::p_PickVariable::destroy(){indexes.reset();origin.reset();}void mosek::fusion::PickVariable::destroy() { mosek::fusion::p_PickVariable::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1631,    monty::rc_ptr< ::mosek::fusion::Set > _1632,    long long _1633,    std::shared_ptr< monty::ndarray< long long,1 > > _1634){ return new mosek::fusion::SliceVariable(_1631,_1632,_1633,_1634); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1631,    monty::rc_ptr< ::mosek::fusion::Set > _1632,    long long _1633,    std::shared_ptr< monty::ndarray< long long,1 > > _1634) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1631,_1632,_1633,_1634); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1631,    monty::rc_ptr< ::mosek::fusion::Set > _1632,    long long _1633,    std::shared_ptr< monty::ndarray< long long,1 > > _1634){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1631->getModel(),_1632);(mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->origin = _1631); (mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->first = _1633); (mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->strides = _1634); }}void mosek::fusion::SliceVariable::inst  ( long long _1635,    long long _1636,    std::shared_ptr< monty::ndarray< int,1 > > _1637,    std::shared_ptr< monty::ndarray< int,1 > > _1638,    std::shared_ptr< monty::ndarray< int,1 > > _1639) { mosek::fusion::p_SliceVariable::_get_impl(this)->inst(_1635,_1636,_1637,_1638,_1639); }void mosek::fusion::p_SliceVariable::inst( long long _1635,long long _1636,std::shared_ptr< monty::ndarray< int,1 > > _1637,std::shared_ptr< monty::ndarray< int,1 > > _1638,std::shared_ptr< monty::ndarray< int,1 > > _1639){ if (((_1635 < (long long)0) || (_1635 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1640 = first; long long _1641 = _1635; int _7998 = (int)0; int _7999 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1642 = _7998;_1642<_7999;++_1642){ long long _1643 = (_1641 / shape_p->stride(_1642)); (_1641 = (_1641 - (_1643 * shape_p->stride(_1642)))); (_1640 = (_1640 + (((*strides)(_1642)) * _1643))); }origin->inst(_1640,_1636,_1637,_1638,_1639); }void mosek::fusion::SliceVariable::set_values  ( long long _1644,    std::shared_ptr< monty::ndarray< int,1 > > _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    int _1647,    std::shared_ptr< monty::ndarray< double,1 > > _1648,    bool _1649) { mosek::fusion::p_SliceVariable::_get_impl(this)->set_values(_1644,_1645,_1646,_1647,_1648,_1649); }void mosek::fusion::p_SliceVariable::set_values( long long _1644,std::shared_ptr< monty::ndarray< int,1 > > _1645,std::shared_ptr< monty::ndarray< long long,1 > > _1646,int _1647,std::shared_ptr< monty::ndarray< double,1 > > _1648,bool _1649){ if (((_1644 == (long long)0) && (((int)((_1645)->size(0)) == (int)1) && ((((*_1645)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_1646)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _1650 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8000; for (int _1651=(int)0, _8001=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _1651 < _8001;++_1651)_8000.push_back(shape_p->dim(_1651)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8000.size()),_8000.begin(),_8000.end())); })(); origin->set_values(first,_1650,strides,_1647,_1648,_1649); }else { int _1652 = (int)((_1645)->size(0)); bool _1653 = (_1652 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _1654 = (int)0; for (;((_1654 < _1652) && _1653);( ++ _1654 )){ (_1653 = (((*_1646)(_1654)) == shape_p->stride(_1654))); }}if (_1653){ long long _1655 = first; { long long _1656 = _1644; int _8002 = (int)0; int _8003 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _1657 = _8002;_1657<_8003;++_1657){ long long _1658 = (_1656 / ((*_1646)(_1657))); (_1656 = (_1656 - (((*_1646)(_1657)) * _1658))); (_1655 = (_1655 + (shape_p->stride(_1657) * _1658))); }}origin->set_values(_1655,_1645,strides,_1647,_1648,_1649); }else { long long _1659 = (long long)1; int _8004 = (int)0; int _8005 = (int)((_1645)->size(0)); for (int _1660 = _8004;_1660<_8005;++_1660){ (_1659 = (_1659 * ((*_1645)(_1660)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1661 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1659))); { std::shared_ptr< monty::ndarray< int,1 > > _1662 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1645)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1663 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1645)->size(0))))); long long _8006 = (long long)0; long long _8007 = _1659; for (long long _1664 = _8006;_1664<_8007;++_1664){ (((*_1661)(_1664)) = (mosek::fusion::p_Set::_get_impl(origin->getShape().get())->linearidx(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((_1644 + ((*_1663)((int)0))))) + first)); { int _1665 = (int)0; ( ++ ((*_1662)((int)0)) ); (((*_1663)((int)0)) = (((*_1663)((int)0)) + ((*_1646)((_1652 - (int)1))))); while (((_1665 < (_1652 - (int)1)) && (((*_1662)(_1665)) >= ((*_1645)(((_1652 - _1665) - (int)1)))))) { (((*_1663)((_1665 + (int)1))) = (((*_1663)((_1665 + (int)1))) + ((*_1646)(((_1652 - _1665) - (int)2))))); (((*_1662)(_1665)) = (int)0); ( ++ ((*_1662)((_1665 + (int)1))) ); ( ++ _1665 ); }int _8008 = (int)0; int _8009 = _1665; for (int _1666 = _8008;_1666<_8009;++_1666){ (((*_1663)(_1666)) = ((*_1663)(_1665))); }}}}origin->set_values(_1661,([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1647 == (int)0)) return (_1648); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8010; for (long long _1667=(int)0, _8011=_1659; _1667 < _8011;++_1667)_8010.push_back(((*_1648)((_1667 + _1647)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8010.size()),_8010.begin(),_8010.end())); })()); })(),_1649); }}}void mosek::fusion::SliceVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1668,    std::shared_ptr< monty::ndarray< double,1 > > _1669,    bool _1670) { mosek::fusion::p_SliceVariable::_get_impl(this)->set_values(_1668,_1669,_1670); }void mosek::fusion::p_SliceVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1668,std::shared_ptr< monty::ndarray< double,1 > > _1669,bool _1670){ std::shared_ptr< monty::ndarray< long long,1 > > _1671 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1668)->size(0))))); int _8012 = (int)0; int _8013 = (int)((_1668)->size(0)); for (int _1672 = _8012;_1672<_8013;++_1672){ std::shared_ptr< monty::ndarray< int,1 > > _1673 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1668)(_1672))); long long _1674 = first; int _8014 = (int)0; int _8015 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1675 = _8014;_1675<_8015;++_1675){ (_1674 = (_1674 + ((long long)((*_1673)(_1675)) * ((*strides)(_1675))))); }(((*_1671)(_1672)) = _1674); }origin->set_values(_1671,_1669,_1670); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SliceVariable::elementDesc  ( long long _1676,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1677) { return mosek::fusion::p_SliceVariable::_get_impl(this)->elementDesc(_1676,_1677); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_SliceVariable::elementDesc( long long _1676,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1677){ if (((_1676 < (long long)0) || (_1676 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1678 = first; long long _1679 = _1676; int _8016 = (int)0; int _8017 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1680 = _8016;_1680<_8017;++_1680){ long long _1681 = (_1679 / shape_p->stride(_1680)); (_1679 = (_1679 - (_1681 * shape_p->stride(_1680)))); (_1678 = (_1678 + (((*strides)(_1680)) * _1681))); }origin->elementDesc(_1678,_1677); return _1677; }void mosek::fusion::SliceVariable::elementName  ( long long _1682,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1683) { mosek::fusion::p_SliceVariable::_get_impl(this)->elementName(_1682,_1683); }void mosek::fusion::p_SliceVariable::elementName( long long _1682,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1683){ if (((_1682 < (long long)0) || (_1682 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1684 = first; long long _1685 = _1682; int _8018 = (int)0; int _8019 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1686 = _8018;_1686<_8019;++_1686){ long long _1687 = (_1685 / shape_p->stride(_1686)); (_1685 = (_1685 - (_1687 * shape_p->stride(_1686)))); (_1684 = (_1684 + (((*strides)(_1686)) * _1687))); }origin->elementName(_1684,_1683); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SliceVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _1688,    std::shared_ptr< monty::ndarray< int,1 > > _1689) { return mosek::fusion::p_SliceVariable::_get_impl(this)->slice(_1688,_1689); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_SliceVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _1688,std::shared_ptr< monty::ndarray< int,1 > > _1689){ monty::rc_ptr< ::mosek::fusion::Set > _1690 = shape_p->slice(_1688,_1689); long long _1691 = first; { int _1692 = (int)0; for (;(_1692 < (int)((_1688)->size(0)));( ++ _1692 )){ (_1691 = (_1691 + (((*strides)(_1692)) * ((*_1688)(_1692))))); }}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(origin,_1690,_1691,strides); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SliceVariable::slice  ( int _1693,    int _1694) { return mosek::fusion::p_SliceVariable::_get_impl(this)->slice(_1693,_1694); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_SliceVariable::slice( int _1693,int _1694){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(origin,shape_p->slice(_1693,_1694),(first + (long long)_1693),strides); }void mosek::fusion::SliceVariable::values  ( long long _1695,    std::shared_ptr< monty::ndarray< int,1 > > _1696,    std::shared_ptr< monty::ndarray< long long,1 > > _1697,    int _1698,    std::shared_ptr< monty::ndarray< double,1 > > _1699,    bool _1700) { mosek::fusion::p_SliceVariable::_get_impl(this)->values(_1695,_1696,_1697,_1698,_1699,_1700); }void mosek::fusion::p_SliceVariable::values( long long _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696,std::shared_ptr< monty::ndarray< long long,1 > > _1697,int _1698,std::shared_ptr< monty::ndarray< double,1 > > _1699,bool _1700){ if (((_1695 == (long long)0) && (((int)((_1696)->size(0)) == (int)1) && ((((*_1696)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_1697)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _1701 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8020; for (int _1702=(int)0, _8021=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _1702 < _8021;++_1702)_8020.push_back(shape_p->dim(_1702)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8020.size()),_8020.begin(),_8020.end())); })(); origin->values(first,_1701,strides,_1698,_1699,_1700); }else { int _1703 = (int)((_1696)->size(0)); bool _1704 = (_1703 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _1705 = (int)0; for (;((_1705 < _1703) && _1704);( ++ _1705 )){ (_1704 = (((*_1697)(_1705)) == shape_p->stride(_1705))); }}if (_1704){ long long _1706 = first; { long long _1707 = _1695; int _8022 = (int)0; int _8023 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _1708 = _8022;_1708<_8023;++_1708){ long long _1709 = (_1707 / ((*_1697)(_1708))); (_1707 = (_1707 - (((*_1697)(_1708)) * _1709))); (_1706 = (_1706 + (shape_p->stride(_1708) * _1709))); }}origin->values(_1706,_1696,strides,_1698,_1699,_1700); }else { long long _1710 = (long long)1; int _8024 = (int)0; int _8025 = (int)((_1696)->size(0)); for (int _1711 = _8024;_1711<_8025;++_1711){ (_1710 = (_1710 * ((*_1696)(_1711)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1712 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1710))); { std::shared_ptr< monty::ndarray< int,1 > > _1713 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1696)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1714 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1696)->size(0))))); long long _8026 = (long long)0; long long _8027 = _1710; for (long long _1715 = _8026;_1715<_8027;++_1715){ (((*_1712)(_1715)) = (mosek::fusion::p_Set::_get_impl(origin->getShape().get())->linearidx(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((_1695 + ((*_1714)((int)0))))) + first)); { int _1716 = (int)0; ( ++ ((*_1713)((int)0)) ); (((*_1714)((int)0)) = (((*_1714)((int)0)) + ((*_1697)((_1703 - (int)1))))); while (((_1716 < (_1703 - (int)1)) && (((*_1713)(_1716)) >= ((*_1696)(((_1703 - _1716) - (int)1)))))) { (((*_1714)((_1716 + (int)1))) = (((*_1714)((_1716 + (int)1))) + ((*_1697)(((_1703 - _1716) - (int)2))))); (((*_1713)(_1716)) = (int)0); ( ++ ((*_1713)((_1716 + (int)1))) ); ( ++ _1716 ); }int _8028 = (int)0; int _8029 = _1716; for (int _1717 = _8028;_1717<_8029;++_1717){ (((*_1714)(_1717)) = ((*_1714)(_1716))); }}}}origin->values(_1712,_1698,_1699,_1700); }}}void mosek::fusion::SliceVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1718,    int _1719,    std::shared_ptr< monty::ndarray< double,1 > > _1720,    bool _1721) { mosek::fusion::p_SliceVariable::_get_impl(this)->values(_1718,_1719,_1720,_1721); }void mosek::fusion::p_SliceVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1718,int _1719,std::shared_ptr< monty::ndarray< double,1 > > _1720,bool _1721){ std::shared_ptr< monty::ndarray< long long,1 > > _1722 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1718)->size(0))))); int _8030 = (int)0; int _8031 = (int)((_1718)->size(0)); for (int _1723 = _8030;_1723<_8031;++_1723){ std::shared_ptr< monty::ndarray< int,1 > > _1724 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1718)(_1723))); long long _1725 = first; int _8032 = (int)0; int _8033 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1726 = _8032;_1726<_8033;++_1726){ (_1725 = (_1725 + ((long long)((*_1724)(_1726)) * ((*strides)(_1726))))); }(((*_1722)(_1723)) = _1725); }origin->values(_1722,_1719,_1720,_1721); }void mosek::fusion::SliceVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1727) { mosek::fusion::p_SliceVariable::_get_impl(this)->make_continuous(_1727); }void mosek::fusion::p_SliceVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1727){ std::shared_ptr< monty::ndarray< long long,1 > > _1728 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1727)->size(0))))); int _8034 = (int)0; int _8035 = (int)((_1727)->size(0)); for (int _1729 = _8034;_1729<_8035;++_1729){ std::shared_ptr< monty::ndarray< int,1 > > _1730 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1727)(_1729))); long long _1731 = first; int _8036 = (int)0; int _8037 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1732 = _8036;_1732<_8037;++_1732){ (_1731 = (_1731 + ((long long)((*_1730)(_1732)) * ((*strides)(_1732))))); }(((*_1728)(_1729)) = _1731); }origin->make_continuous(_1728); }void mosek::fusion::SliceVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1733) { mosek::fusion::p_SliceVariable::_get_impl(this)->make_integer(_1733); }void mosek::fusion::p_SliceVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1733){ std::shared_ptr< monty::ndarray< long long,1 > > _1734 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1733)->size(0))))); int _8038 = (int)0; int _8039 = (int)((_1733)->size(0)); for (int _1735 = _8038;_1735<_8039;++_1735){ std::shared_ptr< monty::ndarray< int,1 > > _1736 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1733)(_1735))); long long _1737 = first; int _8040 = (int)0; int _8041 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1738 = _8040;_1738<_8041;++_1738){ (_1737 = (_1737 + ((long long)((*_1736)(_1738)) * ((*strides)(_1738))))); }(((*_1734)(_1735)) = _1737); }origin->make_integer(_1734); }void mosek::fusion::p_SliceVariable::destroy(){strides.reset();origin.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1739,    monty::rc_ptr< ::mosek::fusion::Model > _1740){ return new mosek::fusion::SymRangedVariable(_1739,_1740); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1739,    monty::rc_ptr< ::mosek::fusion::Model > _1740) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1739,_1740); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1739,    monty::rc_ptr< ::mosek::fusion::Model > _1740){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1739,_1740);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8042; for (int _1741=(int)0, _8043=(int)((mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->nativeidxs)->size(0)); _1741 < _8043;++_1741)_8042.push_back(((*mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->nativeidxs)(_1741))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8042.size()),_8042.begin(),_8042.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->dom); (mosek::fusion::p_SymRangedVariable::_get_impl(_pubthis)->dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->dim); (names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1739)->names_flushed); }}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1742,    const std::string &  _1743,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1744,    int _1745,    std::shared_ptr< monty::ndarray< int,1 > > _1746,    long long _1747){ return new mosek::fusion::SymRangedVariable(_1742,_1743,_1744,_1745,_1746,_1747); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1742,    const std::string &  _1743,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1744,    int _1745,    std::shared_ptr< monty::ndarray< int,1 > > _1746,    long long _1747) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1742,_1743,_1744,_1745,_1746,_1747); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1742,    const std::string &  _1743,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1744,    int _1745,    std::shared_ptr< monty::ndarray< int,1 > > _1746,    long long _1747){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1742,_1743,::mosek::fusion::p_Set::make(_1745,_1745),_1747);(mosek::fusion::p_SymRangedVariable::_get_impl(_pubthis)->dim = _1745); (nativeidxs = _1746); if (! _1746){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _1744); (names_flushed = false); }}std::string mosek::fusion::SymRangedVariable::toString  ( ) { return mosek::fusion::p_SymRangedVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymRangedVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1748 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_1748.get())->a(std::string ("RangedVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1748.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_1748.get())->a(shape_p->dim((int)0)); int _8044 = (int)1; int _8045 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1749 = _8044;_1749<_8045;++_1749){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1748.get())->a(std::string (",")).get())->a(shape_p->dim(_1749)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_1748.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_1748.get())->toString(); }void mosek::fusion::p_SymRangedVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8046 = (int)0; int _8047 = (int)((nativeidxs)->size(0)); for (int _1750 = _8046;_1750<_8047;++_1750){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_1750)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1750))).get())->a(std::string ("]")).get())->toString()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _1751 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _1752 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8048 = (int)0; int _8049 = (int)((_1751)->size(0)); for (int _1753 = _8048;_1753<_8049;++_1753){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_1752)(_1753)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1753))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::SymRangedVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1754,    int _1755,    int _1756,    long long _1757,    long long _1758,    std::shared_ptr< monty::ndarray< int,1 > > _1759,    std::shared_ptr< monty::ndarray< int,1 > > _1760,    std::shared_ptr< monty::ndarray< int,1 > > _1761) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->inst(_1754,_1755,_1756,_1757,_1758,_1759,_1760,_1761); }void mosek::fusion::p_SymRangedVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1754,int _1755,int _1756,long long _1757,long long _1758,std::shared_ptr< monty::ndarray< int,1 > > _1759,std::shared_ptr< monty::ndarray< int,1 > > _1760,std::shared_ptr< monty::ndarray< int,1 > > _1761){ if (nativeidxs){ int _8050 = _1755; int _8051 = _1756; for (int _1762 = _8050;_1762<_8051;++_1762){ (((*_1759)(((_1758 + _1762) - _1755))) = ((*nativeidxs)(tril_lin_idx((((*_1754)(_1762)) - _1757))))); }}else { int _8052 = _1755; int _8053 = _1756; for (int _1763 = _8052;_1763<_8053;++_1763){ long long _1764 = tril_lin_idx((((*_1754)(_1763)) - _1757)); long long _1765 = tril_idx((((*_1754)(_1763)) - _1757)); if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1764))){ int _1766 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(::mosek::fusion::ModelVariable::t(_pubthis),_1765,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1765),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1765)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1765,_1766); (((*_1759)(((_1758 + _1763) - _1755))) = _1766); (names_flushed = false); }else { (((*_1759)(((_1758 + _1763) - _1755))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1765)); }}}}void mosek::fusion::SymRangedVariable::inst  ( long long _1767,    long long _1768,    std::shared_ptr< monty::ndarray< int,1 > > _1769,    std::shared_ptr< monty::ndarray< int,1 > > _1770,    std::shared_ptr< monty::ndarray< int,1 > > _1771) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->inst(_1767,_1768,_1769,_1770,_1771); }void mosek::fusion::p_SymRangedVariable::inst( long long _1767,long long _1768,std::shared_ptr< monty::ndarray< int,1 > > _1769,std::shared_ptr< monty::ndarray< int,1 > > _1770,std::shared_ptr< monty::ndarray< int,1 > > _1771){ if (((_1767 < (long long)0) || (_1767 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1772 = tril_lin_idx(_1767); long long _1773 = tril_idx(_1767); if (nativeidxs){ (((*_1769)(_1768)) = ((*nativeidxs)(_1772))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1773))){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _1774 = _pubthis; int _1775 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(_1774,_1772,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1773),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1773)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1773,_1775); (((*_1769)(_1768)) = _1775); (names_flushed = false); }else { (((*_1769)(_1768)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1773)); }}}void mosek::fusion::p_SymRangedVariable::dual_u( long long _1776,std::shared_ptr< monty::ndarray< int,1 > > _1777,std::shared_ptr< monty::ndarray< long long,1 > > _1778,int _1779,std::shared_ptr< monty::ndarray< double,1 > > _1780){ long long _1781 = (long long)1; int _1782 = (int)((_1778)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1783 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1776,_1777,_1778); std::shared_ptr< monty::ndarray< double,1 > > _1784 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8054 = (int)0; int _8055 = _1782; for (int _1785 = _8054;_1785<_8055;++_1785){ (_1781 = (_1781 * ((*_1777)(_1785)))); }if (nativeidxs){ long long _8056 = (long long)0; long long _8057 = _1781; for (long long _1786 = _8056;_1786<_8057;++_1786){ int _1787 = ((*nativeidxs)(tril_lin_idx(_1783->get()))); (((*_1780)((_1786 + _1779))) = ((*_1784)(_1787))); _1783->inc(); }}else { mosek::fusion::SolutionStatus _1788 = model->getPrimalSolutionStatus(); int _8058 = (int)0; int _8059 = (int)_1781; for (int _1789 = _8058;_1789<_8059;++_1789){ long long _1790 = tril_idx(_1783->get()); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1790)){ int _1791 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1790); (((*_1780)(_1789)) = ((*_1784)(_1791))); }else { if (((_1788 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1788 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1788 == ::mosek::fusion::SolutionStatus::Feasible) || (_1788 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1780)((_1779 + _1789))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1790)); }else { (((*_1780)((_1779 + _1789))) = 0.0); }}_1783->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _1792,int _1793,std::shared_ptr< monty::ndarray< double,1 > > _1794){ std::shared_ptr< monty::ndarray< double,1 > > _1795 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8060 = (int)0; int _8061 = (int)((_1792)->size(0)); for (int _1796 = _8060;_1796<_8061;++_1796){ int _1797 = ((*nativeidxs)(tril_lin_idx(((*_1792)(_1796))))); (((*_1794)((_1793 + _1796))) = ((*_1795)(_1797))); }}else { mosek::fusion::SolutionStatus _1798 = model->getPrimalSolutionStatus(); int _8062 = (int)0; int _8063 = (int)((_1792)->size(0)); for (int _1799 = _8062;_1799<_8063;++_1799){ long long _1800 = tril_idx(((*_1792)(_1799))); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1800)){ int _1801 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1800); (((*_1794)((_1793 + _1799))) = ((*_1795)(_1801))); }else { if (((_1798 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1798 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1798 == ::mosek::fusion::SolutionStatus::Feasible) || (_1798 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1794)((_1793 + _1799))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1800)); }else { (((*_1794)((_1793 + _1799))) = 0.0); }}}}}void mosek::fusion::p_SymRangedVariable::dual_l( long long _1802,std::shared_ptr< monty::ndarray< int,1 > > _1803,std::shared_ptr< monty::ndarray< long long,1 > > _1804,int _1805,std::shared_ptr< monty::ndarray< double,1 > > _1806){ long long _1807 = (long long)1; int _1808 = (int)((_1804)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1809 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1802,_1803,_1804); std::shared_ptr< monty::ndarray< double,1 > > _1810 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); int _8064 = (int)0; int _8065 = _1808; for (int _1811 = _8064;_1811<_8065;++_1811){ (_1807 = (_1807 * ((*_1803)(_1811)))); }if (nativeidxs){ long long _8066 = (long long)0; long long _8067 = _1807; for (long long _1812 = _8066;_1812<_8067;++_1812){ int _1813 = ((*nativeidxs)(tril_lin_idx(_1809->get()))); (((*_1806)((_1812 + _1805))) = ((*_1810)(_1813))); _1809->inc(); }}else { mosek::fusion::SolutionStatus _1814 = model->getPrimalSolutionStatus(); int _8068 = (int)0; int _8069 = (int)_1807; for (int _1815 = _8068;_1815<_8069;++_1815){ long long _1816 = tril_idx(_1809->get()); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1816)){ int _1817 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1816); (((*_1806)(_1815)) = ((*_1810)(_1817))); }else { if (((_1814 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1814 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1814 == ::mosek::fusion::SolutionStatus::Feasible) || (_1814 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1806)((_1805 + _1815))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1816)); }else { (((*_1806)((_1805 + _1815))) = 0.0); }}_1809->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _1818,int _1819,std::shared_ptr< monty::ndarray< double,1 > > _1820){ std::shared_ptr< monty::ndarray< double,1 > > _1821 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8070 = (int)0; int _8071 = (int)((_1818)->size(0)); for (int _1822 = _8070;_1822<_8071;++_1822){ int _1823 = ((*nativeidxs)(tril_lin_idx(((*_1818)(_1822))))); (((*_1820)((_1819 + _1822))) = ((*_1821)(_1823))); }}else { mosek::fusion::SolutionStatus _1824 = model->getPrimalSolutionStatus(); int _8072 = (int)0; int _8073 = (int)((_1818)->size(0)); for (int _1825 = _8072;_1825<_8073;++_1825){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1818)(_1825)))){ int _1826 = ((*nativeidxs)(tril_lin_idx(((*_1818)(_1825))))); (((*_1820)((_1819 + _1825))) = ((*_1821)(_1826))); }else { if (((_1824 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1824 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1824 == ::mosek::fusion::SolutionStatus::Feasible) || (_1824 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1820)((_1819 + _1825))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(((*_1818)(_1825))))); }else { (((*_1820)((_1819 + _1825))) = 0.0); }}}}}void mosek::fusion::p_SymRangedVariable::dual_values( long long _1827,std::shared_ptr< monty::ndarray< int,1 > > _1828,std::shared_ptr< monty::ndarray< long long,1 > > _1829,int _1830,std::shared_ptr< monty::ndarray< double,1 > > _1831){ long long _1832 = (long long)1; int _1833 = (int)((_1829)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1834 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1827,_1828,_1829); std::shared_ptr< monty::ndarray< double,1 > > _1835 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1836 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8074 = (int)0; int _8075 = _1833; for (int _1837 = _8074;_1837<_8075;++_1837){ (_1832 = (_1832 * ((*_1828)(_1837)))); }if (nativeidxs){ long long _8076 = (long long)0; long long _8077 = _1832; for (long long _1838 = _8076;_1838<_8077;++_1838){ int _1839 = ((*nativeidxs)(tril_lin_idx(_1834->get()))); (((*_1831)((_1838 + _1830))) = (((*_1835)(_1839)) - ((*_1836)(_1839)))); _1834->inc(); }}else { mosek::fusion::SolutionStatus _1840 = model->getPrimalSolutionStatus(); int _8078 = (int)0; int _8079 = (int)_1832; for (int _1841 = _8078;_1841<_8079;++_1841){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1834->get())){ int _1842 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_1834->get())); (((*_1831)(_1841)) = (((*_1835)(_1842)) - ((*_1836)(_1842)))); }else { if (((_1840 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1840 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1840 == ::mosek::fusion::SolutionStatus::Feasible) || (_1840 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1831)((_1830 + _1841))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(_1834->get()))); }else { (((*_1831)((_1830 + _1841))) = 0.0); }}_1834->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _1843,int _1844,std::shared_ptr< monty::ndarray< double,1 > > _1845){ std::shared_ptr< monty::ndarray< double,1 > > _1846 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1847 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8080 = (int)0; int _8081 = (int)((_1843)->size(0)); for (int _1848 = _8080;_1848<_8081;++_1848){ int _1849 = ((*nativeidxs)(tril_lin_idx(((*_1843)(_1848))))); (((*_1845)((_1844 + _1848))) = (((*_1846)(_1849)) - ((*_1847)(_1849)))); }}else { mosek::fusion::SolutionStatus _1850 = model->getPrimalSolutionStatus(); int _8082 = (int)0; int _8083 = (int)((_1843)->size(0)); for (int _1851 = _8082;_1851<_8083;++_1851){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(tril_idx(((*_1843)(_1851))))){ int _1852 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(((*_1843)(_1851)))); (((*_1845)((_1844 + _1851))) = (((*_1846)(_1852)) - ((*_1847)(_1852)))); }else { if (((_1850 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1850 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1850 == ::mosek::fusion::SolutionStatus::Feasible) || (_1850 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1845)((_1844 + _1851))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(((*_1843)(_1851))))); }else { (((*_1845)((_1844 + _1851))) = 0.0); }}}}}void mosek::fusion::SymRangedVariable::set_values  ( long long _1853,    std::shared_ptr< monty::ndarray< int,1 > > _1854,    std::shared_ptr< monty::ndarray< long long,1 > > _1855,    int _1856,    std::shared_ptr< monty::ndarray< double,1 > > _1857,    bool _1858) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->set_values(_1853,_1854,_1855,_1856,_1857,_1858); }void mosek::fusion::p_SymRangedVariable::set_values( long long _1853,std::shared_ptr< monty::ndarray< int,1 > > _1854,std::shared_ptr< monty::ndarray< long long,1 > > _1855,int _1856,std::shared_ptr< monty::ndarray< double,1 > > _1857,bool _1858){ if (_1858){ long long _1859 = (long long)1; int _1860 = (int)((_1855)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1861 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1853,_1854,_1855); int _8084 = (int)0; int _8085 = _1860; for (int _1862 = _8084;_1862<_8085;++_1862){ (_1859 = (_1859 * ((*_1854)(_1862)))); }if (nativeidxs){ int _1863 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1864 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8086; for (long long _1865=(int)0, _8087=_1859; _1865 < _8087;++_1865)_8086.push_back(((*nativeidxs)(tril_lin_idx(_1861->next())))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8086.size()),_8086.begin(),_8086.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1866 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1856 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8088; for (int _1867=(int)0, _8089=_1863; _1867 < _8089;++_1867)_8088.push_back(((*_1857)((_1856 + _1867)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8088.size()),_8088.begin(),_8088.end())); })()); else return (_1857); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1864,_1866); }else { std::shared_ptr< monty::ndarray< int,1 > > _1868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1859))); int _8090 = (int)0; long long _8091 = _1859; for (long long _1869 = _8090;_1869<_8091;++_1869){ _pubthis->inst(_1861->next(),_1869,_1868,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1870 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8092; for (long long _1871=(int)0, _8093=_1859; _1871 < _8093;++_1871)_8092.push_back(((*_1857)((_1856 + _1871)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8092.size()),_8092.begin(),_8092.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1868,_1870); }}else { }}void mosek::fusion::SymRangedVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1872,    std::shared_ptr< monty::ndarray< double,1 > > _1873,    bool _1874) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->set_values(_1872,_1873,_1874); }void mosek::fusion::p_SymRangedVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1872,std::shared_ptr< monty::ndarray< double,1 > > _1873,bool _1874){ if (_1874){ if (nativeidxs){ int _1875 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1876 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8094; for (int _1877=(int)0, _8095=_1875; _1877 < _8095;++_1877)_8094.push_back(((*nativeidxs)(tril_lin_idx(((*_1872)(_1877)))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8094.size()),_8094.begin(),_8094.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1878 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8096; for (int _1879=(int)0, _8097=_1875; _1879 < _8097;++_1879)_8096.push_back(((*_1873)(_1879))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8096.size()),_8096.begin(),_8096.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1876,_1878); }else { std::shared_ptr< monty::ndarray< int,1 > > _1880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1872)->size(0))))); int _8098 = (int)0; int _8099 = (int)((_1872)->size(0)); for (int _1881 = _8098;_1881<_8099;++_1881){ _pubthis->inst(((*_1872)(_1881)),(long long)(_1881),_1880,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1882 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8100; for (int _1883=(int)0, _8101=(int)((_1872)->size(0)); _1883 < _8101;++_1883)_8100.push_back(((*_1873)(_1883))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8100.size()),_8100.begin(),_8100.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1880,_1882); }}else { }}void mosek::fusion::SymRangedVariable::values  ( long long _1884,    std::shared_ptr< monty::ndarray< int,1 > > _1885,    std::shared_ptr< monty::ndarray< long long,1 > > _1886,    int _1887,    std::shared_ptr< monty::ndarray< double,1 > > _1888,    bool _1889) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->values(_1884,_1885,_1886,_1887,_1888,_1889); }void mosek::fusion::p_SymRangedVariable::values( long long _1884,std::shared_ptr< monty::ndarray< int,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886,int _1887,std::shared_ptr< monty::ndarray< double,1 > > _1888,bool _1889){ if (_1889){ long long _1890 = (long long)1; int _1891 = (int)((_1886)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1892 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1884,_1885,_1886); std::shared_ptr< monty::ndarray< double,1 > > _1893 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8102 = (int)0; int _8103 = _1891; for (int _1894 = _8102;_1894<_8103;++_1894){ (_1890 = (_1890 * ((*_1885)(_1894)))); }if (nativeidxs){ long long _8104 = (long long)0; long long _8105 = _1890; for (long long _1895 = _8104;_1895<_8105;++_1895){ (((*_1888)((_1895 + _1887))) = ((*_1893)(((*nativeidxs)(tril_lin_idx(_1892->get())))))); _1892->inc(); }}else { mosek::fusion::SolutionStatus _1896 = model->getPrimalSolutionStatus(); int _8106 = (int)0; int _8107 = (int)_1890; for (int _1897 = _8106;_1897<_8107;++_1897){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1892->get())){ (((*_1888)(_1897)) = ((*_1893)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_1892->get()))))); }else { if (((_1896 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1896 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1896 == ::mosek::fusion::SolutionStatus::Feasible) || (_1896 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1888)((_1887 + _1897))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(tril_idx(_1892->get()))); }else { (((*_1888)((_1887 + _1897))) = 0.0); }}_1892->inc(); }}}else { dual_values(_1884,_1885,_1886,_1887,_1888); }}void mosek::fusion::SymRangedVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1898,    int _1899,    std::shared_ptr< monty::ndarray< double,1 > > _1900,    bool _1901) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->values(_1898,_1899,_1900,_1901); }void mosek::fusion::p_SymRangedVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1898,int _1899,std::shared_ptr< monty::ndarray< double,1 > > _1900,bool _1901){ if (_1901){ std::shared_ptr< monty::ndarray< double,1 > > _1902 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8108 = (int)0; int _8109 = (int)((_1898)->size(0)); for (int _1903 = _8108;_1903<_8109;++_1903){ (((*_1900)((_1899 + _1903))) = ((*_1902)(((*nativeidxs)(tril_lin_idx(((*_1898)(_1903)))))))); }}else { mosek::fusion::SolutionStatus _1904 = model->getPrimalSolutionStatus(); if (((_1904 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1904 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1904 == ::mosek::fusion::SolutionStatus::Feasible) || (_1904 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8110 = (int)0; int _8111 = (int)((_1898)->size(0)); for (int _1905 = _8110;_1905<_8111;++_1905){ long long _1906 = ((*_1898)(_1905)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1906)){ (((*_1900)((_1899 + _1905))) = ((*_1902)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1906)))); }else { (((*_1900)((_1899 + _1905))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1906)); }}}else { int _8112 = (int)0; int _8113 = (int)((_1898)->size(0)); for (int _1907 = _8112;_1907<_8113;++_1907){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1898)(_1907)))){ (((*_1900)((_1899 + _1907))) = ((*_1902)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1898)(_1907)))))); }else { (((*_1900)((_1899 + _1907))) = 0.0); }}}}}else { dual_values(_1898,_1899,_1900); }}long long mosek::fusion::p_SymRangedVariable::tril_idx( long long _1908){ long long _1909 = (_1908 / dim); long long _1910 = (_1908 % dim); if ((_1910 > _1909)){ return ((_1910 * dim) + _1909); }else { return _1908; }}long long mosek::fusion::p_SymRangedVariable::tril_lin_idx( long long _1911){ long long _1912 = (_1911 / dim); long long _1913 = (_1911 % dim); if ((_1913 > _1912)){ return (((_1913 * (_1913 + (int)1)) / (int)2) + _1912); }else { return (((_1912 * (_1912 + (int)1)) / (int)2) + _1913); }}void mosek::fusion::SymRangedVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1914) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->make_continuous(_1914); }void mosek::fusion::p_SymRangedVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1914){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8114; for (int _1915=(int)0, _8115=(int)((_1914)->size(0)); _1915 < _8115;++_1915)_8114.push_back(((*nativeidxs)(((*_1914)(_1915))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8114.size()),_8114.begin(),_8114.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1916 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1914)->size(0))))); _pubthis->inst(_1914,(int)0,(int)((_1914)->size(0)),(long long)((int)0),(long long)((int)0),_1916,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_1916); }}void mosek::fusion::SymRangedVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1917) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->make_integer(_1917); }void mosek::fusion::p_SymRangedVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1917){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8116; for (int _1918=(int)0, _8117=(int)((_1917)->size(0)); _1918 < _8117;++_1918)_8116.push_back(((*nativeidxs)(((*_1917)(_1918))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8116.size()),_8116.begin(),_8116.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1917)->size(0))))); _pubthis->inst(_1917,(int)0,(int)((_1917)->size(0)),(long long)((int)0),(long long)((int)0),_1919,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_1919); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _1920){ return ::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(_pubthis,_1920); }void mosek::fusion::p_SymRangedVariable::destroy(){nativeidxs.reset();dom.reset();idxmap.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::SymRangedVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::slice(int _2618,int _2619)
{ return mosek::fusion::ModelVariable::slice(_2618,_2619); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2745)
{ return mosek::fusion::BaseVariable::pick(_2745); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2748)
{ return mosek::fusion::BaseVariable::pick(_2748); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::SymRangedVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymRangedVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2738,std::shared_ptr< monty::ndarray< int,1 > > _2739,std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2738,_2739,_2740); }
void mosek::fusion::SymRangedVariable::elementName(long long _2609,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2610)
{ mosek::fusion::ModelVariable::elementName(_2609,_2610); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2737)
{ return mosek::fusion::BaseVariable::index(_2737); }
void mosek::fusion::SymRangedVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2731,int _2732,int _2733)
{ return mosek::fusion::BaseVariable::index(_2731,_2732,_2733); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2734,int _2735)
{ return mosek::fusion::BaseVariable::index(_2734,_2735); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymRangedVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2736)
{ return mosek::fusion::BaseVariable::index(_2736); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2742,std::shared_ptr< monty::ndarray< int,1 > > _2743)
{ return mosek::fusion::BaseVariable::pick(_2742,_2743); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymRangedVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::SymRangedVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::SymRangedVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2722)
{ mosek::fusion::BaseVariable::setLevel(_2722); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::diag(int _2751)
{ return mosek::fusion::BaseVariable::diag(_2751); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymRangedVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2611,std::shared_ptr< monty::ndarray< int,1 > > _2612)
{ return mosek::fusion::ModelVariable::slice(_2611,_2612); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SymRangedVariable::elementDesc(long long _2673,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2674)
{ return mosek::fusion::BaseVariable::elementDesc(_2673,_2674); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::antidiag(int _2750)
{ return mosek::fusion::BaseVariable::antidiag(_2750); }
long long mosek::fusion::SymRangedVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::SymRangedVariable::values(int _2705,std::shared_ptr< monty::ndarray< double,1 > > _2706,bool _2707)
{ mosek::fusion::BaseVariable::values(_2705,_2706,_2707); }
mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1921,    monty::rc_ptr< ::mosek::fusion::Model > _1922){ return new mosek::fusion::RangedVariable(_1921,_1922); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1921,    monty::rc_ptr< ::mosek::fusion::Model > _1922) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1921,_1922); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1921,    monty::rc_ptr< ::mosek::fusion::Model > _1922){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1921,_1922);(dom = mosek::fusion::p_RangedVariable::_get_impl(_1921)->dom); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_RangedVariable::_get_impl(_1921)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_RangedVariable::_get_impl(_1921)->idxmap.get())->clone()); else return (nullptr); })()); (nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_RangedVariable::_get_impl(_1921)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8118; for (int _1923=(int)0, _8119=(int)((mosek::fusion::p_RangedVariable::_get_impl(_1921)->nativeidxs)->size(0)); _1923 < _8119;++_1923)_8118.push_back(((*mosek::fusion::p_RangedVariable::_get_impl(_1921)->nativeidxs)(_1923))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8118.size()),_8118.begin(),_8118.end())); })()); else return (nullptr); })()); (names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1921)->names_flushed); }}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1924,    const std::string &  _1925,    monty::rc_ptr< ::mosek::fusion::Set > _1926,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1927,    std::shared_ptr< monty::ndarray< int,1 > > _1928,    long long _1929){ return new mosek::fusion::RangedVariable(_1924,_1925,_1926,_1927,_1928,_1929); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1924,    const std::string &  _1925,    monty::rc_ptr< ::mosek::fusion::Set > _1926,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1927,    std::shared_ptr< monty::ndarray< int,1 > > _1928,    long long _1929) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1924,_1925,_1926,_1927,_1928,_1929); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1924,    const std::string &  _1925,    monty::rc_ptr< ::mosek::fusion::Set > _1926,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1927,    std::shared_ptr< monty::ndarray< int,1 > > _1928,    long long _1929){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1924,_1925,_1926,_1929);(nativeidxs = _1928); if (! _1928){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _1927); (names_flushed = false); }}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc  ( long long _1930,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1931) { return mosek::fusion::p_RangedVariable::_get_impl(this)->elementDesc(_1930,_1931); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::elementDesc( long long _1930,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1931){ _pubthis->elementName(_1930,_1931); mosek::fusion::p_RangeDomain::_get_impl(dom.get())->domainToString(_1930,_1931); return _1931; }void mosek::fusion::p_RangedVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8120 = (int)0; int _8121 = (int)((nativeidxs)->size(0)); for (int _1932 = _8120;_1932<_8121;++_1932){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_1932)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1932))).get())->a(std::string ("]")).get())->toString()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _1933 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _1934 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8122 = (int)0; int _8123 = (int)((_1933)->size(0)); for (int _1935 = _8122;_1935<_8123;++_1935){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_1934)(_1935)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1935))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::RangedVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1936,    int _1937,    int _1938,    long long _1939,    long long _1940,    std::shared_ptr< monty::ndarray< int,1 > > _1941,    std::shared_ptr< monty::ndarray< int,1 > > _1942,    std::shared_ptr< monty::ndarray< int,1 > > _1943) { mosek::fusion::p_RangedVariable::_get_impl(this)->inst(_1936,_1937,_1938,_1939,_1940,_1941,_1942,_1943); }void mosek::fusion::p_RangedVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1936,int _1937,int _1938,long long _1939,long long _1940,std::shared_ptr< monty::ndarray< int,1 > > _1941,std::shared_ptr< monty::ndarray< int,1 > > _1942,std::shared_ptr< monty::ndarray< int,1 > > _1943){ if (nativeidxs){ int _8124 = _1937; int _8125 = _1938; for (int _1944 = _8124;_1944<_8125;++_1944){ (((*_1941)(((_1940 + _1944) - _1937))) = ((*nativeidxs)(((*_1936)((_1944 - _1939)))))); }}else { int _8126 = _1937; int _8127 = _1938; for (int _1945 = _8126;_1945<_8127;++_1945){ if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1936)(((long long)_1945 - _1939)))))){ int _1946 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(::mosek::fusion::ModelVariable::t(_pubthis),((*_1936)((_1945 - _1939))),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(((*_1936)((_1945 - _1939)))),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1936)((_1945 - _1939))))); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_1936)((_1945 - _1939))),_1946); (((*_1941)(((_1940 + _1945) - _1937))) = _1946); (names_flushed = false); }else { (((*_1941)(((_1940 + _1945) - _1937))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1936)(((long long)_1945 - _1939))))); }}}}void mosek::fusion::RangedVariable::inst  ( long long _1947,    long long _1948,    std::shared_ptr< monty::ndarray< int,1 > > _1949,    std::shared_ptr< monty::ndarray< int,1 > > _1950,    std::shared_ptr< monty::ndarray< int,1 > > _1951) { mosek::fusion::p_RangedVariable::_get_impl(this)->inst(_1947,_1948,_1949,_1950,_1951); }void mosek::fusion::p_RangedVariable::inst( long long _1947,long long _1948,std::shared_ptr< monty::ndarray< int,1 > > _1949,std::shared_ptr< monty::ndarray< int,1 > > _1950,std::shared_ptr< monty::ndarray< int,1 > > _1951){ if (((_1947 < (long long)0) || (_1947 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}if (nativeidxs){ (((*_1949)(_1948)) = ((*nativeidxs)(_1947))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1947))){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _1952 = _pubthis; int _1953 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(_1952,_1947,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1947),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1947)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1947,_1953); (((*_1949)(_1948)) = _1953); (names_flushed = false); }else { (((*_1949)(_1948)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1947)); }}}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::RangedVariable::upperBoundVar  ( ) { return mosek::fusion::p_RangedVariable::_get_impl(this)->upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_RangedVariable::upperBoundVar( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1954 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1954)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _1955 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_1955 > (int)0);( -- _1955 )){ (((*_1954)((_1955 - (int)1))) = (((*_1954)(_1955)) * (long long)shape_p->dim(_1955))); }}return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis,shape_p,(long long)0,_1954,false); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::RangedVariable::lowerBoundVar  ( ) { return mosek::fusion::p_RangedVariable::_get_impl(this)->lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_RangedVariable::lowerBoundVar( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1956 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1956)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _1957 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_1957 > (int)0);( -- _1957 )){ (((*_1956)((_1957 - (int)1))) = (((*_1956)(_1957)) * shape_p->dim(_1957))); }}return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis,shape_p,(long long)0,_1956,true); }void mosek::fusion::p_RangedVariable::dual_u( long long _1958,std::shared_ptr< monty::ndarray< int,1 > > _1959,std::shared_ptr< monty::ndarray< long long,1 > > _1960,int _1961,std::shared_ptr< monty::ndarray< double,1 > > _1962){ long long _1963 = (long long)1; int _1964 = (int)((_1960)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1965 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1958,_1959,_1960); std::shared_ptr< monty::ndarray< double,1 > > _1966 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8128 = (int)0; int _8129 = _1964; for (int _1967 = _8128;_1967<_8129;++_1967){ (_1963 = (_1963 * ((*_1959)(_1967)))); }if (nativeidxs){ long long _8130 = (long long)0; long long _8131 = _1963; for (long long _1968 = _8130;_1968<_8131;++_1968){ int _1969 = ((*nativeidxs)(_1965->get())); (((*_1962)((_1968 + _1961))) = ((*_1966)(_1969))); _1965->inc(); }}else { mosek::fusion::SolutionStatus _1970 = model->getPrimalSolutionStatus(); int _8132 = (int)0; int _8133 = (int)_1963; for (int _1971 = _8132;_1971<_8133;++_1971){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1965->get())){ int _1972 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1965->get()); (((*_1962)(_1971)) = ((*_1966)(_1972))); }else { if (((_1970 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1970 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1970 == ::mosek::fusion::SolutionStatus::Feasible) || (_1970 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1962)((_1961 + _1971))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1965->get())); }else { (((*_1962)((_1961 + _1971))) = 0.0); }}_1965->inc(); }}}void mosek::fusion::p_RangedVariable::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _1973,int _1974,std::shared_ptr< monty::ndarray< double,1 > > _1975){ std::shared_ptr< monty::ndarray< double,1 > > _1976 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8134 = (int)0; int _8135 = (int)((_1973)->size(0)); for (int _1977 = _8134;_1977<_8135;++_1977){ int _1978 = ((*nativeidxs)(((*_1973)(_1977)))); (((*_1975)((_1974 + _1977))) = ((*_1976)(_1978))); }}else { mosek::fusion::SolutionStatus _1979 = model->getPrimalSolutionStatus(); int _8136 = (int)0; int _8137 = (int)((_1973)->size(0)); for (int _1980 = _8136;_1980<_8137;++_1980){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1973)(_1980)))){ int _1981 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1973)(_1980))); (((*_1975)((_1974 + _1980))) = ((*_1976)(_1981))); }else { if (((_1979 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1979 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1979 == ::mosek::fusion::SolutionStatus::Feasible) || (_1979 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1975)((_1974 + _1980))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1973)(_1980)))); }else { (((*_1975)((_1974 + _1980))) = 0.0); }}}}}void mosek::fusion::p_RangedVariable::dual_l( long long _1982,std::shared_ptr< monty::ndarray< int,1 > > _1983,std::shared_ptr< monty::ndarray< long long,1 > > _1984,int _1985,std::shared_ptr< monty::ndarray< double,1 > > _1986){ long long _1987 = (long long)1; int _1988 = (int)((_1984)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1989 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1982,_1983,_1984); std::shared_ptr< monty::ndarray< double,1 > > _1990 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); int _8138 = (int)0; int _8139 = _1988; for (int _1991 = _8138;_1991<_8139;++_1991){ (_1987 = (_1987 * ((*_1983)(_1991)))); }if (nativeidxs){ long long _8140 = (long long)0; long long _8141 = _1987; for (long long _1992 = _8140;_1992<_8141;++_1992){ int _1993 = ((*nativeidxs)(_1989->get())); (((*_1986)((_1992 + _1985))) = ((*_1990)(_1993))); _1989->inc(); }}else { mosek::fusion::SolutionStatus _1994 = model->getPrimalSolutionStatus(); int _8142 = (int)0; int _8143 = (int)_1987; for (int _1995 = _8142;_1995<_8143;++_1995){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1989->get())){ int _1996 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1989->get()); (((*_1986)(_1995)) = ((*_1990)(_1996))); }else { if (((_1994 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1994 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1994 == ::mosek::fusion::SolutionStatus::Feasible) || (_1994 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1986)((_1985 + _1995))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1989->get())); }else { (((*_1986)((_1985 + _1995))) = 0.0); }}_1989->inc(); }}}void mosek::fusion::p_RangedVariable::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _1997,int _1998,std::shared_ptr< monty::ndarray< double,1 > > _1999){ std::shared_ptr< monty::ndarray< double,1 > > _2000 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8144 = (int)0; int _8145 = (int)((_1997)->size(0)); for (int _2001 = _8144;_2001<_8145;++_2001){ int _2002 = ((*nativeidxs)(((*_1997)(_2001)))); (((*_1999)((_1998 + _2001))) = ((*_2000)(_2002))); }}else { mosek::fusion::SolutionStatus _2003 = model->getPrimalSolutionStatus(); int _8146 = (int)0; int _8147 = (int)((_1997)->size(0)); for (int _2004 = _8146;_2004<_8147;++_2004){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1997)(_2004)))){ int _2005 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1997)(_2004))); (((*_1999)((_1998 + _2004))) = ((*_2000)(_2005))); }else { if (((_2003 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2003 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2003 == ::mosek::fusion::SolutionStatus::Feasible) || (_2003 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1999)((_1998 + _2004))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1997)(_2004)))); }else { (((*_1999)((_1998 + _2004))) = 0.0); }}}}}void mosek::fusion::p_RangedVariable::dual_values( long long _2006,std::shared_ptr< monty::ndarray< int,1 > > _2007,std::shared_ptr< monty::ndarray< long long,1 > > _2008,int _2009,std::shared_ptr< monty::ndarray< double,1 > > _2010){ long long _2011 = (long long)1; int _2012 = (int)((_2008)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2013 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2006,_2007,_2008); std::shared_ptr< monty::ndarray< double,1 > > _2014 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2015 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8148 = (int)0; int _8149 = _2012; for (int _2016 = _8148;_2016<_8149;++_2016){ (_2011 = (_2011 * ((*_2007)(_2016)))); }if (nativeidxs){ long long _8150 = (long long)0; long long _8151 = _2011; for (long long _2017 = _8150;_2017<_8151;++_2017){ int _2018 = ((*nativeidxs)(_2013->get())); (((*_2010)((_2017 + _2009))) = (((*_2014)(_2018)) - ((*_2015)(_2018)))); _2013->inc(); }}else { mosek::fusion::SolutionStatus _2019 = model->getPrimalSolutionStatus(); int _8152 = (int)0; int _8153 = (int)_2011; for (int _2020 = _8152;_2020<_8153;++_2020){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2013->get())){ int _2021 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2013->get()); (((*_2010)(_2020)) = (((*_2014)(_2021)) - ((*_2015)(_2021)))); }else { if (((_2019 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2019 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2019 == ::mosek::fusion::SolutionStatus::Feasible) || (_2019 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2010)((_2009 + _2020))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_2013->get())); }else { (((*_2010)((_2009 + _2020))) = 0.0); }}_2013->inc(); }}}void mosek::fusion::p_RangedVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2022,int _2023,std::shared_ptr< monty::ndarray< double,1 > > _2024){ std::shared_ptr< monty::ndarray< double,1 > > _2025 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2026 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8154 = (int)0; int _8155 = (int)((_2022)->size(0)); for (int _2027 = _8154;_2027<_8155;++_2027){ int _2028 = ((*nativeidxs)(((*_2022)(_2027)))); (((*_2024)((_2023 + _2027))) = (((*_2025)(_2028)) - ((*_2026)(_2028)))); }}else { mosek::fusion::SolutionStatus _2029 = model->getPrimalSolutionStatus(); int _8156 = (int)0; int _8157 = (int)((_2022)->size(0)); for (int _2030 = _8156;_2030<_8157;++_2030){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2022)(_2030)))){ int _2031 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2022)(_2030))); (((*_2024)((_2023 + _2030))) = (((*_2025)(_2031)) - ((*_2026)(_2031)))); }else { if (((_2029 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2029 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2029 == ::mosek::fusion::SolutionStatus::Feasible) || (_2029 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2024)((_2023 + _2030))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_2022)(_2030)))); }else { (((*_2024)((_2023 + _2030))) = 0.0); }}}}}void mosek::fusion::RangedVariable::set_values  ( long long _2032,    std::shared_ptr< monty::ndarray< int,1 > > _2033,    std::shared_ptr< monty::ndarray< long long,1 > > _2034,    int _2035,    std::shared_ptr< monty::ndarray< double,1 > > _2036,    bool _2037) { mosek::fusion::p_RangedVariable::_get_impl(this)->set_values(_2032,_2033,_2034,_2035,_2036,_2037); }void mosek::fusion::p_RangedVariable::set_values( long long _2032,std::shared_ptr< monty::ndarray< int,1 > > _2033,std::shared_ptr< monty::ndarray< long long,1 > > _2034,int _2035,std::shared_ptr< monty::ndarray< double,1 > > _2036,bool _2037){ if (_2037){ long long _2038 = (long long)1; int _2039 = (int)((_2034)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2040 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2032,_2033,_2034); int _8158 = (int)0; int _8159 = _2039; for (int _2041 = _8158;_2041<_8159;++_2041){ (_2038 = (_2038 * ((*_2033)(_2041)))); }if (nativeidxs){ int _2042 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2043 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8160; for (long long _2044=(int)0, _8161=_2038; _2044 < _8161;++_2044)_8160.push_back(((*nativeidxs)(_2040->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8160.size()),_8160.begin(),_8160.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2045 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2035 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8162; for (int _2046=(int)0, _8163=_2042; _2046 < _8163;++_2046)_8162.push_back(((*_2036)((_2035 + _2046)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8162.size()),_8162.begin(),_8162.end())); })()); else return (_2036); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2043,_2045); }else { std::shared_ptr< monty::ndarray< int,1 > > _2047 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2038))); int _8164 = (int)0; long long _8165 = _2038; for (long long _2048 = _8164;_2048<_8165;++_2048){ _pubthis->inst(_2040->next(),_2048,_2047,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2049 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8166; for (long long _2050=(int)0, _8167=_2038; _2050 < _8167;++_2050)_8166.push_back(((*_2036)((_2035 + _2050)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8166.size()),_8166.begin(),_8166.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2047,_2049); }}else { }}void mosek::fusion::RangedVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2051,    std::shared_ptr< monty::ndarray< double,1 > > _2052,    bool _2053) { mosek::fusion::p_RangedVariable::_get_impl(this)->set_values(_2051,_2052,_2053); }void mosek::fusion::p_RangedVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2051,std::shared_ptr< monty::ndarray< double,1 > > _2052,bool _2053){ if (_2053){ if (nativeidxs){ int _2054 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2055 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8168; for (int _2056=(int)0, _8169=_2054; _2056 < _8169;++_2056)_8168.push_back(((*nativeidxs)(((*_2051)(_2056))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8168.size()),_8168.begin(),_8168.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2057 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8170; for (int _2058=(int)0, _8171=_2054; _2058 < _8171;++_2058)_8170.push_back(((*_2052)(_2058))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8170.size()),_8170.begin(),_8170.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2055,_2057); }else { std::shared_ptr< monty::ndarray< int,1 > > _2059 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2051)->size(0))))); int _8172 = (int)0; int _8173 = (int)((_2051)->size(0)); for (int _2060 = _8172;_2060<_8173;++_2060){ _pubthis->inst(((*_2051)(_2060)),(long long)(_2060),_2059,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2061 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8174; for (int _2062=(int)0, _8175=(int)((_2051)->size(0)); _2062 < _8175;++_2062)_8174.push_back(((*_2052)(_2062))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8174.size()),_8174.begin(),_8174.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2059,_2061); }}else { }}void mosek::fusion::RangedVariable::values  ( long long _2063,    std::shared_ptr< monty::ndarray< int,1 > > _2064,    std::shared_ptr< monty::ndarray< long long,1 > > _2065,    int _2066,    std::shared_ptr< monty::ndarray< double,1 > > _2067,    bool _2068) { mosek::fusion::p_RangedVariable::_get_impl(this)->values(_2063,_2064,_2065,_2066,_2067,_2068); }void mosek::fusion::p_RangedVariable::values( long long _2063,std::shared_ptr< monty::ndarray< int,1 > > _2064,std::shared_ptr< monty::ndarray< long long,1 > > _2065,int _2066,std::shared_ptr< monty::ndarray< double,1 > > _2067,bool _2068){ if (_2068){ long long _2069 = (long long)1; int _2070 = (int)((_2065)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2071 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2063,_2064,_2065); std::shared_ptr< monty::ndarray< double,1 > > _2072 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8176 = (int)0; int _8177 = _2070; for (int _2073 = _8176;_2073<_8177;++_2073){ (_2069 = (_2069 * ((*_2064)(_2073)))); }if (nativeidxs){ long long _8178 = (long long)0; long long _8179 = _2069; for (long long _2074 = _8178;_2074<_8179;++_2074){ (((*_2067)((_2074 + _2066))) = ((*_2072)(((*nativeidxs)(_2071->get()))))); _2071->inc(); }}else { mosek::fusion::SolutionStatus _2075 = model->getPrimalSolutionStatus(); int _8180 = (int)0; int _8181 = (int)_2069; for (int _2076 = _8180;_2076<_8181;++_2076){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2071->get())){ (((*_2067)(_2076)) = ((*_2072)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2071->get())))); }else { if (((_2075 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2075 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2075 == ::mosek::fusion::SolutionStatus::Feasible) || (_2075 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2067)((_2066 + _2076))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_2071->get())); }else { (((*_2067)((_2066 + _2076))) = 0.0); }}_2071->inc(); }}}else { dual_values(_2063,_2064,_2065,_2066,_2067); }}void mosek::fusion::RangedVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2077,    int _2078,    std::shared_ptr< monty::ndarray< double,1 > > _2079,    bool _2080) { mosek::fusion::p_RangedVariable::_get_impl(this)->values(_2077,_2078,_2079,_2080); }void mosek::fusion::p_RangedVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2077,int _2078,std::shared_ptr< monty::ndarray< double,1 > > _2079,bool _2080){ if (_2080){ std::shared_ptr< monty::ndarray< double,1 > > _2081 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8182 = (int)0; int _8183 = (int)((_2077)->size(0)); for (int _2082 = _8182;_2082<_8183;++_2082){ (((*_2079)((_2078 + _2082))) = ((*_2081)(((*nativeidxs)(((*_2077)(_2082))))))); }}else { mosek::fusion::SolutionStatus _2083 = model->getPrimalSolutionStatus(); int _8184 = (int)0; int _8185 = (int)((_2077)->size(0)); for (int _2084 = _8184;_2084<_8185;++_2084){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2077)(_2084)))){ (((*_2079)((_2078 + _2084))) = ((*_2081)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2077)(_2084)))))); }else { if (((_2083 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2083 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2083 == ::mosek::fusion::SolutionStatus::Feasible) || (_2083 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2079)((_2078 + _2084))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_2077)(_2084)))); }else { (((*_2079)((_2078 + _2084))) = 0.0); }}}}}else { dual_values(_2077,_2078,_2079); }}void mosek::fusion::RangedVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2085) { mosek::fusion::p_RangedVariable::_get_impl(this)->make_continuous(_2085); }void mosek::fusion::p_RangedVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2085){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8186; for (int _2086=(int)0, _8187=(int)((_2085)->size(0)); _2086 < _8187;++_2086)_8186.push_back(((*nativeidxs)(((*_2085)(_2086))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8186.size()),_8186.begin(),_8186.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2087 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2085)->size(0))))); _pubthis->inst(_2085,(int)0,(int)((_2085)->size(0)),(long long)((int)0),(long long)((int)0),_2087,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2087); }}void mosek::fusion::RangedVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2088) { mosek::fusion::p_RangedVariable::_get_impl(this)->make_integer(_2088); }void mosek::fusion::p_RangedVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2088){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8188; for (int _2089=(int)0, _8189=(int)((_2088)->size(0)); _2089 < _8189;++_2089)_8188.push_back(((*nativeidxs)(((*_2088)(_2089))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8188.size()),_8188.begin(),_8188.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2090 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2088)->size(0))))); _pubthis->inst(_2088,(int)0,(int)((_2088)->size(0)),(long long)((int)0),(long long)((int)0),_2090,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2090); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2091){ return ::mosek::fusion::p_RangedVariable::_new_RangedVariable(_pubthis,_2091); }void mosek::fusion::p_RangedVariable::destroy(){nativeidxs.reset();dom.reset();idxmap.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2092,    monty::rc_ptr< ::mosek::fusion::Model > _2093){ return new mosek::fusion::LinearPSDVariable(_2092,_2093); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2092,    monty::rc_ptr< ::mosek::fusion::Model > _2093) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2092,_2093); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2092,    monty::rc_ptr< ::mosek::fusion::Model > _2093){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2092,_2093);(blocksize = mosek::fusion::p_LinearPSDVariable::_get_impl(_2092)->blocksize); (conesize = mosek::fusion::p_LinearPSDVariable::_get_impl(_2092)->conesize); (coneidx = mosek::fusion::p_LinearPSDVariable::_get_impl(_2092)->coneidx); (sdpvardim = mosek::fusion::p_LinearPSDVariable::_get_impl(_2092)->sdpvardim); (numcones = mosek::fusion::p_LinearPSDVariable::_get_impl(_2092)->numcones); }}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2094,    const std::string &  _2095,    int _2096,    monty::rc_ptr< ::mosek::fusion::Set > _2097,    int _2098,    long long _2099){ return new mosek::fusion::LinearPSDVariable(_2094,_2095,_2096,_2097,_2098,_2099); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2094,    const std::string &  _2095,    int _2096,    monty::rc_ptr< ::mosek::fusion::Set > _2097,    int _2098,    long long _2099) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2094,_2095,_2096,_2097,_2098,_2099); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2094,    const std::string &  _2095,    int _2096,    monty::rc_ptr< ::mosek::fusion::Set > _2097,    int _2098,    long long _2099){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2094,_2095,_2097,_2099);(blocksize = _2097->dim((int)0)); (conesize = _2097->dim((int)0)); (coneidx = _2098); (sdpvardim = _2096); (numcones = (int)1); int _8190 = (int)1; int _8191 = mosek::fusion::p_Set::_get_impl(_2097)->nd; for (int _2100 = _8190;_2100<_8191;++_2100){ (numcones *= _2097->dim(_2100)); }}}void mosek::fusion::p_LinearPSDVariable::flushNames( ){ }std::string mosek::fusion::LinearPSDVariable::toString  ( ) { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2101 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2101.get())->a(std::string ("PSDVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2101.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2101.get())->a(shape_p->dim((int)0)); int _8192 = (int)1; int _8193 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2102 = _8192;_2102<_8193;++_2102){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2101.get())->a(std::string (",")).get())->a(shape_p->dim(_2102)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2101.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2101.get())->toString(); }void mosek::fusion::LinearPSDVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2103,    int _2104,    int _2105,    long long _2106,    long long _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108,    std::shared_ptr< monty::ndarray< int,1 > > _2109,    std::shared_ptr< monty::ndarray< int,1 > > _2110) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->inst(_2103,_2104,_2105,_2106,_2107,_2108,_2109,_2110); }void mosek::fusion::p_LinearPSDVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2103,int _2104,int _2105,long long _2106,long long _2107,std::shared_ptr< monty::ndarray< int,1 > > _2108,std::shared_ptr< monty::ndarray< int,1 > > _2109,std::shared_ptr< monty::ndarray< int,1 > > _2110){ int _8194 = _2104; int _8195 = _2105; for (int _2111 = _8194;_2111<_8195;++_2111){ if (((((*_2103)(_2111)) < _2106) || (((*_2103)(_2111)) >= (mosek::fusion::p_Set::_get_impl(shape_p)->size + _2106)))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}long long _2112 = _2107; int _2113 = sdpvardim; int _8196 = _2104; int _8197 = _2105; for (int _2114 = _8196;_2114<_8197;++_2114){ long long _2115 = (((*_2103)(_2114)) - _2106); int _2116 = (int)(_2115 / blocksize); long long _2117 = (_2115 % blocksize); (((*_2108)(_2112)) = (- (((int)1 + coneidx) + _2116))); int _2118 = (int)((_2113 + 0.5) - ::mosek::fusion::Utils::Tools::sqrt((((_2113 + 0.5) * (_2113 + 0.5)) - (_2117 * (int)2)))); int _2119 = (int)(_2117 - ((_2118 * ((((int)2 * _2113) - _2118) - (int)1)) / (int)2)); if ((_2119 >= _2118)){ (((*_2109)(_2112)) = _2119); (((*_2110)(_2112)) = _2118); }else { (((*_2109)(_2112)) = _2118); (((*_2110)(_2112)) = _2119); }( ++ _2112 ); }}void mosek::fusion::LinearPSDVariable::inst  ( long long _2120,    long long _2121,    std::shared_ptr< monty::ndarray< int,1 > > _2122,    std::shared_ptr< monty::ndarray< int,1 > > _2123,    std::shared_ptr< monty::ndarray< int,1 > > _2124) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->inst(_2120,_2121,_2122,_2123,_2124); }void mosek::fusion::p_LinearPSDVariable::inst( long long _2120,long long _2121,std::shared_ptr< monty::ndarray< int,1 > > _2122,std::shared_ptr< monty::ndarray< int,1 > > _2123,std::shared_ptr< monty::ndarray< int,1 > > _2124){ if (((_2120 < (int)0) || (_2120 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}int _2125 = sdpvardim; int _2126 = (int)(_2120 / blocksize); long long _2127 = (_2120 % blocksize); (((*_2122)(_2121)) = (- (((int)1 + coneidx) + _2126))); int _2128 = (int)((_2125 + 0.5) - ::mosek::fusion::Utils::Tools::sqrt((((_2125 + 0.5) * (_2125 + 0.5)) - (_2127 * (int)2)))); int _2129 = (int)(_2127 - ((_2128 * ((((int)2 * _2125) + (int)1) + _2128)) / (int)2)); if ((_2129 >= _2128)){ (((*_2123)(_2121)) = _2129); (((*_2124)(_2121)) = _2128); }else { (((*_2123)(_2121)) = _2128); (((*_2124)(_2121)) = _2129); }}void mosek::fusion::LinearPSDVariable::set_values  ( long long _2130,    std::shared_ptr< monty::ndarray< int,1 > > _2131,    std::shared_ptr< monty::ndarray< long long,1 > > _2132,    int _2133,    std::shared_ptr< monty::ndarray< double,1 > > _2134,    bool _2135) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->set_values(_2130,_2131,_2132,_2133,_2134,_2135); }void mosek::fusion::p_LinearPSDVariable::set_values( long long _2130,std::shared_ptr< monty::ndarray< int,1 > > _2131,std::shared_ptr< monty::ndarray< long long,1 > > _2132,int _2133,std::shared_ptr< monty::ndarray< double,1 > > _2134,bool _2135){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}void mosek::fusion::LinearPSDVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2136,    std::shared_ptr< monty::ndarray< double,1 > > _2137,    bool _2138) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->set_values(_2136,_2137,_2138); }void mosek::fusion::p_LinearPSDVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2136,std::shared_ptr< monty::ndarray< double,1 > > _2137,bool _2138){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}void mosek::fusion::LinearPSDVariable::values  ( long long _2139,    std::shared_ptr< monty::ndarray< int,1 > > _2140,    std::shared_ptr< monty::ndarray< long long,1 > > _2141,    int _2142,    std::shared_ptr< monty::ndarray< double,1 > > _2143,    bool _2144) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->values(_2139,_2140,_2141,_2142,_2143,_2144); }void mosek::fusion::p_LinearPSDVariable::values( long long _2139,std::shared_ptr< monty::ndarray< int,1 > > _2140,std::shared_ptr< monty::ndarray< long long,1 > > _2141,int _2142,std::shared_ptr< monty::ndarray< double,1 > > _2143,bool _2144){ long long _2145 = (long long)1; int _2146 = (int)((_2141)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2147 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2139,_2140,_2141); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2148 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2144) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _8198 = (int)0; int _8199 = _2146; for (int _2149 = _8198;_2149<_8199;++_2149){ (_2145 = (_2145 * ((*_2140)(_2149)))); }long long _8200 = (long long)0; long long _8201 = _2145; for (long long _2150 = _8200;_2150<_8201;++_2150){ { long long _2151 = (_2147->get() / blocksize); long long _2152 = (_2147->get() % blocksize); (((*_2143)(_2150)) = ((*((*_2148)(((long long)coneidx + _2151))))(_2152))); }_2147->inc(); }}void mosek::fusion::LinearPSDVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2153,    int _2154,    std::shared_ptr< monty::ndarray< double,1 > > _2155,    bool _2156) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->values(_2153,_2154,_2155,_2156); }void mosek::fusion::p_LinearPSDVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2153,int _2154,std::shared_ptr< monty::ndarray< double,1 > > _2155,bool _2156){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2157 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2156) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _8202 = (int)0; int _8203 = (int)((_2153)->size(0)); for (int _2158 = _8202;_2158<_8203;++_2158){ if (((((*_2153)(_2158)) < (int)0) || (((*_2153)(_2158)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}int _8204 = (int)0; int _8205 = (int)((_2153)->size(0)); for (int _2159 = _8204;_2159<_8205;++_2159){ long long _2160 = (((*_2153)(_2159)) / blocksize); long long _2161 = (((*_2153)(_2159)) % blocksize); (((*_2155)(_2159)) = ((*((*_2157)(((long long)coneidx + _2160))))(_2161))); }}void mosek::fusion::LinearPSDVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2162) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_2162); }void mosek::fusion::p_LinearPSDVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2162){ }void mosek::fusion::LinearPSDVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2163) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_2163); }void mosek::fusion::p_LinearPSDVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2163){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2164){ return ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(_pubthis,_2164); }void mosek::fusion::p_LinearPSDVariable::destroy(){}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2165,    monty::rc_ptr< ::mosek::fusion::Model > _2166){ return new mosek::fusion::PSDVariable(_2165,_2166); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2165,    monty::rc_ptr< ::mosek::fusion::Model > _2166) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2165,_2166); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2165,    monty::rc_ptr< ::mosek::fusion::Model > _2166){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2165,_2166);(conesize = mosek::fusion::p_PSDVariable::_get_impl(_2165)->conesize); (coneidx = mosek::fusion::p_PSDVariable::_get_impl(_2165)->coneidx); (numcones = mosek::fusion::p_PSDVariable::_get_impl(_2165)->numcones); }}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2167,    const std::string &  _2168,    int _2169,    int _2170,    int _2171,    long long _2172){ return new mosek::fusion::PSDVariable(_2167,_2168,_2169,_2170,_2171,_2172); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2167,    const std::string &  _2168,    int _2169,    int _2170,    int _2171,    long long _2172) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2167,_2168,_2169,_2170,_2171,_2172); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2167,    const std::string &  _2168,    int _2169,    int _2170,    int _2171,    long long _2172){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2167,_2168,([&]() -> monty::rc_ptr< ::mosek::fusion::NDSet > { if ( (_2171 == (int)1)) return (::mosek::fusion::p_NDSet::_new_NDSet(_2169,_2169)); else return (::mosek::fusion::p_NDSet::_new_NDSet(_2171,_2169,_2169)); })(),_2172);(conesize = _2169); (coneidx = _2170); (numcones = _2171); }}void mosek::fusion::p_PSDVariable::flushNames( ){ }std::string mosek::fusion::PSDVariable::toString  ( ) { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2173 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2173.get())->a(std::string ("PSDVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2173.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2173.get())->a(shape_p->dim((int)0)); int _8206 = (int)1; int _8207 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2174 = _8206;_2174<_8207;++_2174){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2173.get())->a(std::string (",")).get())->a(shape_p->dim(_2174)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2173.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2173.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc  ( long long _2175,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2176) { return mosek::fusion::p_PSDVariable::_get_impl(this)->elementDesc(_2175,_2176); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::elementDesc( long long _2175,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2176){ long long _2177 = ((long long)conesize * (long long)conesize); long long _2178 = (_2175 / _2177); long long _2179 = (_2175 % _2177); long long _2180 = (_2179 / conesize); long long _2181 = (_2179 % conesize); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2176.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(_2178).get())->a(std::string (",")).get())->a(_2180).get())->a(std::string (",")).get())->a(_2181).get())->a(std::string ("] ")); if ((numcones > (int)1)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2176.get())->a(std::string (" : element (")).get())->a(_2178).get())->a(std::string (",")).get())->a(_2180).get())->a(std::string (",")).get())->a(_2181); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2176.get())->a(std::string (" : element (")).get())->a(_2180).get())->a(std::string (",")).get())->a(_2181); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2176.get())->a(std::string (") in a semidefinite cone of size (")).get())->a(numcones).get())->a(std::string (",")).get())->a(conesize).get())->a(std::string (",")).get())->a(conesize).get())->a(std::string (")")); return _2176; }void mosek::fusion::PSDVariable::elementName  ( long long _2182,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2183) { mosek::fusion::p_PSDVariable::_get_impl(this)->elementName(_2182,_2183); }void mosek::fusion::p_PSDVariable::elementName( long long _2182,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2183){ long long _2184 = ((long long)conesize * (long long)conesize); long long _2185 = (_2182 / _2184); long long _2186 = (_2182 % _2184); long long _2187 = (_2186 / conesize); long long _2188 = (_2186 % conesize); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2183.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(_2185).get())->a(std::string (",")).get())->a(_2187).get())->a(std::string (",")).get())->a(_2188).get())->a(std::string ("] ")); }void mosek::fusion::PSDVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2189,    int _2190,    int _2191,    long long _2192,    long long _2193,    std::shared_ptr< monty::ndarray< int,1 > > _2194,    std::shared_ptr< monty::ndarray< int,1 > > _2195,    std::shared_ptr< monty::ndarray< int,1 > > _2196) { mosek::fusion::p_PSDVariable::_get_impl(this)->inst(_2189,_2190,_2191,_2192,_2193,_2194,_2195,_2196); }void mosek::fusion::p_PSDVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2189,int _2190,int _2191,long long _2192,long long _2193,std::shared_ptr< monty::ndarray< int,1 > > _2194,std::shared_ptr< monty::ndarray< int,1 > > _2195,std::shared_ptr< monty::ndarray< int,1 > > _2196){ int _8208 = _2190; int _8209 = _2191; for (int _2197 = _8208;_2197<_8209;++_2197){ if (((((*_2189)(_2197)) < _2192) || (((*_2189)(_2197)) >= (mosek::fusion::p_Set::_get_impl(shape_p)->size + _2192)))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}long long _2198 = _2193; int _8210 = _2190; int _8211 = _2191; for (int _2199 = _8210;_2199<_8211;++_2199){ long long _2200 = (((*_2189)(_2199)) - _2192); int _2201 = (int)(_2200 / (conesize * conesize)); long long _2202 = (_2200 - ((conesize * conesize) * _2201)); (((*_2194)(_2198)) = (- (((int)1 + coneidx) + _2201))); int _2203 = ((int)_2202 / shape_p->dim((int)1)); int _2204 = ((int)_2202 - (int)(_2203 * shape_p->dim((int)1))); if ((_2203 >= _2204)){ (((*_2195)(_2198)) = _2203); (((*_2196)(_2198)) = _2204); }else { (((*_2195)(_2198)) = _2204); (((*_2196)(_2198)) = _2203); }( ++ _2198 ); }}void mosek::fusion::PSDVariable::inst  ( long long _2205,    long long _2206,    std::shared_ptr< monty::ndarray< int,1 > > _2207,    std::shared_ptr< monty::ndarray< int,1 > > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209) { mosek::fusion::p_PSDVariable::_get_impl(this)->inst(_2205,_2206,_2207,_2208,_2209); }void mosek::fusion::p_PSDVariable::inst( long long _2205,long long _2206,std::shared_ptr< monty::ndarray< int,1 > > _2207,std::shared_ptr< monty::ndarray< int,1 > > _2208,std::shared_ptr< monty::ndarray< int,1 > > _2209){ if (((_2205 < (int)0) || (_2205 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}int _2210 = (int)(_2205 / (conesize * conesize)); long long _2211 = (_2205 - ((conesize * conesize) * _2210)); (((*_2207)(_2206)) = (- (((int)1 + coneidx) + _2210))); int _2212 = ((int)_2211 / shape_p->dim((int)1)); int _2213 = ((int)_2211 - (int)(_2212 * shape_p->dim((int)1))); if ((_2212 >= _2213)){ (((*_2208)(_2206)) = _2212); (((*_2209)(_2206)) = _2213); }else { (((*_2208)(_2206)) = _2213); (((*_2209)(_2206)) = _2212); }}void mosek::fusion::PSDVariable::set_values  ( long long _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215,    std::shared_ptr< monty::ndarray< long long,1 > > _2216,    int _2217,    std::shared_ptr< monty::ndarray< double,1 > > _2218,    bool _2219) { mosek::fusion::p_PSDVariable::_get_impl(this)->set_values(_2214,_2215,_2216,_2217,_2218,_2219); }void mosek::fusion::p_PSDVariable::set_values( long long _2214,std::shared_ptr< monty::ndarray< int,1 > > _2215,std::shared_ptr< monty::ndarray< long long,1 > > _2216,int _2217,std::shared_ptr< monty::ndarray< double,1 > > _2218,bool _2219){ }void mosek::fusion::PSDVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2220,    std::shared_ptr< monty::ndarray< double,1 > > _2221,    bool _2222) { mosek::fusion::p_PSDVariable::_get_impl(this)->set_values(_2220,_2221,_2222); }void mosek::fusion::p_PSDVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2220,std::shared_ptr< monty::ndarray< double,1 > > _2221,bool _2222){ }void mosek::fusion::PSDVariable::values  ( long long _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    std::shared_ptr< monty::ndarray< long long,1 > > _2225,    int _2226,    std::shared_ptr< monty::ndarray< double,1 > > _2227,    bool _2228) { mosek::fusion::p_PSDVariable::_get_impl(this)->values(_2223,_2224,_2225,_2226,_2227,_2228); }void mosek::fusion::p_PSDVariable::values( long long _2223,std::shared_ptr< monty::ndarray< int,1 > > _2224,std::shared_ptr< monty::ndarray< long long,1 > > _2225,int _2226,std::shared_ptr< monty::ndarray< double,1 > > _2227,bool _2228){ long long _2229 = (long long)1; int _2230 = (int)((_2225)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2231 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2223,_2224,_2225); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2232 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2228) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _2233 = (conesize * conesize); int _8212 = (int)0; int _8213 = _2230; for (int _2234 = _8212;_2234<_8213;++_2234){ (_2229 = (_2229 * ((*_2224)(_2234)))); }long long _8214 = (long long)0; long long _8215 = _2229; for (long long _2235 = _8214;_2235<_8215;++_2235){ { long long _2236 = (_2231->get() / _2233); long long _2237 = (_2231->get() - (_2236 * _2233)); long long _2238 = (_2237 / conesize); long long _2239 = (_2237 - (_2238 * conesize)); if ((_2239 > _2238)){ (((*_2227)(_2235)) = ((*((*_2232)(((long long)coneidx + _2236))))((((_2238 * conesize) + _2239) - ((_2238 * (_2238 + (int)1)) / (int)2))))); }else { (((*_2227)(_2235)) = ((*((*_2232)(((long long)coneidx + _2236))))((((_2239 * conesize) + _2238) - ((_2239 * (_2239 + (int)1)) / (int)2))))); }}_2231->inc(); }}void mosek::fusion::PSDVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2240,    int _2241,    std::shared_ptr< monty::ndarray< double,1 > > _2242,    bool _2243) { mosek::fusion::p_PSDVariable::_get_impl(this)->values(_2240,_2241,_2242,_2243); }void mosek::fusion::p_PSDVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2240,int _2241,std::shared_ptr< monty::ndarray< double,1 > > _2242,bool _2243){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2244 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2243) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _2245 = (conesize * conesize); int _8216 = (int)0; int _8217 = (int)((_2240)->size(0)); for (int _2246 = _8216;_2246<_8217;++_2246){ long long _2247 = (((*_2240)(_2246)) / _2245); long long _2248 = (((*_2240)(_2246)) - (_2247 * _2245)); long long _2249 = (_2248 / conesize); long long _2250 = (_2248 - (_2249 * conesize)); if ((_2250 > _2249)){ (((*_2242)(_2246)) = ((*((*_2244)(((long long)coneidx + _2247))))((((_2249 * conesize) + _2250) - ((_2249 * (_2249 + (int)1)) / (int)2))))); }else { (((*_2242)(_2246)) = ((*((*_2244)(((long long)coneidx + _2247))))((((_2250 * conesize) + _2249) - ((_2250 * (_2250 + (int)1)) / (int)2))))); }}}void mosek::fusion::PSDVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2251) { mosek::fusion::p_PSDVariable::_get_impl(this)->make_continuous(_2251); }void mosek::fusion::p_PSDVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2251){ }void mosek::fusion::PSDVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2252) { mosek::fusion::p_PSDVariable::_get_impl(this)->make_integer(_2252); }void mosek::fusion::p_PSDVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2252){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2253){ return ::mosek::fusion::p_PSDVariable::_new_PSDVariable(_pubthis,_2253); }void mosek::fusion::p_PSDVariable::destroy(){}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::PSDVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::slice(int _2618,int _2619)
{ return mosek::fusion::ModelVariable::slice(_2618,_2619); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2745)
{ return mosek::fusion::BaseVariable::pick(_2745); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2748)
{ return mosek::fusion::BaseVariable::pick(_2748); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::PSDVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::PSDVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2738,std::shared_ptr< monty::ndarray< int,1 > > _2739,std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2738,_2739,_2740); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2737)
{ return mosek::fusion::BaseVariable::index(_2737); }
void mosek::fusion::PSDVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2731,int _2732,int _2733)
{ return mosek::fusion::BaseVariable::index(_2731,_2732,_2733); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2734,int _2735)
{ return mosek::fusion::BaseVariable::index(_2734,_2735); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::PSDVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2736)
{ return mosek::fusion::BaseVariable::index(_2736); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2742,std::shared_ptr< monty::ndarray< int,1 > > _2743)
{ return mosek::fusion::BaseVariable::pick(_2742,_2743); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::PSDVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::PSDVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::PSDVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2722)
{ mosek::fusion::BaseVariable::setLevel(_2722); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::diag(int _2751)
{ return mosek::fusion::BaseVariable::diag(_2751); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::PSDVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2611,std::shared_ptr< monty::ndarray< int,1 > > _2612)
{ return mosek::fusion::ModelVariable::slice(_2611,_2612); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::antidiag(int _2750)
{ return mosek::fusion::BaseVariable::antidiag(_2750); }
long long mosek::fusion::PSDVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::PSDVariable::values(int _2705,std::shared_ptr< monty::ndarray< double,1 > > _2706,bool _2707)
{ mosek::fusion::BaseVariable::values(_2705,_2706,_2707); }
mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2254,    monty::rc_ptr< ::mosek::fusion::Model > _2255){ return new mosek::fusion::SymLinearVariable(_2254,_2255); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2254,    monty::rc_ptr< ::mosek::fusion::Model > _2255) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_2254,_2255); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2254,    monty::rc_ptr< ::mosek::fusion::Model > _2255){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2254,_2255);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8218; for (int _2256=(int)0, _8219=(int)((mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->nativeidxs)->size(0)); _2256 < _8219;++_2256)_8218.push_back(((*mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->nativeidxs)(_2256))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8218.size()),_8218.begin(),_8218.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->dom); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dim = mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->dim); (names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_2254)->names_flushed); }}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2257,    const std::string &  _2258,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2259,    int _2260,    std::shared_ptr< monty::ndarray< int,1 > > _2261,    long long _2262){ return new mosek::fusion::SymLinearVariable(_2257,_2258,_2259,_2260,_2261,_2262); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2257,    const std::string &  _2258,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2259,    int _2260,    std::shared_ptr< monty::ndarray< int,1 > > _2261,    long long _2262) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_2257,_2258,_2259,_2260,_2261,_2262); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2257,    const std::string &  _2258,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2259,    int _2260,    std::shared_ptr< monty::ndarray< int,1 > > _2261,    long long _2262){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2257,_2258,::mosek::fusion::p_Set::make(_2260,_2260),_2262);(mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->nativeidxs = _2261); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( ! mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->nativeidxs) return (::mosek::fusion::Utils::p_IntMap::_new_IntMap()); else return (nullptr); })()); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dom = _2259); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dim = _2260); (names_flushed = false); }}std::string mosek::fusion::SymLinearVariable::toString  ( ) { return mosek::fusion::p_SymLinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymLinearVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2263 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2263.get())->a(std::string ("SymLinearVariable( (")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2263.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2263.get())->a(shape_p->dim((int)0)); int _8220 = (int)1; int _8221 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2264 = _8220;_2264<_8221;++_2264){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2263.get())->a(std::string (",")).get())->a(shape_p->dim(_2264)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2263.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2263.get())->toString(); }void mosek::fusion::p_SymLinearVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8222 = (int)0; int _8223 = dim; for (int _2265 = _8222;_2265<_8223;++_2265){ int _8224 = (int)0; int _8225 = (_2265 + (int)1); for (int _2266 = _8224;_2266<_8225;++_2266){ int _2267 = (((_2265 * dim) - ((_2265 * (_2265 + (int)1)) / (int)2)) + _2266); int _2268 = ((_2265 * dim) + _2266); mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2267)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2268))).get())->a(std::string ("]")).get())->toString()); })()); }}}else { int _8226 = (int)0; int _8227 = dim; for (int _2269 = _8226;_2269<_8227;++_2269){ int _8228 = (int)0; int _8229 = (_2269 + (int)1); for (int _2270 = _8228;_2270<_8229;++_2270){ int _2271 = ((_2269 * dim) + _2270); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem((long long)(_2271))){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem((long long)(_2271)))),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2271))).get())->a(std::string ("]")).get())->toString()); })()); }else {}}}}(names_flushed = true); }else {}}void mosek::fusion::SymLinearVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2272,    int _2273,    int _2274,    long long _2275,    long long _2276,    std::shared_ptr< monty::ndarray< int,1 > > _2277,    std::shared_ptr< monty::ndarray< int,1 > > _2278,    std::shared_ptr< monty::ndarray< int,1 > > _2279) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->inst(_2272,_2273,_2274,_2275,_2276,_2277,_2278,_2279); }void mosek::fusion::p_SymLinearVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2272,int _2273,int _2274,long long _2275,long long _2276,std::shared_ptr< monty::ndarray< int,1 > > _2277,std::shared_ptr< monty::ndarray< int,1 > > _2278,std::shared_ptr< monty::ndarray< int,1 > > _2279){ if (nativeidxs){ int _8230 = _2273; int _8231 = _2274; for (int _2280 = _8230;_2280<_8231;++_2280){ (((*_2277)(((_2276 + _2280) - _2273))) = ((*nativeidxs)(tril_lin_idx((((*_2272)(_2280)) - _2275))))); }}else { int _8232 = _2273; int _8233 = _2274; for (int _2281 = _8232;_2281<_8233;++_2281){ long long _2282 = tril_lin_idx((((*_2272)(_2281)) - _2275)); long long _2283 = tril_idx((((*_2272)(_2281)) - _2275)); if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2283))){ int _2284 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2283,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom)->key,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(_2282)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2283,_2284); (((*_2277)(((_2276 + _2281) - _2273))) = _2284); (names_flushed = false); }else { (((*_2277)(((_2276 + _2281) - _2273))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2283)); }}}}void mosek::fusion::SymLinearVariable::inst  ( long long _2285,    long long _2286,    std::shared_ptr< monty::ndarray< int,1 > > _2287,    std::shared_ptr< monty::ndarray< int,1 > > _2288,    std::shared_ptr< monty::ndarray< int,1 > > _2289) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->inst(_2285,_2286,_2287,_2288,_2289); }void mosek::fusion::p_SymLinearVariable::inst( long long _2285,long long _2286,std::shared_ptr< monty::ndarray< int,1 > > _2287,std::shared_ptr< monty::ndarray< int,1 > > _2288,std::shared_ptr< monty::ndarray< int,1 > > _2289){ long long _2290 = tril_lin_idx(_2285); long long _2291 = tril_idx(_2285); if (nativeidxs){ (((*_2287)(_2286)) = ((*nativeidxs)(_2290))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2291))){ int _2292 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2291,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom)->key,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(_2291)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2290,_2292); (((*_2287)(_2286)) = _2292); }else { (((*_2287)(_2286)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2290)); }}}void mosek::fusion::p_SymLinearVariable::dual_values( long long _2293,std::shared_ptr< monty::ndarray< int,1 > > _2294,std::shared_ptr< monty::ndarray< long long,1 > > _2295,int _2296,std::shared_ptr< monty::ndarray< double,1 > > _2297){ long long _2298 = (long long)1; int _2299 = (int)((_2295)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2300 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2293,_2294,_2295); std::shared_ptr< monty::ndarray< double,1 > > _2301 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2302 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8234 = (int)0; int _8235 = _2299; for (int _2303 = _8234;_2303<_8235;++_2303){ (_2298 = (_2298 * ((*_2294)(_2303)))); }if (nativeidxs){ long long _8236 = (long long)0; long long _8237 = _2298; for (long long _2304 = _8236;_2304<_8237;++_2304){ int _2305 = ((*nativeidxs)(tril_lin_idx(_2300->get()))); (((*_2297)((_2304 + _2296))) = (((*_2301)(_2305)) - ((*_2302)(_2305)))); _2300->inc(); }}else { mosek::fusion::SolutionStatus _2306 = model->getPrimalSolutionStatus(); int _8238 = (int)0; int _8239 = (int)_2298; for (int _2307 = _8238;_2307<_8239;++_2307){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(tril_lin_idx(_2300->get()))){ int _2308 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2300->get()); (((*_2297)((_2296 + _2307))) = (((*_2301)(_2308)) - ((*_2302)(_2308)))); }else { (((*_2297)((_2296 + _2307))) = 0.0); }_2300->inc(); }}}void mosek::fusion::p_SymLinearVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2309,int _2310,std::shared_ptr< monty::ndarray< double,1 > > _2311){ std::shared_ptr< monty::ndarray< double,1 > > _2312 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2313 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8240 = (int)0; int _8241 = (int)((_2309)->size(0)); for (int _2314 = _8240;_2314<_8241;++_2314){ int _2315 = ((*nativeidxs)(tril_lin_idx(((*_2309)(_2314))))); (((*_2311)((_2310 + _2314))) = (((*_2312)(_2315)) - ((*_2313)(_2315)))); }}else { mosek::fusion::SolutionStatus _2316 = model->getPrimalSolutionStatus(); int _8242 = (int)0; int _8243 = (int)((_2309)->size(0)); for (int _2317 = _8242;_2317<_8243;++_2317){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2309)(_2317)))){ int _2318 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2309)(_2317))); (((*_2311)((_2310 + _2317))) = (((*_2312)(_2318)) - ((*_2313)(_2318)))); }else { (((*_2311)((_2310 + _2317))) = 0.0); }}}}void mosek::fusion::SymLinearVariable::set_values  ( long long _2319,    std::shared_ptr< monty::ndarray< int,1 > > _2320,    std::shared_ptr< monty::ndarray< long long,1 > > _2321,    int _2322,    std::shared_ptr< monty::ndarray< double,1 > > _2323,    bool _2324) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->set_values(_2319,_2320,_2321,_2322,_2323,_2324); }void mosek::fusion::p_SymLinearVariable::set_values( long long _2319,std::shared_ptr< monty::ndarray< int,1 > > _2320,std::shared_ptr< monty::ndarray< long long,1 > > _2321,int _2322,std::shared_ptr< monty::ndarray< double,1 > > _2323,bool _2324){ if (_2324){ long long _2325 = (long long)1; int _2326 = (int)((_2321)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2327 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2319,_2320,_2321); int _8244 = (int)0; int _8245 = _2326; for (int _2328 = _8244;_2328<_8245;++_2328){ (_2325 = (_2325 * ((*_2320)(_2328)))); }if (nativeidxs){ int _2329 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2330 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8246; for (long long _2331=(int)0, _8247=_2325; _2331 < _8247;++_2331)_8246.push_back(((*nativeidxs)(tril_lin_idx(_2327->next())))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8246.size()),_8246.begin(),_8246.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2332 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2322 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8248; for (int _2333=(int)0, _8249=_2329; _2333 < _8249;++_2333)_8248.push_back(((*_2323)((_2322 + _2333)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8248.size()),_8248.begin(),_8248.end())); })()); else return (_2323); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2330,_2332); }else { std::shared_ptr< monty::ndarray< int,1 > > _2334 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2325))); int _8250 = (int)0; long long _8251 = _2325; for (long long _2335 = _8250;_2335<_8251;++_2335){ _pubthis->inst(_2327->next(),_2335,_2334,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2336 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8252; for (long long _2337=(int)0, _8253=_2325; _2337 < _8253;++_2337)_8252.push_back(((*_2323)((_2322 + _2337)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8252.size()),_8252.begin(),_8252.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2334,_2336); }}else { }}void mosek::fusion::SymLinearVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2338,    std::shared_ptr< monty::ndarray< double,1 > > _2339,    bool _2340) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->set_values(_2338,_2339,_2340); }void mosek::fusion::p_SymLinearVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2338,std::shared_ptr< monty::ndarray< double,1 > > _2339,bool _2340){ if (_2340){ if (nativeidxs){ int _2341 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2342 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8254; for (int _2343=(int)0, _8255=_2341; _2343 < _8255;++_2343)_8254.push_back(((*nativeidxs)(tril_lin_idx(((*_2338)(_2343)))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8254.size()),_8254.begin(),_8254.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2344 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8256; for (int _2345=(int)0, _8257=_2341; _2345 < _8257;++_2345)_8256.push_back(((*_2339)(_2345))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8256.size()),_8256.begin(),_8256.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2342,_2344); }else { std::shared_ptr< monty::ndarray< int,1 > > _2346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2338)->size(0))))); int _8258 = (int)0; int _8259 = (int)((_2338)->size(0)); for (int _2347 = _8258;_2347<_8259;++_2347){ _pubthis->inst(((*_2338)(_2347)),(long long)(_2347),_2346,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2346,_2339); }}else { }}void mosek::fusion::SymLinearVariable::values  ( long long _2348,    std::shared_ptr< monty::ndarray< int,1 > > _2349,    std::shared_ptr< monty::ndarray< long long,1 > > _2350,    int _2351,    std::shared_ptr< monty::ndarray< double,1 > > _2352,    bool _2353) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->values(_2348,_2349,_2350,_2351,_2352,_2353); }void mosek::fusion::p_SymLinearVariable::values( long long _2348,std::shared_ptr< monty::ndarray< int,1 > > _2349,std::shared_ptr< monty::ndarray< long long,1 > > _2350,int _2351,std::shared_ptr< monty::ndarray< double,1 > > _2352,bool _2353){ if (_2353){ long long _2354 = (long long)1; int _2355 = (int)((_2350)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2356 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2348,_2349,_2350); std::shared_ptr< monty::ndarray< double,1 > > _2357 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8260 = (int)0; int _8261 = _2355; for (int _2358 = _8260;_2358<_8261;++_2358){ (_2354 *= ((*_2349)(_2358))); }if (nativeidxs){ long long _8262 = (long long)0; long long _8263 = _2354; for (long long _2359 = _8262;_2359<_8263;++_2359){ (((*_2352)((_2359 + _2351))) = ((*_2357)(((*nativeidxs)(tril_lin_idx(_2356->get())))))); _2356->inc(); }}else { mosek::fusion::SolutionStatus _2360 = model->getPrimalSolutionStatus(); if (((_2360 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2360 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2360 == ::mosek::fusion::SolutionStatus::Feasible) || (_2360 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8264 = (int)0; int _8265 = (int)_2354; for (int _2361 = _8264;_2361<_8265;++_2361){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2356->get())){ (((*_2352)((_2351 + _2361))) = ((*_2357)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2356->get())))); }else { (((*_2352)((_2351 + _2361))) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(tril_idx(_2356->get()))); }_2356->inc(); }}else { int _8266 = (int)0; int _8267 = (int)_2354; for (int _2362 = _8266;_2362<_8267;++_2362){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2356->get())){ (((*_2352)((_2351 + _2362))) = ((*_2357)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2356->get())))); }else { (((*_2352)((_2351 + _2362))) = 0.0); }_2356->inc(); }}}}else { dual_values(_2348,_2349,_2350,_2351,_2352); }}void mosek::fusion::SymLinearVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2363,    int _2364,    std::shared_ptr< monty::ndarray< double,1 > > _2365,    bool _2366) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->values(_2363,_2364,_2365,_2366); }void mosek::fusion::p_SymLinearVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2363,int _2364,std::shared_ptr< monty::ndarray< double,1 > > _2365,bool _2366){ if (_2366){ std::shared_ptr< monty::ndarray< double,1 > > _2367 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8268 = (int)0; int _8269 = (int)((_2363)->size(0)); for (int _2368 = _8268;_2368<_8269;++_2368){ (((*_2365)((_2364 + _2368))) = ((*_2367)(((*nativeidxs)(tril_lin_idx(((*_2363)(_2368)))))))); }}else { mosek::fusion::SolutionStatus _2369 = model->getPrimalSolutionStatus(); if (((_2369 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2369 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2369 == ::mosek::fusion::SolutionStatus::Feasible) || (_2369 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8270 = (int)0; int _8271 = (int)((_2363)->size(0)); for (int _2370 = _8270;_2370<_8271;++_2370){ long long _2371 = ((*_2363)(_2370)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2371)){ (((*_2365)((_2364 + _2370))) = ((*_2367)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2371)))); }else { (((*_2365)((_2364 + _2370))) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(tril_idx(_2371))); }}}else { int _8272 = (int)0; int _8273 = (int)((_2363)->size(0)); for (int _2372 = _8272;_2372<_8273;++_2372){ long long _2373 = ((*_2363)(_2372)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2373)){ (((*_2365)((_2364 + _2372))) = ((*_2367)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_2373))))); }else { (((*_2365)((_2364 + _2372))) = 0.0); }}}}}else { dual_values(_2363,_2364,_2365); }}void mosek::fusion::SymLinearVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2374) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->make_continuous(_2374); }void mosek::fusion::p_SymLinearVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2374){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8274; for (int _2375=(int)0, _8275=(int)((_2374)->size(0)); _2375 < _8275;++_2375)_8274.push_back(((*nativeidxs)(((*_2374)(_2375))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8274.size()),_8274.begin(),_8274.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2376 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2374)->size(0))))); _pubthis->inst(_2374,(int)0,(int)((_2374)->size(0)),(long long)((int)0),(long long)((int)0),_2376,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2376); }}void mosek::fusion::SymLinearVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2377) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->make_integer(_2377); }void mosek::fusion::p_SymLinearVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2377){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8276; for (int _2378=(int)0, _8277=(int)((_2377)->size(0)); _2378 < _8277;++_2378)_8276.push_back(((*nativeidxs)(((*_2377)(_2378))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8276.size()),_8276.begin(),_8276.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2377)->size(0))))); _pubthis->inst(_2377,(int)0,(int)((_2377)->size(0)),(long long)((int)0),(long long)((int)0),_2379,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2379); }}long long mosek::fusion::p_SymLinearVariable::tril_idx( long long _2380){ long long _2381 = (_2380 / dim); long long _2382 = (_2380 % dim); if ((_2382 > _2381)){ return ((_2382 * dim) + _2381); }else { return _2380; }}long long mosek::fusion::p_SymLinearVariable::tril_lin_idx( long long _2383){ long long _2384 = (_2383 / dim); long long _2385 = (_2383 % dim); if ((_2385 > _2384)){ return (((_2385 * (_2385 + (int)1)) / (int)2) + _2384); }else { return (((_2384 * (_2384 + (int)1)) / (int)2) + _2385); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2386){ return ::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(_pubthis,_2386); }void mosek::fusion::p_SymLinearVariable::destroy(){dom.reset();nativeidxs.reset();idxmap.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::SymLinearVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::slice(int _2618,int _2619)
{ return mosek::fusion::ModelVariable::slice(_2618,_2619); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2745)
{ return mosek::fusion::BaseVariable::pick(_2745); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2748)
{ return mosek::fusion::BaseVariable::pick(_2748); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::SymLinearVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymLinearVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2738,std::shared_ptr< monty::ndarray< int,1 > > _2739,std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2738,_2739,_2740); }
void mosek::fusion::SymLinearVariable::elementName(long long _2609,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2610)
{ mosek::fusion::ModelVariable::elementName(_2609,_2610); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2737)
{ return mosek::fusion::BaseVariable::index(_2737); }
void mosek::fusion::SymLinearVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2731,int _2732,int _2733)
{ return mosek::fusion::BaseVariable::index(_2731,_2732,_2733); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2734,int _2735)
{ return mosek::fusion::BaseVariable::index(_2734,_2735); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymLinearVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2736)
{ return mosek::fusion::BaseVariable::index(_2736); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2742,std::shared_ptr< monty::ndarray< int,1 > > _2743)
{ return mosek::fusion::BaseVariable::pick(_2742,_2743); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymLinearVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::SymLinearVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::SymLinearVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2722)
{ mosek::fusion::BaseVariable::setLevel(_2722); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::diag(int _2751)
{ return mosek::fusion::BaseVariable::diag(_2751); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymLinearVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2611,std::shared_ptr< monty::ndarray< int,1 > > _2612)
{ return mosek::fusion::ModelVariable::slice(_2611,_2612); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SymLinearVariable::elementDesc(long long _2673,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2674)
{ return mosek::fusion::BaseVariable::elementDesc(_2673,_2674); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::antidiag(int _2750)
{ return mosek::fusion::BaseVariable::antidiag(_2750); }
long long mosek::fusion::SymLinearVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::SymLinearVariable::values(int _2705,std::shared_ptr< monty::ndarray< double,1 > > _2706,bool _2707)
{ mosek::fusion::BaseVariable::values(_2705,_2706,_2707); }
mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2387,    monty::rc_ptr< ::mosek::fusion::Model > _2388){ return new mosek::fusion::LinearVariable(_2387,_2388); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2387,    monty::rc_ptr< ::mosek::fusion::Model > _2388) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2387,_2388); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2387,    monty::rc_ptr< ::mosek::fusion::Model > _2388){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2387,_2388);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_LinearVariable::_get_impl(_2387)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8278; for (int _2389=(int)0, _8279=(int)((mosek::fusion::p_LinearVariable::_get_impl(_2387)->nativeidxs)->size(0)); _2389 < _8279;++_2389)_8278.push_back(((*mosek::fusion::p_LinearVariable::_get_impl(_2387)->nativeidxs)(_2389))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8278.size()),_8278.begin(),_8278.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_LinearVariable::_get_impl(_2387)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_LinearVariable::_get_impl(_2387)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_LinearVariable::_get_impl(_2387)->dom); (names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_2387)->names_flushed); }}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2390,    const std::string &  _2391,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2392,    monty::rc_ptr< ::mosek::fusion::Set > _2393,    std::shared_ptr< monty::ndarray< int,1 > > _2394,    long long _2395){ return new mosek::fusion::LinearVariable(_2390,_2391,_2392,_2393,_2394,_2395); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2390,    const std::string &  _2391,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2392,    monty::rc_ptr< ::mosek::fusion::Set > _2393,    std::shared_ptr< monty::ndarray< int,1 > > _2394,    long long _2395) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2390,_2391,_2392,_2393,_2394,_2395); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2390,    const std::string &  _2391,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2392,    monty::rc_ptr< ::mosek::fusion::Set > _2393,    std::shared_ptr< monty::ndarray< int,1 > > _2394,    long long _2395){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2390,_2391,_2393,_2395);(nativeidxs = _2394); if (! _2394){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _2392); (names_flushed = false); }}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::LinearVariable::elementDesc  ( long long _2396,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2397) { return mosek::fusion::p_LinearVariable::_get_impl(this)->elementDesc(_2396,_2397); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_LinearVariable::elementDesc( long long _2396,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2397){ _pubthis->elementName(_2396,_2397); mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_2396,_2397); return _2397; }void mosek::fusion::LinearVariable::elementName  ( long long _2398,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2399) { mosek::fusion::p_LinearVariable::_get_impl(this)->elementName(_2398,_2399); }void mosek::fusion::p_LinearVariable::elementName( long long _2398,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2399){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2399.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2398)).get())->a(std::string ("] ")); }void mosek::fusion::p_LinearVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8280 = (int)0; int _8281 = (int)((nativeidxs)->size(0)); for (int _2400 = _8280;_2400<_8281;++_2400){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2400)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2400))).get())->a(std::string ("]")).get())->toString()); })()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _2401 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _2402 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8282 = (int)0; int _8283 = (int)((_2401)->size(0)); for (int _2403 = _8282;_2403<_8283;++_2403){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_2402)(_2403)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname(((*_2401)(_2403)))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::LinearVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2404,    int _2405,    int _2406,    long long _2407,    long long _2408,    std::shared_ptr< monty::ndarray< int,1 > > _2409,    std::shared_ptr< monty::ndarray< int,1 > > _2410,    std::shared_ptr< monty::ndarray< int,1 > > _2411) { mosek::fusion::p_LinearVariable::_get_impl(this)->inst(_2404,_2405,_2406,_2407,_2408,_2409,_2410,_2411); }void mosek::fusion::p_LinearVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2404,int _2405,int _2406,long long _2407,long long _2408,std::shared_ptr< monty::ndarray< int,1 > > _2409,std::shared_ptr< monty::ndarray< int,1 > > _2410,std::shared_ptr< monty::ndarray< int,1 > > _2411){ if (nativeidxs){ int _8284 = _2405; int _8285 = _2406; for (int _2412 = _8284;_2412<_8285;++_2412){ (((*_2409)((_2408 + (long long)(_2412 - _2405)))) = ((*nativeidxs)(((*_2404)(((long long)_2412 - _2407)))))); }}else { int _8286 = _2405; int _8287 = _2406; for (int _2413 = _8286;_2413<_8287;++_2413){ if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2404)(((long long)_2413 - _2407)))))){ int _2414 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),((*_2404)(((long long)_2413 - _2407))),mosek::fusion::p_LinearDomain::_get_impl(dom)->key,mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2404)(((long long)_2413 - _2407))))); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_2404)((_2413 - _2407))),_2414); (((*_2409)(((_2408 + _2413) - _2405))) = _2414); (names_flushed = false); }else { (((*_2409)(((_2408 + _2413) - _2405))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2404)(((long long)_2413 - _2407))))); }}}}void mosek::fusion::LinearVariable::inst  ( long long _2415,    long long _2416,    std::shared_ptr< monty::ndarray< int,1 > > _2417,    std::shared_ptr< monty::ndarray< int,1 > > _2418,    std::shared_ptr< monty::ndarray< int,1 > > _2419) { mosek::fusion::p_LinearVariable::_get_impl(this)->inst(_2415,_2416,_2417,_2418,_2419); }void mosek::fusion::p_LinearVariable::inst( long long _2415,long long _2416,std::shared_ptr< monty::ndarray< int,1 > > _2417,std::shared_ptr< monty::ndarray< int,1 > > _2418,std::shared_ptr< monty::ndarray< int,1 > > _2419){ if (nativeidxs){ (((*_2417)(_2416)) = ((*nativeidxs)(_2415))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2415))){ int _2420 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2415,mosek::fusion::p_LinearDomain::_get_impl(dom)->key,mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2415)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2415,_2420); (((*_2417)(_2416)) = _2420); }else { (((*_2417)(_2416)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2415)); }}}void mosek::fusion::p_LinearVariable::dual_values( long long _2421,std::shared_ptr< monty::ndarray< int,1 > > _2422,std::shared_ptr< monty::ndarray< long long,1 > > _2423,int _2424,std::shared_ptr< monty::ndarray< double,1 > > _2425){ long long _2426 = (long long)1; int _2427 = (int)((_2423)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2428 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2421,_2422,_2423); std::shared_ptr< monty::ndarray< double,1 > > _2429 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2430 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8288 = (int)0; int _8289 = _2427; for (int _2431 = _8288;_2431<_8289;++_2431){ (_2426 = (_2426 * ((*_2422)(_2431)))); }if (nativeidxs){ long long _8290 = (long long)0; long long _8291 = _2426; for (long long _2432 = _8290;_2432<_8291;++_2432){ int _2433 = ((*nativeidxs)(_2428->get())); (((*_2425)((_2432 + _2424))) = (((*_2429)(_2433)) - ((*_2430)(_2433)))); _2428->inc(); }}else { mosek::fusion::SolutionStatus _2434 = model->getPrimalSolutionStatus(); int _8292 = (int)0; int _8293 = (int)_2426; for (int _2435 = _8292;_2435<_8293;++_2435){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2428->get())){ int _2436 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2428->get()); (((*_2425)((_2424 + _2435))) = (((*_2429)(_2436)) - ((*_2430)(_2436)))); }else { if (((_2434 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2434 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2434 == ::mosek::fusion::SolutionStatus::Feasible) || (_2434 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2425)((_2424 + _2435))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2428->get())); }else { (((*_2425)((_2424 + _2435))) = 0.0); }}_2428->inc(); }}}void mosek::fusion::p_LinearVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2437,int _2438,std::shared_ptr< monty::ndarray< double,1 > > _2439){ std::shared_ptr< monty::ndarray< double,1 > > _2440 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2441 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8294 = (int)0; int _8295 = (int)((_2437)->size(0)); for (int _2442 = _8294;_2442<_8295;++_2442){ int _2443 = ((*nativeidxs)(((*_2437)(_2442)))); (((*_2439)((_2438 + _2442))) = (((*_2440)(_2443)) - ((*_2441)(_2443)))); }}else { mosek::fusion::SolutionStatus _2444 = model->getPrimalSolutionStatus(); int _8296 = (int)0; int _8297 = (int)((_2437)->size(0)); for (int _2445 = _8296;_2445<_8297;++_2445){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2437)(_2445)))){ int _2446 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2437)(_2445))); (((*_2439)((_2438 + _2445))) = (((*_2440)(_2446)) - ((*_2441)(_2446)))); }else { if (((_2444 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2444 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2444 == ::mosek::fusion::SolutionStatus::Feasible) || (_2444 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2439)((_2438 + _2445))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2437)(_2445)))); }else { (((*_2439)((_2438 + _2445))) = 0.0); }}}}}void mosek::fusion::LinearVariable::set_values  ( long long _2447,    std::shared_ptr< monty::ndarray< int,1 > > _2448,    std::shared_ptr< monty::ndarray< long long,1 > > _2449,    int _2450,    std::shared_ptr< monty::ndarray< double,1 > > _2451,    bool _2452) { mosek::fusion::p_LinearVariable::_get_impl(this)->set_values(_2447,_2448,_2449,_2450,_2451,_2452); }void mosek::fusion::p_LinearVariable::set_values( long long _2447,std::shared_ptr< monty::ndarray< int,1 > > _2448,std::shared_ptr< monty::ndarray< long long,1 > > _2449,int _2450,std::shared_ptr< monty::ndarray< double,1 > > _2451,bool _2452){ if (_2452){ long long _2453 = (long long)1; int _2454 = (int)((_2449)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2455 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2447,_2448,_2449); int _8298 = (int)0; int _8299 = _2454; for (int _2456 = _8298;_2456<_8299;++_2456){ (_2453 = (_2453 * ((*_2448)(_2456)))); }if (nativeidxs){ int _2457 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2458 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8300; for (long long _2459=(int)0, _8301=_2453; _2459 < _8301;++_2459)_8300.push_back(((*nativeidxs)(_2455->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8300.size()),_8300.begin(),_8300.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2460 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2450 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8302; for (int _2461=(int)0, _8303=_2457; _2461 < _8303;++_2461)_8302.push_back(((*_2451)(_2461))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8302.size()),_8302.begin(),_8302.end())); })()); else return (_2451); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2458,_2460); }else { std::shared_ptr< monty::ndarray< int,1 > > _2462 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2453))); int _8304 = (int)0; long long _8305 = _2453; for (long long _2463 = _8304;_2463<_8305;++_2463){ _pubthis->inst(_2455->next(),_2463,_2462,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2464 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8306; for (long long _2465=(int)0, _8307=_2453; _2465 < _8307;++_2465)_8306.push_back(((*_2451)((_2450 + _2465)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8306.size()),_8306.begin(),_8306.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2462,_2464); }}else { }}void mosek::fusion::LinearVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2466,    std::shared_ptr< monty::ndarray< double,1 > > _2467,    bool _2468) { mosek::fusion::p_LinearVariable::_get_impl(this)->set_values(_2466,_2467,_2468); }void mosek::fusion::p_LinearVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2466,std::shared_ptr< monty::ndarray< double,1 > > _2467,bool _2468){ if (_2468){ if (nativeidxs){ int _2469 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2470 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8308; for (int _2471=(int)0, _8309=_2469; _2471 < _8309;++_2471)_8308.push_back(((*nativeidxs)(((*_2466)(_2471))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8308.size()),_8308.begin(),_8308.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2472 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8310; for (int _2473=(int)0, _8311=_2469; _2473 < _8311;++_2473)_8310.push_back(((*_2467)(_2473))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8310.size()),_8310.begin(),_8310.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2470,_2472); }else { std::shared_ptr< monty::ndarray< int,1 > > _2474 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2466)->size(0))))); int _8312 = (int)0; int _8313 = (int)((_2466)->size(0)); for (int _2475 = _8312;_2475<_8313;++_2475){ _pubthis->inst(((*_2466)(_2475)),(long long)(_2475),_2474,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2476 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8314; for (int _2477=(int)0, _8315=(int)((_2466)->size(0)); _2477 < _8315;++_2477)_8314.push_back(((*_2467)(_2477))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8314.size()),_8314.begin(),_8314.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2474,_2476); }}else { }}void mosek::fusion::LinearVariable::values  ( long long _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    std::shared_ptr< monty::ndarray< long long,1 > > _2480,    int _2481,    std::shared_ptr< monty::ndarray< double,1 > > _2482,    bool _2483) { mosek::fusion::p_LinearVariable::_get_impl(this)->values(_2478,_2479,_2480,_2481,_2482,_2483); }void mosek::fusion::p_LinearVariable::values( long long _2478,std::shared_ptr< monty::ndarray< int,1 > > _2479,std::shared_ptr< monty::ndarray< long long,1 > > _2480,int _2481,std::shared_ptr< monty::ndarray< double,1 > > _2482,bool _2483){ if ((! _2483)){ dual_values(_2478,_2479,_2480,_2481,_2482); }else { long long _2484 = (long long)1; int _2485 = (int)((_2480)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2486 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2478,_2479,_2480); std::shared_ptr< monty::ndarray< double,1 > > _2487 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8316 = (int)0; int _8317 = _2485; for (int _2488 = _8316;_2488<_8317;++_2488){ (_2484 = (_2484 * ((*_2479)(_2488)))); }if (nativeidxs){ long long _8318 = (long long)0; long long _8319 = _2484; for (long long _2489 = _8318;_2489<_8319;++_2489){ (((*_2482)((_2489 + _2481))) = ((*_2487)(((*nativeidxs)(_2486->get()))))); _2486->inc(); }}else { mosek::fusion::SolutionStatus _2490 = model->getPrimalSolutionStatus(); int _8320 = (int)0; int _8321 = (int)_2484; for (int _2491 = _8320;_2491<_8321;++_2491){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2486->get())){ (((*_2482)((_2481 + _2491))) = ((*_2487)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2486->get())))); }else { if (((_2490 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2490 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2490 == ::mosek::fusion::SolutionStatus::Feasible) || (_2490 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2482)((_2481 + _2491))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2486->get())); }else { (((*_2482)((_2481 + _2491))) = 0.0); }}_2486->inc(); }}}}void mosek::fusion::LinearVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2492) { mosek::fusion::p_LinearVariable::_get_impl(this)->make_continuous(_2492); }void mosek::fusion::p_LinearVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2492){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8322; for (int _2493=(int)0, _8323=(int)((_2492)->size(0)); _2493 < _8323;++_2493)_8322.push_back(((*nativeidxs)(((*_2492)(_2493))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8322.size()),_8322.begin(),_8322.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2494 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2492)->size(0))))); _pubthis->inst(_2492,(int)0,(int)((_2492)->size(0)),(long long)((int)0),(long long)((int)0),_2494,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2494); }}void mosek::fusion::LinearVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2495) { mosek::fusion::p_LinearVariable::_get_impl(this)->make_integer(_2495); }void mosek::fusion::p_LinearVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2495){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8324; for (int _2496=(int)0, _8325=(int)((_2495)->size(0)); _2496 < _8325;++_2496)_8324.push_back(((*nativeidxs)(((*_2495)(_2496))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8324.size()),_8324.begin(),_8324.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2497 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2495)->size(0))))); _pubthis->inst(_2495,(int)0,(int)((_2495)->size(0)),(long long)((int)0),(long long)((int)0),_2497,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2497); }}void mosek::fusion::LinearVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2498,    int _2499,    std::shared_ptr< monty::ndarray< double,1 > > _2500,    bool _2501) { mosek::fusion::p_LinearVariable::_get_impl(this)->values(_2498,_2499,_2500,_2501); }void mosek::fusion::p_LinearVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2498,int _2499,std::shared_ptr< monty::ndarray< double,1 > > _2500,bool _2501){ if ((! _2501)){ dual_values(_2498,_2499,_2500); }else { std::shared_ptr< monty::ndarray< double,1 > > _2502 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8326 = (int)0; int _8327 = (int)((_2498)->size(0)); for (int _2503 = _8326;_2503<_8327;++_2503){ (((*_2500)((_2499 + _2503))) = ((*_2502)(((*nativeidxs)(((*_2498)(_2503))))))); }}else { mosek::fusion::SolutionStatus _2504 = model->getPrimalSolutionStatus(); int _8328 = (int)0; int _8329 = (int)((_2498)->size(0)); for (int _2505 = _8328;_2505<_8329;++_2505){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2498)(_2505)))){ (((*_2500)((_2499 + _2505))) = ((*_2502)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2498)(_2505)))))); }else { if (((_2504 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2504 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2504 == ::mosek::fusion::SolutionStatus::Feasible) || (_2504 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2500)((_2499 + _2505))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2498)(_2505)))); }else { (((*_2500)((_2499 + _2505))) = 0.0); }}}}}}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2506){ return ::mosek::fusion::p_LinearVariable::_new_LinearVariable(_pubthis,_2506); }void mosek::fusion::p_LinearVariable::destroy(){dom.reset();nativeidxs.reset();idxmap.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2507,    monty::rc_ptr< ::mosek::fusion::Set > _2508,    long long _2509,    std::shared_ptr< monty::ndarray< long long,1 > > _2510,    bool _2511){ return new mosek::fusion::BoundInterfaceVariable(_2507,_2508,_2509,_2510,_2511); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2507,    monty::rc_ptr< ::mosek::fusion::Set > _2508,    long long _2509,    std::shared_ptr< monty::ndarray< long long,1 > > _2510,    bool _2511) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2507,_2508,_2509,_2510,_2511); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2507,    monty::rc_ptr< ::mosek::fusion::Set > _2508,    long long _2509,    std::shared_ptr< monty::ndarray< long long,1 > > _2510,    bool _2511){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_SliceVariable::_initialize(_2507,_2508,_2509,_2510);(originvar = _2507); (islower = _2511); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::slice_( monty::rc_ptr< ::mosek::fusion::Set > _2512,long long _2513,std::shared_ptr< monty::ndarray< long long,1 > > _2514){ return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(originvar,_2512,_2513,_2514,islower); }void mosek::fusion::p_BoundInterfaceVariable::dual_values( long long _2515,std::shared_ptr< monty::ndarray< int,1 > > _2516,std::shared_ptr< monty::ndarray< long long,1 > > _2517,int _2518,std::shared_ptr< monty::ndarray< double,1 > > _2519){ if (islower){ mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_l(_2515,_2516,_2517,_2518,_2519); }else { mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_u(_2515,_2516,_2517,_2518,_2519); }}void mosek::fusion::p_BoundInterfaceVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2520,int _2521,std::shared_ptr< monty::ndarray< double,1 > > _2522){ if (islower){ mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_l(_2520,_2521,_2522); }else { mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_u(_2520,_2521,_2522); }}void mosek::fusion::p_BoundInterfaceVariable::destroy(){originvar.reset();}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2523,    monty::rc_ptr< ::mosek::fusion::Model > _2524){ return new mosek::fusion::ConicVariable(_2523,_2524); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2523,    monty::rc_ptr< ::mosek::fusion::Model > _2524) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2523,_2524); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2523,    monty::rc_ptr< ::mosek::fusion::Model > _2524){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2523,_2524);(dom = mosek::fusion::p_ConicVariable::_get_impl(_2523)->dom); (coneidx = mosek::fusion::p_ConicVariable::_get_impl(_2523)->coneidx); (conesize = mosek::fusion::p_ConicVariable::_get_impl(_2523)->conesize); (numcone = mosek::fusion::p_ConicVariable::_get_impl(_2523)->numcone); (nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConicVariable::_get_impl(_2523)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8330; for (int _2525=(int)0, _8331=(int)((mosek::fusion::p_ConicVariable::_get_impl(_2523)->nativeidxs)->size(0)); _2525 < _8331;++_2525)_8330.push_back(((*mosek::fusion::p_ConicVariable::_get_impl(_2523)->nativeidxs)(_2525))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8330.size()),_8330.begin(),_8330.end())); })()); else return (nullptr); })()); (names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_2523)->names_flushed); }}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2526,    const std::string &  _2527,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2528,    monty::rc_ptr< ::mosek::fusion::Set > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    int _2531,    int _2532,    int _2533,    long long _2534){ return new mosek::fusion::ConicVariable(_2526,_2527,_2528,_2529,_2530,_2531,_2532,_2533,_2534); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2526,    const std::string &  _2527,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2528,    monty::rc_ptr< ::mosek::fusion::Set > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    int _2531,    int _2532,    int _2533,    long long _2534) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2526,_2527,_2528,_2529,_2530,_2531,_2532,_2533,_2534); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2526,    const std::string &  _2527,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2528,    monty::rc_ptr< ::mosek::fusion::Set > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    int _2531,    int _2532,    int _2533,    long long _2534){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2526,_2527,_2529,_2534);(dom = _2528); (conesize = _2531); (coneidx = _2532); (numcone = _2533); (nativeidxs = _2530); (names_flushed = false); }}std::string mosek::fusion::ConicVariable::toString  ( ) { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2535 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->a(std::string ("ConicVariable( ")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->a(std::string ("(")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->a(shape_p->dim((int)0)); int _8332 = (int)1; int _8333 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2536 = _8332;_2536<_8333;++_2536){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->a(std::string (",")).get())->a(shape_p->dim(_2536)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2535.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::ConicVariable::elementDesc  ( long long _2537,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2538) { return mosek::fusion::p_ConicVariable::_get_impl(this)->elementDesc(_2537,_2538); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_ConicVariable::elementDesc( long long _2537,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2538){ _pubthis->elementName(_2537,_2538); mosek::fusion::p_QConeDomain::_get_impl(dom.get())->domainToString(_2537,_2538); return _2538; }void mosek::fusion::ConicVariable::elementName  ( long long _2539,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2540) { mosek::fusion::p_ConicVariable::_get_impl(this)->elementName(_2539,_2540); }void mosek::fusion::p_ConicVariable::elementName( long long _2539,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2540){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2540.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2539)).get())->a(std::string ("] ")); }void mosek::fusion::p_ConicVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8334 = (int)0; int _8335 = (int)((nativeidxs)->size(0)); for (int _2541 = _8334;_2541<_8335;++_2541){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2541)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2541))).get())->a(std::string ("]")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::ConicVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2542,    int _2543,    int _2544,    long long _2545,    long long _2546,    std::shared_ptr< monty::ndarray< int,1 > > _2547,    std::shared_ptr< monty::ndarray< int,1 > > _2548,    std::shared_ptr< monty::ndarray< int,1 > > _2549) { mosek::fusion::p_ConicVariable::_get_impl(this)->inst(_2542,_2543,_2544,_2545,_2546,_2547,_2548,_2549); }void mosek::fusion::p_ConicVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2542,int _2543,int _2544,long long _2545,long long _2546,std::shared_ptr< monty::ndarray< int,1 > > _2547,std::shared_ptr< monty::ndarray< int,1 > > _2548,std::shared_ptr< monty::ndarray< int,1 > > _2549){ if (nativeidxs){ int _8336 = _2543; int _8337 = _2544; for (int _2550 = _8336;_2550<_8337;++_2550){ (((*_2547)((_2546 + (long long)(_2550 - _2543)))) = ((*nativeidxs)(((*_2542)(((long long)_2550 - _2545)))))); }}else {}}void mosek::fusion::ConicVariable::inst  ( long long _2551,    long long _2552,    std::shared_ptr< monty::ndarray< int,1 > > _2553,    std::shared_ptr< monty::ndarray< int,1 > > _2554,    std::shared_ptr< monty::ndarray< int,1 > > _2555) { mosek::fusion::p_ConicVariable::_get_impl(this)->inst(_2551,_2552,_2553,_2554,_2555); }void mosek::fusion::p_ConicVariable::inst( long long _2551,long long _2552,std::shared_ptr< monty::ndarray< int,1 > > _2553,std::shared_ptr< monty::ndarray< int,1 > > _2554,std::shared_ptr< monty::ndarray< int,1 > > _2555){ if (((_2551 < (int)0) || (_2551 >= (long long)((nativeidxs)->size(0))))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}(((*_2553)(_2552)) = ((*nativeidxs)(_2551))); }void mosek::fusion::ConicVariable::set_values  ( long long _2556,    std::shared_ptr< monty::ndarray< int,1 > > _2557,    std::shared_ptr< monty::ndarray< long long,1 > > _2558,    int _2559,    std::shared_ptr< monty::ndarray< double,1 > > _2560,    bool _2561) { mosek::fusion::p_ConicVariable::_get_impl(this)->set_values(_2556,_2557,_2558,_2559,_2560,_2561); }void mosek::fusion::p_ConicVariable::set_values( long long _2556,std::shared_ptr< monty::ndarray< int,1 > > _2557,std::shared_ptr< monty::ndarray< long long,1 > > _2558,int _2559,std::shared_ptr< monty::ndarray< double,1 > > _2560,bool _2561){ if (_2561){ long long _2562 = (long long)1; int _2563 = (int)((_2558)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2564 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2556,_2557,_2558); int _8338 = (int)0; int _8339 = _2563; for (int _2565 = _8338;_2565<_8339;++_2565){ (_2562 = (_2562 * ((*_2557)(_2565)))); }int _2566 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2567 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8340; for (long long _2568=(int)0, _8341=_2562; _2568 < _8341;++_2568)_8340.push_back(((*nativeidxs)(_2564->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8340.size()),_8340.begin(),_8340.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2569 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2559 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8342; for (int _2570=(int)0, _8343=_2566; _2570 < _8343;++_2570)_8342.push_back(((*_2560)((_2559 + _2570)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8342.size()),_8342.begin(),_8342.end())); })()); else return (_2560); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2567,_2569); }else { }}void mosek::fusion::ConicVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2571,    std::shared_ptr< monty::ndarray< double,1 > > _2572,    bool _2573) { mosek::fusion::p_ConicVariable::_get_impl(this)->set_values(_2571,_2572,_2573); }void mosek::fusion::p_ConicVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2571,std::shared_ptr< monty::ndarray< double,1 > > _2572,bool _2573){ if (_2573){ int _2574 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2575 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8344; for (int _2576=(int)0, _8345=_2574; _2576 < _8345;++_2576)_8344.push_back(((*nativeidxs)(((*_2571)(_2576))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8344.size()),_8344.begin(),_8344.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2577 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8346; for (int _2578=(int)0, _8347=_2574; _2578 < _8347;++_2578)_8346.push_back(((*_2572)(_2578))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8346.size()),_8346.begin(),_8346.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2575,_2577); }else { }}void mosek::fusion::ConicVariable::values  ( long long _2579,    std::shared_ptr< monty::ndarray< int,1 > > _2580,    std::shared_ptr< monty::ndarray< long long,1 > > _2581,    int _2582,    std::shared_ptr< monty::ndarray< double,1 > > _2583,    bool _2584) { mosek::fusion::p_ConicVariable::_get_impl(this)->values(_2579,_2580,_2581,_2582,_2583,_2584); }void mosek::fusion::p_ConicVariable::values( long long _2579,std::shared_ptr< monty::ndarray< int,1 > > _2580,std::shared_ptr< monty::ndarray< long long,1 > > _2581,int _2582,std::shared_ptr< monty::ndarray< double,1 > > _2583,bool _2584){ long long _2585 = (long long)1; int _2586 = (int)((_2581)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2587 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2579,_2580,_2581); std::shared_ptr< monty::ndarray< double,1 > > _2588 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _2584) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); })(); int _8348 = (int)0; int _8349 = _2586; for (int _2589 = _8348;_2589<_8349;++_2589){ (_2585 = (_2585 * ((*_2580)(_2589)))); }long long _8350 = (long long)0; long long _8351 = _2585; for (long long _2590 = _8350;_2590<_8351;++_2590){ (((*_2583)((_2590 + _2582))) = ((*_2588)(((*nativeidxs)(_2587->get()))))); _2587->inc(); }}void mosek::fusion::ConicVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2591,    int _2592,    std::shared_ptr< monty::ndarray< double,1 > > _2593,    bool _2594) { mosek::fusion::p_ConicVariable::_get_impl(this)->values(_2591,_2592,_2593,_2594); }void mosek::fusion::p_ConicVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2591,int _2592,std::shared_ptr< monty::ndarray< double,1 > > _2593,bool _2594){ std::shared_ptr< monty::ndarray< double,1 > > _2595 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _2594) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); })(); int _8352 = (int)0; int _8353 = (int)((_2591)->size(0)); for (int _2596 = _8352;_2596<_8353;++_2596){ (((*_2593)((_2592 + _2596))) = ((*_2595)(((*nativeidxs)(((*_2591)(_2596))))))); }}void mosek::fusion::ConicVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2597) { mosek::fusion::p_ConicVariable::_get_impl(this)->make_continuous(_2597); }void mosek::fusion::p_ConicVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2597){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8354; for (int _2598=(int)0, _8355=(int)((_2597)->size(0)); _2598 < _8355;++_2598)_8354.push_back(((*nativeidxs)(((*_2597)(_2598))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8354.size()),_8354.begin(),_8354.end())); })()); }void mosek::fusion::ConicVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2599) { mosek::fusion::p_ConicVariable::_get_impl(this)->make_integer(_2599); }void mosek::fusion::p_ConicVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2599){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8356; for (int _2600=(int)0, _8357=(int)((_2599)->size(0)); _2600 < _8357;++_2600)_8356.push_back(((*nativeidxs)(((*_2599)(_2600))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8356.size()),_8356.begin(),_8356.end())); })()); }int mosek::fusion::p_ConicVariable::get_variable_index( int _2601){ if ((_2601 >= (int)((nativeidxs)->size(0)))){ throw ::mosek::fusion::IndexError(std::string ("Variable index out of range"));}else { return ((*nativeidxs)(_2601)); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2602){ return ::mosek::fusion::p_ConicVariable::_new_ConicVariable(_pubthis,_2602); }void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();dom.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _2603,    monty::rc_ptr< ::mosek::fusion::Model > _2604){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_2603,_2604);(name = mosek::fusion::p_ModelVariable::_get_impl(_2603)->name); (varid = mosek::fusion::p_ModelVariable::_get_impl(_2603)->varid); }}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2605,    const std::string &  _2606,    monty::rc_ptr< ::mosek::fusion::Set > _2607,    long long _2608){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_2605,_2607);(name = _2606); (varid = _2608); }}void mosek::fusion::ModelVariable::elementName  ( long long _2609,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2610) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_2609,_2610); }void mosek::fusion::p_ModelVariable::elementName( long long _2609,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2610){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2610.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2609)).get())->a(std::string ("]")); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::ModelVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2611,    std::shared_ptr< monty::ndarray< int,1 > > _2612) { return mosek::fusion::p_ModelVariable::_get_impl(this)->slice(_2611,_2612); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_ModelVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2611,std::shared_ptr< monty::ndarray< int,1 > > _2612){ if (((int)((_2611)->size(0)) != (int)((_2612)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _2613 = shape_p->slice(_2611,_2612); std::shared_ptr< monty::ndarray< long long,1 > > _2614 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_2614)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _2615 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_2615 > (int)0);(_2615 = (_2615 - (int)1))){ (((*_2614)((_2615 - (int)1))) = (((*_2614)(_2615)) * shape_p->dim(_2615))); }}long long _2616 = (long long)0; { int _2617 = (int)0; for (;(_2617 < (int)((_2614)->size(0)));( ++ _2617 )){ (_2616 = (_2616 + (((*_2614)(_2617)) * ((*_2611)(_2617))))); }}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),_2613,_2616,_2614); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::ModelVariable::slice  ( int _2618,    int _2619) { return mosek::fusion::p_ModelVariable::_get_impl(this)->slice(_2618,_2619); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_ModelVariable::slice( int _2618,int _2619){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Wrong size of slice"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _2620 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),shape_p->slice(_2618,_2619),(long long)_2618,_2620); }void mosek::fusion::p_ModelVariable::destroy(){}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::p_Set::make((int)0));}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc  ( long long _2622,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2623) { return mosek::fusion::p_NilVariable::_get_impl(this)->elementDesc(_2622,_2623); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::elementDesc( long long _2622,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2623){ return _2623; }void mosek::fusion::NilVariable::elementName  ( long long _2624,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2625) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_2624,_2625); }void mosek::fusion::p_NilVariable::elementName( long long _2624,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2625){ }void mosek::fusion::NilVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2626,    int _2627,    int _2628,    long long _2629,    long long _2630,    std::shared_ptr< monty::ndarray< int,1 > > _2631,    std::shared_ptr< monty::ndarray< int,1 > > _2632,    std::shared_ptr< monty::ndarray< int,1 > > _2633) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2626,_2627,_2628,_2629,_2630,_2631,_2632,_2633); }void mosek::fusion::p_NilVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2626,int _2627,int _2628,long long _2629,long long _2630,std::shared_ptr< monty::ndarray< int,1 > > _2631,std::shared_ptr< monty::ndarray< int,1 > > _2632,std::shared_ptr< monty::ndarray< int,1 > > _2633){ }void mosek::fusion::NilVariable::inst  ( long long _2634,    long long _2635,    std::shared_ptr< monty::ndarray< int,1 > > _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2634,_2635,_2636,_2637,_2638); }void mosek::fusion::p_NilVariable::inst( long long _2634,long long _2635,std::shared_ptr< monty::ndarray< int,1 > > _2636,std::shared_ptr< monty::ndarray< int,1 > > _2637,std::shared_ptr< monty::ndarray< int,1 > > _2638){ }void mosek::fusion::NilVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2639,    std::shared_ptr< monty::ndarray< double,1 > > _2640,    bool _2641) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2639,_2640,_2641); }void mosek::fusion::p_NilVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2639,std::shared_ptr< monty::ndarray< double,1 > > _2640,bool _2641){ }void mosek::fusion::NilVariable::set_values  ( long long _2642,    std::shared_ptr< monty::ndarray< int,1 > > _2643,    std::shared_ptr< monty::ndarray< long long,1 > > _2644,    int _2645,    std::shared_ptr< monty::ndarray< double,1 > > _2646,    bool _2647) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2642,_2643,_2644,_2645,_2646,_2647); }void mosek::fusion::p_NilVariable::set_values( long long _2642,std::shared_ptr< monty::ndarray< int,1 > > _2643,std::shared_ptr< monty::ndarray< long long,1 > > _2644,int _2645,std::shared_ptr< monty::ndarray< double,1 > > _2646,bool _2647){ }void mosek::fusion::NilVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2648,    int _2649,    std::shared_ptr< monty::ndarray< double,1 > > _2650,    bool _2651) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2648,_2649,_2650,_2651); }void mosek::fusion::p_NilVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2648,int _2649,std::shared_ptr< monty::ndarray< double,1 > > _2650,bool _2651){ }void mosek::fusion::NilVariable::values  ( long long _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< long long,1 > > _2654,    int _2655,    std::shared_ptr< monty::ndarray< double,1 > > _2656,    bool _2657) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2652,_2653,_2654,_2655,_2656,_2657); }void mosek::fusion::p_NilVariable::values( long long _2652,std::shared_ptr< monty::ndarray< int,1 > > _2653,std::shared_ptr< monty::ndarray< long long,1 > > _2654,int _2655,std::shared_ptr< monty::ndarray< double,1 > > _2656,bool _2657){ }void mosek::fusion::NilVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2658) { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(_2658); }void mosek::fusion::p_NilVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2658){ }void mosek::fusion::NilVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2659) { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(_2659); }void mosek::fusion::p_NilVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2659){ }void mosek::fusion::NilVariable::makeContinuous  ( ) { mosek::fusion::p_NilVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_NilVariable::makeContinuous( ){ _pubthis->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8358; for (long long _2660=(int)0, _8359=_pubthis->size(); _2660 < _8359;++_2660)_8358.push_back(_2660); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8358.size()),_8358.begin(),_8358.end())); })()); }void mosek::fusion::NilVariable::makeInteger  ( ) { mosek::fusion::p_NilVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_NilVariable::makeInteger( ){ _pubthis->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8360; for (long long _2661=(int)0, _8361=_pubthis->size(); _2661 < _8361;++_2661)_8360.push_back(_2661); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8360.size()),_8360.begin(),_8360.end())); })()); }std::string mosek::fusion::NilVariable::toString  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString( ){ return std::string ("NilVariable"); }long long mosek::fusion::NilVariable::size  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->size(); }long long mosek::fusion::p_NilVariable::size( ){ return (int)0; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::NilVariable::dual  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_NilVariable::dual( ){ return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::NilVariable::level  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_NilVariable::level( ){ return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index  ( std::shared_ptr< monty::ndarray< int,1 > > _2662) { return mosek::fusion::p_NilVariable::_get_impl(this)->index(_2662); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::index( std::shared_ptr< monty::ndarray< int,1 > > _2662){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index  ( int _2663) { return mosek::fusion::p_NilVariable::_get_impl(this)->index(_2663); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::index( int _2663){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2664,    std::shared_ptr< monty::ndarray< int,1 > > _2665) { return mosek::fusion::p_NilVariable::_get_impl(this)->slice(_2664,_2665); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2664,std::shared_ptr< monty::ndarray< int,1 > > _2665){ int _8362 = (int)0; int _8363 = (int)((_2664)->size(0)); for (int _2666 = _8362;_2666<_8363;++_2666){ if ((((*_2665)(_2666)) > ((*_2664)(_2666)))){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}else {}}return _pubthis; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice  ( int _2667,    int _2668) { return mosek::fusion::p_NilVariable::_get_impl(this)->slice(_2667,_2668); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::slice( int _2667,int _2668){ if ((_2668 > _2667)){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}else { return _pubthis; }}void mosek::fusion::p_NilVariable::destroy(){}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::NilVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2745)
{ return mosek::fusion::BaseVariable::pick(_2745); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2748)
{ return mosek::fusion::BaseVariable::pick(_2748); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NilVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2738,std::shared_ptr< monty::ndarray< int,1 > > _2739,std::shared_ptr< monty::ndarray< int,1 > > _2740)
{ return mosek::fusion::BaseVariable::pick(_2738,_2739,_2740); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _2731,int _2732,int _2733)
{ return mosek::fusion::BaseVariable::index(_2731,_2732,_2733); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _2734,int _2735)
{ return mosek::fusion::BaseVariable::index(_2734,_2735); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NilVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2742,std::shared_ptr< monty::ndarray< int,1 > > _2743)
{ return mosek::fusion::BaseVariable::pick(_2742,_2743); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::NilVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::NilVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2722)
{ mosek::fusion::BaseVariable::setLevel(_2722); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::diag(int _2751)
{ return mosek::fusion::BaseVariable::diag(_2751); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::antidiag(int _2750)
{ return mosek::fusion::BaseVariable::antidiag(_2750); }
void mosek::fusion::NilVariable::values(int _2705,std::shared_ptr< monty::ndarray< double,1 > > _2706,bool _2707)
{ mosek::fusion::BaseVariable::values(_2705,_2706,_2707); }
mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _2669,    monty::rc_ptr< ::mosek::fusion::Model > _2670){monty::rc_reserve __reserve_this(_pubthis); { { (model = _2670); (shape_p = mosek::fusion::p_BaseVariable::_get_impl(_2669)->shape_p); }}}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2671,    monty::rc_ptr< ::mosek::fusion::Set > _2672){monty::rc_reserve __reserve_this(_pubthis); { { (model = _2671); (shape_p = _2672); }}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::BaseVariable::elementDesc  ( long long _2673,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2674) { return mosek::fusion::p_BaseVariable::_get_impl(this)->elementDesc(_2673,_2674); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_BaseVariable::elementDesc( long long _2673,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2674){ _pubthis->elementName(_2673,_2674); return _2674; }std::string mosek::fusion::BaseVariable::toString  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2677 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string ("Variable( (")).get())->a(shape_p->dim((int)0)); int _8364 = (int)1; int _8365 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2678 = _8364;_2678<_8365;++_2678){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string (",")).get())->a(shape_p->dim(_2678)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string (" )")); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size < (int)51)){ int _8366 = (int)0; long long _8367 = mosek::fusion::p_Set::_get_impl(shape_p)->size; for (long long _2679 = _8366;_2679<_8367;++_2679){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string (",\n  ")); _pubthis->elementDesc(_2679,_2677); }}else { int _8368 = (int)0; int _8369 = (int)25; for (int _2680 = _8368;_2680<_8369;++_2680){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string (",\n  ")); _pubthis->elementDesc((long long)(_2680),_2677); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string ("... (")).get())->a((mosek::fusion::p_Set::_get_impl(shape_p)->size - (int)50)).get())->a(std::string (" elements left out)")); long long _8370 = (mosek::fusion::p_Set::_get_impl(shape_p)->size - (int)25); long long _8371 = mosek::fusion::p_Set::_get_impl(shape_p)->size; for (long long _2681 = _8370;_2681<_8371;++_2681){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string (",\n  ")); _pubthis->elementDesc(_2681,_2677); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2677.get())->toString(); }void mosek::fusion::BaseVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2682,    int _2683,    int _2684,    long long _2685,    long long _2686,    std::shared_ptr< monty::ndarray< int,1 > > _2687,    std::shared_ptr< monty::ndarray< int,1 > > _2688,    std::shared_ptr< monty::ndarray< int,1 > > _2689) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2682,_2683,_2684,_2685,_2686,_2687,_2688,_2689); }void mosek::fusion::p_BaseVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2682,int _2683,int _2684,long long _2685,long long _2686,std::shared_ptr< monty::ndarray< int,1 > > _2687,std::shared_ptr< monty::ndarray< int,1 > > _2688,std::shared_ptr< monty::ndarray< int,1 > > _2689){ int _8372 = _2683; int _8373 = _2684; for (int _2690 = _8372;_2690<_8373;++_2690){ _pubthis->inst((((*_2682)(_2690)) - _2685),((_2686 + _2690) - _2683),_2687,_2688,_2689); }}void mosek::fusion::BaseVariable::values  ( int _2705,    std::shared_ptr< monty::ndarray< double,1 > > _2706,    bool _2707) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2705,_2706,_2707); }void mosek::fusion::p_BaseVariable::values( int _2705,std::shared_ptr< monty::ndarray< double,1 > > _2706,bool _2707){ std::shared_ptr< monty::ndarray< long long,1 > > _2708 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< int,1 > > _2709 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8374 = (int)0; int _8375 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2710 = _8374;_2710<_8375;++_2710){ (((*_2708)(_2710)) = shape_p->stride(_2710)); }int _8376 = (int)0; int _8377 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2711 = _8376;_2711<_8377;++_2711){ (((*_2709)(_2711)) = shape_p->dim(_2711)); }_pubthis->values((long long)0,_2709,_2708,_2705,_2706,_2707); }void mosek::fusion::BaseVariable::setLevel  ( std::shared_ptr< monty::ndarray< double,1 > > _2722) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2722); }void mosek::fusion::p_BaseVariable::setLevel( std::shared_ptr< monty::ndarray< double,1 > > _2722){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)((_2722)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));}else {}_pubthis->set_values((long long)0,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8378; for (int _2723=(int)0, _8379=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2723 < _8379;++_2723)_8378.push_back(shape_p->dim(_2723)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8378.size()),_8378.begin(),_8378.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8380; for (int _2724=(int)0, _8381=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2724 < _8381;++_2724)_8380.push_back(shape_p->stride(_2724)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8380.size()),_8380.begin(),_8380.end())); })(),(int)0,_2722,true); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::getModel( ){ return model; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::BaseVariable::shape  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_BaseVariable::shape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::BaseVariable::getShape  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_BaseVariable::getShape( ){ return shape_p; }long long mosek::fusion::BaseVariable::size  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->size(); }long long mosek::fusion::p_BaseVariable::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable::dual  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual( ){ std::shared_ptr< monty::ndarray< double,1 > > _2725 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)0)){ _pubthis->values((int)0,_2725,false); }else {}return _2725; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable::level  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level( ){ std::shared_ptr< monty::ndarray< double,1 > > _2726 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)0)){ _pubthis->values((int)0,_2726,true); }else {}return _2726; }void mosek::fusion::BaseVariable::makeContinuous  ( ) { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous( ){ _pubthis->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8382; for (long long _2729=(long long)0, _8383=_pubthis->size(); _2729 < _8383;++_2729)_8382.push_back(_2729); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8382.size()),_8382.begin(),_8382.end())); })()); }void mosek::fusion::BaseVariable::makeInteger  ( ) { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger( ){ _pubthis->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8384; for (long long _2730=(long long)0, _8385=_pubthis->size(); _2730 < _8385;++_2730)_8384.push_back(_2730); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8384.size()),_8384.begin(),_8384.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::transpose( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(shape_p->dim((int)1),shape_p->dim((int)0)),(long long)((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{shape_p->stride((int)1),shape_p->stride((int)0)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2731,    int _2732,    int _2733) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2731,_2732,_2733); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2731,int _2732,int _2733){ return _pubthis->index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2731,_2732,_2733})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2734,    int _2735) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2734,_2735); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2734,int _2735){ return _pubthis->index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2734,_2735})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( std::shared_ptr< monty::ndarray< int,1 > > _2736) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2736); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( std::shared_ptr< monty::ndarray< int,1 > > _2736){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2736)->size(0)))){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_2736)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2737) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2737){ return _pubthis->pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2737})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2738,    std::shared_ptr< monty::ndarray< int,1 > > _2739,    std::shared_ptr< monty::ndarray< int,1 > > _2740) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2738,_2739,_2740); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2738,std::shared_ptr< monty::ndarray< int,1 > > _2739,std::shared_ptr< monty::ndarray< int,1 > > _2740){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)3)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}if ((((int)((_2738)->size(0)) != (int)((_2739)->size(0))) || ((int)((_2738)->size(0)) != (int)((_2740)->size(0))))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8386; for (int _2741=(int)0, _8387=(int)((_2738)->size(0)); _2741 < _8387;++_2741)_8386.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_2738)(_2741)),((*_2739)(_2741)),((*_2740)(_2741))}))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8386.size()),_8386.begin(),_8386.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2742,    std::shared_ptr< monty::ndarray< int,1 > > _2743) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2742,_2743); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2742,std::shared_ptr< monty::ndarray< int,1 > > _2743){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}if (((int)((_2742)->size(0)) != (int)((_2743)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8388; for (int _2744=(int)0, _8389=(int)((_2742)->size(0)); _2744 < _8389;++_2744)_8388.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_2742)(_2744)),((*_2743)(_2744))}))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8388.size()),_8388.begin(),_8388.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,2 > > _2745) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,2 > > _2745){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2745)->size(1)))){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8390; for (int _2746=(int)0, _8391=(int)((_2745)->size(0)); _2746 < _8391;++_2746)_8390.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8392; for (int _2747=(int)0, _8393=(int)((_2745)->size(1)); _2747 < _8393;++_2747)_8392.push_back(((*_2745)(_2746,_2747))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8392.size()),_8392.begin(),_8392.end())); })())); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8390.size()),_8390.begin(),_8390.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2748) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2748); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2748){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8394; for (int _2749=(int)0, _8395=(int)((_2748)->size(0)); _2749 < _8395;++_2749)_8394.push_back(((*_2748)(_2749))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8394.size()),_8394.begin(),_8394.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag  ( int _2750) { return mosek::fusion::p_BaseVariable::_get_impl(this)->antidiag(_2750); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::antidiag( int _2750){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));}else {}if ((_2750 >= (int)0)){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,((shape_p->dim((int)1) - (int)1) - _2750)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }else { return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(- _2750),(shape_p->dim((int)1) - (int)1)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::antidiag( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));}else {}return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,(shape_p->dim((int)1) - (int)1)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag  ( int _2751) { return mosek::fusion::p_BaseVariable::_get_impl(this)->diag(_2751); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::diag( int _2751){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));}else {}if ((_2751 >= (int)0)){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,_2751}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }else { return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(- _2751),(int)0}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::diag( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));}else {}return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,(int)0}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::general_diag( std::shared_ptr< monty::ndarray< int,1 > > _2752,std::shared_ptr< monty::ndarray< int,1 > > _2753){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2752)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2753)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));}else {}int _8396 = (int)0; int _8397 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2754 = _8396;_2754<_8397;++_2754){ if (((((*_2752)(_2754)) < (int)0) || (((*_2752)(_2754)) >= shape_p->dim(_2754)))){ throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));}else {}}long long _2755 = (long long)0; int _8398 = (int)0; int _8399 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2756 = _8398;_2756<_8399;++_2756){ (_2755 += (shape_p->stride(_2756) * ((*_2752)(_2756)))); }std::shared_ptr< monty::ndarray< int,1 > > _2757 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8400; for (int _2758=(int)0, _8401=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2758 < _8401;++_2758)_8400.push_back(([&]() -> int { if ( (((*_2753)(_2758)) > (int)0)) return (((((shape_p->dim(_2758) - ((*_2752)(_2758))) - (int)1) / ((*_2753)(_2758))) + (int)1)); else return (([&]() -> int { if ( (((*_2753)(_2758)) < (int)0)) return (((((*_2752)(_2758)) / (- ((*_2753)(_2758)))) + (int)1)); else return ((int)0); })()); })()); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8400.size()),_8400.begin(),_8400.end())); })(); int _2759 = ((*_2757)((int)0)); int _8402 = (int)1; int _8403 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2760 = _8402;_2760<_8403;++_2760){ (_2759 = ([&]() -> int { if ( (_2759 < ((*_2757)(_2760)))) return (_2759); else return (((*_2757)(_2760))); })()); }long long _2761 = (long long)0; int _8404 = (int)0; int _8405 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2762 = _8404;_2762<_8405;++_2762){ (_2761 += (((*_2753)(_2762)) * shape_p->stride(_2762))); }return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(_2759),_2755,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{_2761})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::asExpr( ){ return ::mosek::fusion::p_Expr::_new_Expr(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8406; for (long long _2763=(long long)0, _8407=(mosek::fusion::p_Set::_get_impl(shape_p)->size + (int)1); _2763 < _8407;++_2763)_8406.push_back(_2763); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8406.size()),_8406.begin(),_8406.end())); })(),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_pubthis}),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8408; for (long long _2764=(long long)0, _8409=mosek::fusion::p_Set::_get_impl(shape_p)->size; _2764 < _8409;++_2764)_8408.push_back(_2764); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8408.size()),_8408.begin(),_8408.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8410; for (long long _2765=(long long)0, _8411=mosek::fusion::p_Set::_get_impl(shape_p)->size; _2765 < _8411;++_2765)_8410.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8410.size()),_8410.begin(),_8410.end())); })(),nullptr,shape_p,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2766,    std::shared_ptr< monty::ndarray< int,1 > > _2767) { return mosek::fusion::p_BaseVariable::_get_impl(this)->slice(_2766,_2767); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2766,std::shared_ptr< monty::ndarray< int,1 > > _2767){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8412; for (int _2768=(int)0, _8413=(int)((_2766)->size(0)); _2768 < _8413;++_2768)_8412.push_back((((*_2767)(_2768)) - ((*_2766)(_2768)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8412.size()),_8412.begin(),_8412.end())); })()),mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_2766),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8414; for (int _2769=(int)0, _8415=(int)((_2766)->size(0)); _2769 < _8415;++_2769)_8414.push_back(shape_p->stride(_2769)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8414.size()),_8414.begin(),_8414.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice  ( int _2770,    int _2771) { return mosek::fusion::p_BaseVariable::_get_impl(this)->slice(_2770,_2771); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::slice( int _2770,int _2771){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make((_2771 - _2770)),(long long)(_2770),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)1})); }void mosek::fusion::p_BaseVariable::destroy(){model.reset();shape_p.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2834) { return mosek::fusion::p_Var::compress(_2834); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress( monty::rc_ptr< ::mosek::fusion::Variable > _2834){ int _2835 = _2834->getShape()->realnd(); if ((_2835 == mosek::fusion::p_Set::_get_impl(_2834->getShape())->nd)){ return _2834; }else if ((_2835 == (int)1)){ return ::mosek::fusion::p_Var::reshape(_2834,(int)mosek::fusion::p_Set::_get_impl(_2834->getShape())->size); }else { std::shared_ptr< monty::ndarray< int,1 > > _2836 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2835))); { int _2837 = (int)0; int _8416 = (int)0; int _8417 = mosek::fusion::p_Set::_get_impl(_2834->getShape())->nd; for (int _2838 = _8416;_2838<_8417;++_2838){ if ((_2834->getShape()->dim(_2838) > (int)1)){ (((*_2836)(_2837)) = _2834->getShape()->dim(_2838)); ( ++ _2837 ); }else {}}}return ::mosek::fusion::p_Var::reshape(_2834,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2836))); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2839,    int _2840) { return mosek::fusion::p_Var::reshape(_2839,_2840); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2839,int _2840){ if ((_2840 != mosek::fusion::p_Set::_get_impl(_2839->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2839,::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(_2840)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2841,    int _2842,    int _2843) { return mosek::fusion::p_Var::reshape(_2841,_2842,_2843); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2841,int _2842,int _2843){ if (((_2842 * _2843) != mosek::fusion::p_Set::_get_impl(_2841->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2841,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2842,_2843)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_2843,(long long)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2844) { return mosek::fusion::p_Var::flatten(_2844); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten( monty::rc_ptr< ::mosek::fusion::Variable > _2844){ if ((mosek::fusion::p_Set::_get_impl(_2844->getShape())->nd == (int)1)){ return _2844; }else { return ::mosek::fusion::p_Var::reshape(_2844,::mosek::fusion::p_Set::make((int)mosek::fusion::p_Set::_get_impl(_2844->getShape())->size)); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2845,    std::shared_ptr< monty::ndarray< int,1 > > _2846) { return mosek::fusion::p_Var::reshape(_2845,_2846); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2845,std::shared_ptr< monty::ndarray< int,1 > > _2846){ monty::rc_ptr< ::mosek::fusion::Set > _2847 = ::mosek::fusion::p_Set::make(_2846); return ::mosek::fusion::p_Var::reshape(_2845,_2847); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2848,    monty::rc_ptr< ::mosek::fusion::Set > _2849) { return mosek::fusion::p_Var::reshape(_2848,_2849); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2848,monty::rc_ptr< ::mosek::fusion::Set > _2849){ if ((mosek::fusion::p_Set::_get_impl(_2849)->size != mosek::fusion::p_Set::_get_impl(_2848->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2848,_2849,(long long)((int)0),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8418; for (int _2850=(int)0, _8419=mosek::fusion::p_Set::_get_impl(_2849)->nd; _2850 < _8419;++_2850)_8418.push_back(_2849->stride(_2850)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8418.size()),_8418.begin(),_8418.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape_( monty::rc_ptr< ::mosek::fusion::Variable > _2851,monty::rc_ptr< ::mosek::fusion::Set > _2852){ std::shared_ptr< monty::ndarray< long long,1 > > _2853 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8420; for (int _2854=(int)0, _8421=mosek::fusion::p_Set::_get_impl(_2852)->nd; _2854 < _8421;++_2854)_8420.push_back(_2852->stride(_2854)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8420.size()),_8420.begin(),_8420.end())); })(); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2851,_2852,(long long)0,_2853); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_flip_( monty::rc_ptr< ::mosek::fusion::Variable > _2855,std::shared_ptr< monty::ndarray< int,1 > > _2856){ std::shared_ptr< monty::ndarray< long long,1 > > _2857 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8422; for (int _2858=(int)0, _8423=mosek::fusion::p_Set::_get_impl(_2855->getShape())->nd; _2858 < _8423;++_2858)_8422.push_back(_2855->getShape()->stride(_2858)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8422.size()),_8422.begin(),_8422.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _2859 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8424; for (int _2860=(int)0, _8425=mosek::fusion::p_Set::_get_impl(_2855->getShape())->nd; _2860 < _8425;++_2860)_8424.push_back(_2855->getShape()->dim(_2860)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8424.size()),_8424.begin(),_8424.end())); })(); long long _2861 = (long long)0; int _8426 = (int)0; int _8427 = (int)((_2856)->size(0)); for (int _2862 = _8426;_2862<_8427;++_2862){ (_2861 = (_2861 + (((*_2857)(((*_2856)(_2862)))) * (((*_2859)(_2862)) - (int)1)))); (((*_2857)(((*_2859)(_2862)))) = (- ((*_2857)(((*_2859)(_2862)))))); }return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2855,_2855->getShape(),(long long)0,_2857); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_( monty::rc_ptr< ::mosek::fusion::Variable > _2863,std::shared_ptr< monty::ndarray< int,1 > > _2864){ std::shared_ptr< monty::ndarray< long long,1 > > _2865 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8428; for (int _2866=(int)0, _8429=mosek::fusion::p_Set::_get_impl(_2863->getShape())->nd; _2866 < _8429;++_2866)_8428.push_back(_2863->getShape()->stride(((*_2864)(_2866)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8428.size()),_8428.begin(),_8428.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _2867 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8430; for (int _2868=(int)0, _8431=mosek::fusion::p_Set::_get_impl(_2863->getShape())->nd; _2868 < _8431;++_2868)_8430.push_back(_2863->getShape()->dim(((*_2864)(_2868)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8430.size()),_8430.begin(),_8430.end())); })(); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2863,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2867)),(long long)0,_2865); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2869,    int _2870) { return mosek::fusion::p_Var::hrepeat(_2869,_2870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2869,int _2870){ return ::mosek::fusion::p_Var::drepeat(_2869,(int)1,_2870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2871,    int _2872) { return mosek::fusion::p_Var::vrepeat(_2871,_2872); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2871,int _2872){ return ::mosek::fusion::p_Var::drepeat(_2871,(int)0,_2872); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2873,    int _2874) { return mosek::fusion::p_Var::repeat(_2873,_2874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat( monty::rc_ptr< ::mosek::fusion::Variable > _2873,int _2874){ return ::mosek::fusion::p_Var::drepeat(_2873,(int)0,_2874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2875,    int _2876,    int _2877) { return mosek::fusion::p_Var::repeat(_2875,_2876,_2877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat( monty::rc_ptr< ::mosek::fusion::Variable > _2875,int _2876,int _2877){ return ::mosek::fusion::p_Var::drepeat(_2875,_2876,_2877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2878,int _2879,int _2880){ if ((_2880 < (int)0)){ throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));}else if ((_2880 == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else if ((_2880 == (int)1)){ return _2878; }else { return ::mosek::fusion::p_RepeatVariable::_new_RepeatVariable(_2878,_2879,_2880); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2881) { return mosek::fusion::p_Var::stack(_2881); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2881){ { monty::rc_ptr< ::mosek::fusion::Model > _2882 = nullptr; int _8432 = (int)0; int _8433 = (int)((_2881)->size(0)); for (int _2883 = _8432;_2883<_8433;++_2883){ int _8434 = (int)0; int _8435 = (int)((((*_2881)(_2883)))->size(0)); for (int _2884 = _8434;_2884<_8435;++_2884){ if (! _2882){ (_2882 = ((*((*_2881)(_2883)))(_2884))->getModel()); }else if ((((*((*_2881)(_2883)))(_2884))->getModel() && (((*((*_2881)(_2883)))(_2884))->getModel() != _2882))){ throw ::mosek::fusion::ModelError(std::string ("Variables belong to different models"));}else {}}}}int _2885 = (int)0; int _8436 = (int)0; int _8437 = (int)((_2881)->size(0)); for (int _2886 = _8436;_2886<_8437;++_2886){ if (((int)((((*_2881)(_2886)))->size(0)) > (int)0)){ ( ++ _2885 ); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2887 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2885))); if ((_2885 == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else {}int _2888 = (int)0; int _8438 = (int)0; int _8439 = (int)((_2881)->size(0)); for (int _2889 = _8438;_2889<_8439;++_2889){ if (((int)((((*_2881)(_2889)))->size(0)) == (int)0)){ }else if (((int)((((*_2881)(_2889)))->size(0)) == (int)1)){ monty::rc_ptr< ::mosek::fusion::Variable > _2890 = ((*((*_2881)(_2889)))((int)0)); (((*_2887)(_2888)) = ([&]() -> monty::rc_ptr< ::mosek::fusion::Variable > { if ( (mosek::fusion::p_Set::_get_impl(_2890->getShape())->nd == (int)1)) return (::mosek::fusion::p_Var::reshape(_2890,_2890->getShape()->dim((int)0),(int)1)); else return (_2890); })()); ( ++ _2888 ); }else { int _2891 = (int)0; int _8440 = (int)0; int _8441 = (int)((((*_2881)(_2889)))->size(0)); for (int _2892 = _8440;_2892<_8441;++_2892){ if ((mosek::fusion::p_Set::_get_impl(((*((*_2881)(_2889)))(_2892))->getShape())->size > (int)0)){ ( ++ _2891 ); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2893 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2891))); int _2894 = (int)0; int _8442 = (int)0; int _8443 = (int)((((*_2881)(_2889)))->size(0)); for (int _2895 = _8442;_2895<_8443;++_2895){ monty::rc_ptr< ::mosek::fusion::Variable > _2896 = ((*((*_2881)(_2889)))(_2895)); if ((mosek::fusion::p_Set::_get_impl(_2896->getShape())->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(_2896->getShape())->nd == (int)1)){ (((*_2893)(_2894)) = ::mosek::fusion::p_Var::reshape(_2896,_2896->getShape()->dim((int)0),(int)1)); }else { (((*_2893)(_2894)) = _2896); }( ++ _2894 ); }else {}}(((*_2887)(_2888)) = ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2893,(int)1)); ( ++ _2888 ); }}return ([&]() -> monty::rc_ptr< ::mosek::fusion::Variable > { if ( ((int)((_2887)->size(0)) == (int)1)) return (((*_2887)((int)0))); else return (::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2887,(int)0)); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2897,    monty::rc_ptr< ::mosek::fusion::Variable > _2898,    monty::rc_ptr< ::mosek::fusion::Variable > _2899) { return mosek::fusion::p_Var::vstack(_2897,_2898,_2899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _2897,monty::rc_ptr< ::mosek::fusion::Variable > _2898,monty::rc_ptr< ::mosek::fusion::Variable > _2899){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2897,_2898,_2899}),(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2900,    monty::rc_ptr< ::mosek::fusion::Variable > _2901) { return mosek::fusion::p_Var::vstack(_2900,_2901); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _2900,monty::rc_ptr< ::mosek::fusion::Variable > _2901){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2900,_2901}),(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2902) { return mosek::fusion::p_Var::vstack(_2902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2902){ return ::mosek::fusion::p_Var::dstack(_2902,(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2903,    monty::rc_ptr< ::mosek::fusion::Variable > _2904,    monty::rc_ptr< ::mosek::fusion::Variable > _2905) { return mosek::fusion::p_Var::hstack(_2903,_2904,_2905); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _2903,monty::rc_ptr< ::mosek::fusion::Variable > _2904,monty::rc_ptr< ::mosek::fusion::Variable > _2905){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2903,_2904,_2905}),(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2906,    monty::rc_ptr< ::mosek::fusion::Variable > _2907) { return mosek::fusion::p_Var::hstack(_2906,_2907); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _2906,monty::rc_ptr< ::mosek::fusion::Variable > _2907){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2906,_2907}),(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2908) { return mosek::fusion::p_Var::hstack(_2908); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2908){ return ::mosek::fusion::p_Var::dstack(_2908,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2909,    monty::rc_ptr< ::mosek::fusion::Variable > _2910,    monty::rc_ptr< ::mosek::fusion::Variable > _2911,    int _2912) { return mosek::fusion::p_Var::stack(_2909,_2910,_2911,_2912); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( monty::rc_ptr< ::mosek::fusion::Variable > _2909,monty::rc_ptr< ::mosek::fusion::Variable > _2910,monty::rc_ptr< ::mosek::fusion::Variable > _2911,int _2912){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2909,_2910,_2911}),_2912); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2913,    monty::rc_ptr< ::mosek::fusion::Variable > _2914,    int _2915) { return mosek::fusion::p_Var::stack(_2913,_2914,_2915); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( monty::rc_ptr< ::mosek::fusion::Variable > _2913,monty::rc_ptr< ::mosek::fusion::Variable > _2914,int _2915){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2913,_2914}),_2915); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2916,    int _2917) { return mosek::fusion::p_Var::stack(_2916,_2917); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2916,int _2917){ return ::mosek::fusion::p_Var::dstack(_2916,_2917); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2918,int _2919){ { monty::rc_ptr< ::mosek::fusion::Model > _2920 = nullptr; int _8444 = (int)0; int _8445 = (int)((_2918)->size(0)); for (int _2921 = _8444;_2921<_8445;++_2921){ if (! _2920){ (_2920 = ((*_2918)(_2921))->getModel()); }else if ((((*_2918)(_2921))->getModel() && (((*_2918)(_2921))->getModel() != _2920))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2922 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::string _2923 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_2920.get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_2920.get())->getName()); else return (std::string ("?")); })(); std::string _2924 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(((*_2918)(_2921))->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(((*_2918)(_2921))->getModel().get())->getName()); else return (std::string ("?")); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2922.get())->a(std::string ("Variables belong to different models: '")).get())->a(_2923).get())->a(std::string ("' and '")).get())->a(_2924).get())->a(std::string ("'")); throw ::mosek::fusion::ModelError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2922.get())->toString());}else {}}}if (((int)((_2918)->size(0)) == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else if (((int)((_2918)->size(0)) == (int)1)){ return ((*_2918)((int)1)); }else { int _2925 = (int)((_2918)->size(0)); int _2926 = (_2919 + (int)1); int _8446 = (int)0; int _8447 = _2925; for (int _2927 = _8446;_2927<_8447;++_2927){ if ((mosek::fusion::p_Set::_get_impl(((*_2918)(_2927))->getShape())->nd > _2926)){ (_2926 = mosek::fusion::p_Set::_get_impl(((*_2918)(_2927))->getShape())->nd); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _2928 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8448; for (int _2929=(int)0, _8449=_2926; _2929 < _8449;++_2929)_8448.push_back(((*_2918)((int)0))->getShape()->dim(_2929)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8448.size()),_8448.begin(),_8448.end())); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2930 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2925))); (((*_2930)((int)0)) = ::mosek::fusion::p_Var::reshape(((*_2918)((int)0)),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2928)))); int _8450 = (int)1; int _8451 = _2925; for (int _2931 = _8450;_2931<_8451;++_2931){ int _8452 = (int)0; int _8453 = _2926; for (int _2932 = _8452;_2932<_8453;++_2932){ if (((_2932 != _2919) && (((*_2918)(_2931))->getShape()->dim(_2932) != ((*_2928)(_2932))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));}else {}}(((*_2928)(_2919)) = ((*_2918)(_2931))->getShape()->dim(_2919)); (((*_2930)(_2931)) = ::mosek::fusion::p_Var::reshape(((*_2918)(_2931)),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2928)))); }return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2930,_2919); }}void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2933,    monty::rc_ptr< ::mosek::fusion::Model > _2934){ return new mosek::fusion::LinearPSDConstraint(_2933,_2934); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2933,    monty::rc_ptr< ::mosek::fusion::Model > _2934) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2933,_2934); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2933,    monty::rc_ptr< ::mosek::fusion::Model > _2934){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2933,_2934);(coneidx = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2933)->coneidx); (conesize = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2933)->conesize); (psdvardim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2933)->psdvardim); (numcones = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2933)->numcones); (names_flushed = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2933)->names_flushed); }}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2935,    const std::string &  _2936,    monty::rc_ptr< ::mosek::fusion::Set > _2937,    std::shared_ptr< monty::ndarray< int,1 > > _2938,    int _2939,    int _2940,    int _2941,    std::shared_ptr< monty::ndarray< long long,1 > > _2942,    std::shared_ptr< monty::ndarray< int,1 > > _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< double,1 > > _2945,    std::shared_ptr< monty::ndarray< int,1 > > _2946,    std::shared_ptr< monty::ndarray< int,1 > > _2947,    std::shared_ptr< monty::ndarray< int,1 > > _2948){ return new mosek::fusion::LinearPSDConstraint(_2935,_2936,_2937,_2938,_2939,_2940,_2941,_2942,_2943,_2944,_2945,_2946,_2947,_2948); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2935,    const std::string &  _2936,    monty::rc_ptr< ::mosek::fusion::Set > _2937,    std::shared_ptr< monty::ndarray< int,1 > > _2938,    int _2939,    int _2940,    int _2941,    std::shared_ptr< monty::ndarray< long long,1 > > _2942,    std::shared_ptr< monty::ndarray< int,1 > > _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< double,1 > > _2945,    std::shared_ptr< monty::ndarray< int,1 > > _2946,    std::shared_ptr< monty::ndarray< int,1 > > _2947,    std::shared_ptr< monty::ndarray< int,1 > > _2948) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2935,_2936,_2937,_2938,_2939,_2940,_2941,_2942,_2943,_2944,_2945,_2946,_2947,_2948); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2935,    const std::string &  _2936,    monty::rc_ptr< ::mosek::fusion::Set > _2937,    std::shared_ptr< monty::ndarray< int,1 > > _2938,    int _2939,    int _2940,    int _2941,    std::shared_ptr< monty::ndarray< long long,1 > > _2942,    std::shared_ptr< monty::ndarray< int,1 > > _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< double,1 > > _2945,    std::shared_ptr< monty::ndarray< int,1 > > _2946,    std::shared_ptr< monty::ndarray< int,1 > > _2947,    std::shared_ptr< monty::ndarray< int,1 > > _2948){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2935,_2936,_2937,_2938,_2942,_2943,_2944,_2945,_2946,_2947,_2948);(coneidx = _2940); (conesize = _2939); (numcones = _2941); int _2949 = shape_p->dim((int)0); int _2950 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _2949)))) - (int)1) / (int)2); if ((((_2950 * (_2950 + (int)1)) / (int)2) != _2949)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite constraint"));}else {}(psdvardim = _2950); (names_flushed = false); }}void mosek::fusion::p_LinearPSDConstraint::domainToString( long long _2951,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2952){ std::shared_ptr< monty::ndarray< int,1 > > _2953 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_2951); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2952.get())->a(std::string (" : element (")).get())->a(((*_2953)((int)0))); int _8454 = (int)1; int _8455 = (int)((_2953)->size(0)); for (int _2954 = _8454;_2954<_8455;++_2954){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2952.get())->a(std::string (",")).get())->a(((*_2953)(_2954))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2952.get())->a(std::string (") in a positive semi-definite cone of size (")).get())->a(shape_p->dim((int)0)); int _8456 = (int)1; int _8457 = (int)((_2953)->size(0)); for (int _2955 = _8456;_2955<_8457;++_2955){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2952.get())->a(std::string (",")).get())->a(shape_p->dim(_2955)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2952.get())->a(std::string (")")); }std::string mosek::fusion::LinearPSDConstraint::toString  ( ) { return mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDConstraint::toString( ){ long long _2956 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _2957 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_2956))); toStringArray(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8458; for (long long _2958=(int)0, _8459=_2956; _2958 < _8459;++_2958)_8458.push_back(_2958); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8458.size()),_8458.begin(),_8458.end())); })(),(long long)0,_2957,false); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2959 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->a(std::string ("LinearPSDConstraint( (")).get())->a(shape_p->dim((int)0)); int _8460 = (int)1; int _8461 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2960 = _8460;_2960<_8461;++_2960){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->a(std::string (",")).get())->a(shape_p->dim(_2960)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->a(std::string ("  ")).get())->a(((*_2957)((int)0))); int _8462 = (int)1; int _8463 = (int)((_2957)->size(0)); for (int _2961 = _8462;_2961<_8463;++_2961){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_2957)(_2961))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2959.get())->toString(); }void mosek::fusion::p_LinearPSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2962,long long _2963,std::shared_ptr< monty::ndarray< std::string,1 > > _2964){ toStringArray(_2962,_2963,_2964,true); }void mosek::fusion::p_LinearPSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2965,long long _2966,std::shared_ptr< monty::ndarray< std::string,1 > > _2967,bool _2968){ int _8464 = (int)0; int _8465 = (int)((_2965)->size(0)); for (int _2969 = _8464;_2969<_8465;++_2969){ if (((((*_2965)(_2969)) < (int)0) || (((*_2965)(_2969)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_2965)->size(0)) + _2966) > (long long)((_2967)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2970 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); long long _2971 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _2972 = (int)0; int _8466 = (int)0; int _8467 = (int)((_2965)->size(0)); for (int _2973 = _8466;_2973<_8467;++_2973){ long long _2974 = ((*_2965)(_2973)); long long _2975 = (_2974 / conesize); long long _2976 = (_2974 % conesize); long long _2977 = (_2974 + coneidx); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2975).get())->a(std::string (",")).get())->a(_2976).get())->a(std::string ("] : ")); int _2978 = ((*nativeindexes)(_2974)); int _2979 = (int)0; while (((_2979 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2979)) < _2977))) { ( ++ _2979 ); }int _2980 = _2979; while (((_2979 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2979)) == _2977))) { ( ++ _2979 ); }int _2981 = (int)0; while (((_2981 < _2971) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2981)) < _2977))) { ( ++ _2981 ); }int _2982 = _2981; while (((_2981 < _2971) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2981)) == _2977))) { ( ++ _2981 ); }int _8468 = _2980; int _8469 = _2979; for (int _2983 = _8468;_2983<_8469;++_2983){ double _2984 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_2983)); if ((_2984 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" + ")).get())->a(_2984).get())->a(std::string (" ")); }else if ((_2984 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" - ")).get())->a((- _2984)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" + 0.0 ")); }mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_2983)),_2970); }int _2985 = _2981; (_2981 = _2982); while (((_2981 < _2985) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2981)) == _2977))) { int _2986 = _2981; int _2987 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2981)); ( ++ _2981 ); while (((_2981 < _2985) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2981)) == _2987))) { ( ++ _2981 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2986))); int _8470 = (_2986 + (int)1); int _8471 = _2981; for (int _2988 = _8470;_2988<_8471;++_2988){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2988))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2986)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2986)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_2977)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2977))); }else if ((((*cache_bfix)(_2977)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2977))); }else {}}else {}if (_2968){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->a(std::string (" ")); domainToString(_2974,_2970); }else {}(((*_2967)(((long long)_2973 + _2966))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_2970.get())->toString()); }}void mosek::fusion::p_LinearPSDConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2989 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); if ((numcones > (int)1)){ int _2990 = (int)0; int _8472 = (int)0; int _8473 = numcones; for (int _2991 = _8472;_2991<_8473;++_2991){ int _8474 = (int)0; int _8475 = conesize; for (int _2992 = _8474;_2992<_8475;++_2992){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2990)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2989.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2991).get())->a(std::string (",")).get())->a(_2992).get())->a(std::string ("]")).get())->toString()); ( ++ _2990 ); }}}else { int _2993 = (int)0; int _8476 = (int)0; int _8477 = conesize; for (int _2994 = _8476;_2994<_8477;++_2994){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2993)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2989.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2994).get())->a(std::string ("]")).get())->toString()); ( ++ _2993 ); }}int _8478 = (int)0; int _8479 = numcones; for (int _2995 = _8478;_2995<_8479;++_2995){ mosek::fusion::p_Model::_get_impl(model.get())->task_barvar_name((coneidx + _2995),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2989.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2995).get())->a(std::string ("].coneslack")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::p_LinearPSDConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _2996,std::shared_ptr< monty::ndarray< double,1 > > _2997,long long _2998,int _2999,int _3000){ std::shared_ptr< monty::ndarray< double,1 > > _3001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000))); std::shared_ptr< monty::ndarray< int,1 > > _3002 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3000))); int _8480 = (int)0; int _8481 = _3000; for (int _3003 = _8480;_3003<_8481;++_3003){ (((*_3002)(_3003)) = ((*nativeindexes)((((*_2996)((_2999 + _3003))) - _2998)))); }int _8482 = (int)0; int _8483 = (int)((_3001)->size(0)); for (int _3004 = _8482;_3004<_8483;++_3004){ (((*_3001)(_3004)) = (- ((*_2997)((((*_2996)((_2999 + _3004))) - _2998))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3002,_3001); }void mosek::fusion::p_LinearPSDConstraint::dual_values( long long _3005,std::shared_ptr< monty::ndarray< int,1 > > _3006,std::shared_ptr< monty::ndarray< long long,1 > > _3007,int _3008,std::shared_ptr< monty::ndarray< double,1 > > _3009){ monty::rc_ptr< ::mosek::fusion::IndexCounter > _3010 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3005,_3006,_3007); int _3011 = (int)1; int _8484 = (int)0; int _8485 = (int)((_3006)->size(0)); for (int _3012 = _8484;_3012<_8485;++_3012){ (_3011 *= ((*_3006)(_3012))); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3013 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3014 = conesize; int _8486 = (int)0; int _8487 = _3011; for (int _3015 = _8486;_3015<_8487;++_3015){ long long _3016 = ((_3010->get() / _3014) + coneidx); long long _3017 = (_3010->get() % _3014); (((*_3009)(_3015)) = ((*((*_3013)(coneidx)))(_3017))); _3010->inc(); }}void mosek::fusion::p_LinearPSDConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3018,int _3019,std::shared_ptr< monty::ndarray< double,1 > > _3020){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3021 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3022 = conesize; int _8488 = (int)0; int _8489 = (int)((_3018)->size(0)); for (int _3023 = _8488;_3023<_8489;++_3023){ long long _3024 = ((((*_3018)(_3023)) / _3022) + coneidx); long long _3025 = (((*_3018)(_3023)) % _3022); (((*_3020)(_3023)) = ((*((*_3021)(_3024)))(_3025))); }}void mosek::fusion::p_LinearPSDConstraint::level_values( long long _3026,std::shared_ptr< monty::ndarray< int,1 > > _3027,std::shared_ptr< monty::ndarray< long long,1 > > _3028,int _3029,std::shared_ptr< monty::ndarray< double,1 > > _3030){ monty::rc_ptr< ::mosek::fusion::IndexCounter > _3031 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3026,_3027,_3028); int _3032 = (int)1; int _8490 = (int)0; int _8491 = (int)((_3027)->size(0)); for (int _3033 = _8490;_3033<_8491;++_3033){ (_3032 *= ((*_3027)(_3033))); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3034 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3035 = conesize; int _8492 = (int)0; int _8493 = _3032; for (int _3036 = _8492;_3036<_8493;++_3036){ long long _3037 = ((_3031->get() / _3035) + coneidx); long long _3038 = (_3031->get() % _3035); (((*_3030)(_3036)) = ((*((*_3034)(coneidx)))(_3038))); _3031->inc(); }}void mosek::fusion::p_LinearPSDConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3039,int _3040,std::shared_ptr< monty::ndarray< double,1 > > _3041){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3042 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3043 = psdvardim; int _8494 = (int)0; int _8495 = (int)((_3039)->size(0)); for (int _3044 = _8494;_3044<_8495;++_3044){ long long _3045 = ((((*_3039)(_3044)) / _3043) + coneidx); long long _3046 = (((*_3039)(_3044)) % _3043); (((*_3041)(_3044)) = ((*((*_3042)(_3045)))(_3046))); }}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3047){ return ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(_pubthis,_3047); }void mosek::fusion::p_LinearPSDConstraint::destroy(){}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _3048,    monty::rc_ptr< ::mosek::fusion::Model > _3049){ return new mosek::fusion::PSDConstraint(_3048,_3049); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _3048,    monty::rc_ptr< ::mosek::fusion::Model > _3049) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_3048,_3049); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _3048,    monty::rc_ptr< ::mosek::fusion::Model > _3049){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3048,_3049);(coneidx = mosek::fusion::p_PSDConstraint::_get_impl(_3048)->coneidx); (conesize = mosek::fusion::p_PSDConstraint::_get_impl(_3048)->conesize); (numcones = mosek::fusion::p_PSDConstraint::_get_impl(_3048)->numcones); (names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_3048)->names_flushed); }}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3050,    const std::string &  _3051,    monty::rc_ptr< ::mosek::fusion::Set > _3052,    std::shared_ptr< monty::ndarray< int,1 > > _3053,    int _3054,    int _3055,    int _3056,    std::shared_ptr< monty::ndarray< long long,1 > > _3057,    std::shared_ptr< monty::ndarray< int,1 > > _3058,    std::shared_ptr< monty::ndarray< double,1 > > _3059,    std::shared_ptr< monty::ndarray< double,1 > > _3060,    std::shared_ptr< monty::ndarray< int,1 > > _3061,    std::shared_ptr< monty::ndarray< int,1 > > _3062,    std::shared_ptr< monty::ndarray< int,1 > > _3063){ return new mosek::fusion::PSDConstraint(_3050,_3051,_3052,_3053,_3054,_3055,_3056,_3057,_3058,_3059,_3060,_3061,_3062,_3063); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3050,    const std::string &  _3051,    monty::rc_ptr< ::mosek::fusion::Set > _3052,    std::shared_ptr< monty::ndarray< int,1 > > _3053,    int _3054,    int _3055,    int _3056,    std::shared_ptr< monty::ndarray< long long,1 > > _3057,    std::shared_ptr< monty::ndarray< int,1 > > _3058,    std::shared_ptr< monty::ndarray< double,1 > > _3059,    std::shared_ptr< monty::ndarray< double,1 > > _3060,    std::shared_ptr< monty::ndarray< int,1 > > _3061,    std::shared_ptr< monty::ndarray< int,1 > > _3062,    std::shared_ptr< monty::ndarray< int,1 > > _3063) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_3050,_3051,_3052,_3053,_3054,_3055,_3056,_3057,_3058,_3059,_3060,_3061,_3062,_3063); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3050,    const std::string &  _3051,    monty::rc_ptr< ::mosek::fusion::Set > _3052,    std::shared_ptr< monty::ndarray< int,1 > > _3053,    int _3054,    int _3055,    int _3056,    std::shared_ptr< monty::ndarray< long long,1 > > _3057,    std::shared_ptr< monty::ndarray< int,1 > > _3058,    std::shared_ptr< monty::ndarray< double,1 > > _3059,    std::shared_ptr< monty::ndarray< double,1 > > _3060,    std::shared_ptr< monty::ndarray< int,1 > > _3061,    std::shared_ptr< monty::ndarray< int,1 > > _3062,    std::shared_ptr< monty::ndarray< int,1 > > _3063){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3050,_3051,_3052,_3053,_3057,_3058,_3059,_3060,_3061,_3062,_3063);(coneidx = _3055); (conesize = _3054); (numcones = _3056); (names_flushed = false); }}void mosek::fusion::p_PSDConstraint::domainToString( long long _3064,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3065){ std::shared_ptr< monty::ndarray< int,1 > > _3066 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_3064); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3065.get())->a(std::string (" : element (")).get())->a(((*_3066)((int)0))); int _8496 = (int)1; int _8497 = (int)((_3066)->size(0)); for (int _3067 = _8496;_3067<_8497;++_3067){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3065.get())->a(std::string (",")).get())->a(((*_3066)(_3067))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3065.get())->a(std::string (") in a positive semi-definite cone of size (")).get())->a(shape_p->dim((int)0)); int _8498 = (int)1; int _8499 = (int)((_3066)->size(0)); for (int _3068 = _8498;_3068<_8499;++_3068){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3065.get())->a(std::string (",")).get())->a(shape_p->dim(_3068)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3065.get())->a(std::string (")")); }std::string mosek::fusion::PSDConstraint::toString  ( ) { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString( ){ long long _3069 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3070 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3069))); toStringArray(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8500; for (long long _3071=(int)0, _8501=_3069; _3071 < _8501;++_3071)_8500.push_back(_3071); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8500.size()),_8500.begin(),_8500.end())); })(),(long long)0,_3070,false); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3072 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->a(std::string ("PSDConstraint( (")).get())->a(shape_p->dim((int)0)); int _8502 = (int)1; int _8503 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3073 = _8502;_3073<_8503;++_3073){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->a(std::string (",")).get())->a(shape_p->dim(_3073)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->a(std::string ("  ")).get())->a(((*_3070)((int)0))); int _8504 = (int)1; int _8505 = (int)((_3070)->size(0)); for (int _3074 = _8504;_3074<_8505;++_3074){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3070)(_3074))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3072.get())->toString(); }void mosek::fusion::p_PSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3075,long long _3076,std::shared_ptr< monty::ndarray< std::string,1 > > _3077){ toStringArray(_3075,_3076,_3077,true); }void mosek::fusion::p_PSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3078,long long _3079,std::shared_ptr< monty::ndarray< std::string,1 > > _3080,bool _3081){ int _8506 = (int)0; int _8507 = (int)((_3078)->size(0)); for (int _3082 = _8506;_3082<_8507;++_3082){ if (((((*_3078)(_3082)) < (int)0) || (((*_3078)(_3082)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_3078)->size(0)) + _3079) > (long long)((_3080)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3083 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); long long _3084 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _3085 = (int)0; int _8508 = (int)0; int _8509 = (int)((_3078)->size(0)); for (int _3086 = _8508;_3086<_8509;++_3086){ long long _3087 = ((*_3078)(_3086)); long long _3088 = (_3087 / (conesize * conesize)); long long _3089 = (_3087 % (conesize * conesize)); long long _3090 = (_3089 / conesize); long long _3091 = (_3089 % conesize); long long _3092 = ([&]() -> long long { if ( (_3090 >= _3091)) return ((((_3090 * (_3090 + (int)1)) / (int)2) + _3091)); else return ((((_3091 * (_3091 + (int)1)) / (int)2) + _3090)); })(); long long _3093 = (_3092 + (((_3088 * conesize) * (conesize + (int)1)) / (int)2)); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3088).get())->a(std::string (",")).get())->a(_3090).get())->a(std::string (",")).get())->a(_3091).get())->a(std::string ("] : ")); int _3094 = ((*nativeindexes)(_3093)); int _3095 = (int)0; while (((_3095 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3095)) < _3093))) { ( ++ _3095 ); }int _3096 = _3095; while (((_3095 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3095)) == _3093))) { ( ++ _3095 ); }int _3097 = (int)0; while (((_3097 < _3084) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3097)) < _3093))) { ( ++ _3097 ); }int _3098 = _3097; while (((_3097 < _3084) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3097)) == _3093))) { ( ++ _3097 ); }int _8510 = _3096; int _8511 = _3095; for (int _3099 = _8510;_3099<_8511;++_3099){ double _3100 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_3099)); if ((_3100 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" + ")).get())->a(_3100).get())->a(std::string (" ")); }else if ((_3100 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" - ")).get())->a((- _3100)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" + 0.0 ")); }mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3099)),_3083); }int _3101 = _3097; (_3097 = _3098); while (((_3097 < _3101) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3097)) == _3093))) { int _3102 = _3097; int _3103 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3097)); ( ++ _3097 ); while (((_3097 < _3101) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3097)) == _3103))) { ( ++ _3097 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3102))); int _8512 = (_3102 + (int)1); int _8513 = _3097; for (int _3104 = _8512;_3104<_8513;++_3104){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3104))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3102)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3102)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_3093)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3093))); }else if ((((*cache_bfix)(_3093)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3093))); }else {}}else {}if (_3081){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->a(std::string (" ")); domainToString(_3087,_3083); }else {}(((*_3080)(((long long)_3086 + _3079))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_3083.get())->toString()); }}void mosek::fusion::p_PSDConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3105 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); if ((numcones > (int)1)){ int _3106 = (int)0; int _8514 = (int)0; int _8515 = numcones; for (int _3107 = _8514;_3107<_8515;++_3107){ int _8516 = (int)0; int _8517 = conesize; for (int _3108 = _8516;_3108<_8517;++_3108){ int _8518 = (int)0; int _8519 = (_3108 + (int)1); for (int _3109 = _8518;_3109<_8519;++_3109){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3106)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3105.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3107).get())->a(std::string (",")).get())->a(_3108).get())->a(std::string (",")).get())->a(_3109).get())->a(std::string ("]")).get())->toString()); ( ++ _3106 ); }}}}else { int _3110 = (int)0; int _8520 = (int)0; int _8521 = conesize; for (int _3111 = _8520;_3111<_8521;++_3111){ int _8522 = (int)0; int _8523 = (_3111 + (int)1); for (int _3112 = _8522;_3112<_8523;++_3112){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3110)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3105.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3111).get())->a(std::string (",")).get())->a(_3112).get())->a(std::string ("]")).get())->toString()); ( ++ _3110 ); }}}int _8524 = (int)0; int _8525 = numcones; for (int _3113 = _8524;_3113<_8525;++_3113){ mosek::fusion::p_Model::_get_impl(model.get())->task_barvar_name((coneidx + _3113),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3105.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_3113).get())->a(std::string ("].coneslack")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::p_PSDConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3114,std::shared_ptr< monty::ndarray< double,1 > > _3115,long long _3116,int _3117,int _3118){ std::shared_ptr< monty::ndarray< double,1 > > _3119 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3118))); std::shared_ptr< monty::ndarray< int,1 > > _3120 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3118))); int _8526 = (int)0; int _8527 = _3118; for (int _3121 = _8526;_3121<_8527;++_3121){ (((*_3120)(_3121)) = ((*nativeindexes)((((*_3114)((_3117 + _3121))) - _3116)))); }int _8528 = (int)0; int _8529 = (int)((_3119)->size(0)); for (int _3122 = _8528;_3122<_8529;++_3122){ (((*_3119)(_3122)) = (- ((*_3115)((((*_3114)((_3117 + _3122))) - _3116))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3120,_3119); }void mosek::fusion::p_PSDConstraint::dual_values( long long _3123,std::shared_ptr< monty::ndarray< int,1 > > _3124,std::shared_ptr< monty::ndarray< long long,1 > > _3125,int _3126,std::shared_ptr< monty::ndarray< double,1 > > _3127){ long long _3128 = (long long)1; int _3129 = (int)((_3125)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _3130 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3129))); std::shared_ptr< monty::ndarray< long long,1 > > _3131 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3129))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3132 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3133 = (conesize * conesize); int _8530 = (int)0; int _8531 = _3129; for (int _3134 = _8530;_3134<_8531;++_3134){ (((*_3131)(_3134)) = _3123); }int _8532 = (int)0; int _8533 = _3129; for (int _3135 = _8532;_3135<_8533;++_3135){ (_3128 = (_3128 * ((*_3124)(_3135)))); }long long _8534 = (long long)0; long long _8535 = _3128; for (long long _3136 = _8534;_3136<_8535;++_3136){ { long long _3137 = (((*_3131)((int)0)) / _3133); long long _3138 = (((*_3131)((int)0)) - (_3137 * _3133)); long long _3139 = (_3138 / conesize); long long _3140 = (_3138 - (_3139 * conesize)); if ((_3140 > _3139)){ (((*_3127)(_3136)) = ((*((*_3132)(((long long)coneidx + _3137))))((((_3139 * conesize) + _3140) - ((_3139 * (_3139 + (int)1)) / (int)2))))); }else { (((*_3127)(_3136)) = ((*((*_3132)(((long long)coneidx + _3137))))((((_3140 * conesize) + _3139) - ((_3140 * (_3140 + (int)1)) / (int)2))))); }}{ ( ++ ((*_3130)((int)0)) ); (((*_3131)((int)0)) = (((*_3131)((int)0)) + ((*_3125)((_3129 - (int)1))))); int _3141 = (int)0; { (_3141 = (int)0); for (;((_3141 < (_3129 - (int)1)) && (((*_3130)(_3141)) == ((*_3124)(_3141))));( ++ _3141 )){ (((*_3130)(_3141)) = (int)0); ( ++ ((*_3130)((_3141 + (int)1))) ); (((*_3131)((_3141 + (int)1))) = (((*_3131)((_3141 + (int)1))) + ((*_3125)(((_3129 - (int)2) - _3141))))); }}int _8536 = (int)0; int _8537 = _3141; for (int _3142 = _8536;_3142<_8537;++_3142){ (((*_3131)(_3142)) = ((*_3131)(_3141))); }}}}void mosek::fusion::p_PSDConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3143,int _3144,std::shared_ptr< monty::ndarray< double,1 > > _3145){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3146 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3147 = (conesize * conesize); int _8538 = (int)0; int _8539 = (int)((_3143)->size(0)); for (int _3148 = _8538;_3148<_8539;++_3148){ long long _3149 = ((((*_3143)(_3148)) / _3147) + coneidx); long long _3150 = (((*_3143)(_3148)) - (_3149 * _3147)); long long _3151 = (_3150 / conesize); long long _3152 = (_3150 - (_3151 * conesize)); if ((_3152 > _3151)){ (((*_3145)(_3148)) = ((*((*_3146)(_3149)))((((_3151 * conesize) + _3152) - ((_3151 * (_3151 + (int)1)) / (int)2))))); }else { (((*_3145)(_3148)) = ((*((*_3146)(_3149)))((((_3152 * conesize) + _3151) - ((_3152 * (_3152 + (int)1)) / (int)2))))); }}}void mosek::fusion::p_PSDConstraint::level_values( long long _3153,std::shared_ptr< monty::ndarray< int,1 > > _3154,std::shared_ptr< monty::ndarray< long long,1 > > _3155,int _3156,std::shared_ptr< monty::ndarray< double,1 > > _3157){ long long _3158 = (long long)1; int _3159 = (int)((_3155)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _3160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3159))); std::shared_ptr< monty::ndarray< long long,1 > > _3161 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3159))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3162 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3163 = (conesize * conesize); int _8540 = (int)0; int _8541 = _3159; for (int _3164 = _8540;_3164<_8541;++_3164){ (((*_3161)(_3164)) = _3153); }int _8542 = (int)0; int _8543 = _3159; for (int _3165 = _8542;_3165<_8543;++_3165){ (_3158 = (_3158 * ((*_3154)(_3165)))); }long long _8544 = (long long)0; long long _8545 = _3158; for (long long _3166 = _8544;_3166<_8545;++_3166){ { long long _3167 = (((*_3161)((int)0)) / _3163); long long _3168 = (((*_3161)((int)0)) - (_3167 * _3163)); long long _3169 = (_3168 / conesize); long long _3170 = (_3168 - (_3169 * conesize)); if ((_3170 > _3169)){ (((*_3157)(_3166)) = ((*((*_3162)(((long long)coneidx + _3167))))((((_3169 * conesize) + _3170) - ((_3169 * (_3169 + (int)1)) / (int)2))))); }else { (((*_3157)(_3166)) = ((*((*_3162)(((long long)coneidx + _3167))))((((_3170 * conesize) + _3169) - ((_3170 * (_3170 + (int)1)) / (int)2))))); }}{ ( ++ ((*_3160)((int)0)) ); (((*_3161)((int)0)) = (((*_3161)((int)0)) + ((*_3155)((_3159 - (int)1))))); int _3171 = (int)0; { (_3171 = (int)0); for (;((_3171 < (_3159 - (int)1)) && (((*_3160)(_3171)) == ((*_3154)(_3171))));( ++ _3171 )){ (((*_3160)(_3171)) = (int)0); ( ++ ((*_3160)((_3171 + (int)1))) ); (((*_3161)((_3171 + (int)1))) = (((*_3161)((_3171 + (int)1))) + ((*_3155)(((_3159 - (int)2) - _3171))))); }}int _8546 = (int)0; int _8547 = _3171; for (int _3172 = _8546;_3172<_8547;++_3172){ (((*_3161)(_3172)) = ((*_3161)(_3171))); }}}}void mosek::fusion::p_PSDConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3173,int _3174,std::shared_ptr< monty::ndarray< double,1 > > _3175){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3176 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3177 = (conesize * conesize); int _8548 = (int)0; int _8549 = (int)((_3173)->size(0)); for (int _3178 = _8548;_3178<_8549;++_3178){ long long _3179 = ((((*_3173)(_3178)) / _3177) + coneidx); long long _3180 = (((*_3173)(_3178)) - (_3179 * _3177)); long long _3181 = (_3180 / conesize); long long _3182 = (_3180 - (_3181 * conesize)); if ((_3182 > _3181)){ (((*_3175)(_3178)) = ((*((*_3176)(_3179)))((((_3181 * conesize) + _3182) - ((_3181 * (_3181 + (int)1)) / (int)2))))); }else { (((*_3175)(_3178)) = ((*((*_3176)(_3179)))((((_3182 * conesize) + _3181) - ((_3182 * (_3182 + (int)1)) / (int)2))))); }}}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3183){ return ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(_pubthis,_3183); }void mosek::fusion::p_PSDConstraint::destroy(){}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3184){ return new mosek::fusion::ConstraintCache(_3184); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3184) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_3184); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3184){monty::rc_reserve __reserve_this(_pubthis); { { (nrows = mosek::fusion::p_ConstraintCache::_get_impl(_3184)->nrows); (nnz = mosek::fusion::p_ConstraintCache::_get_impl(_3184)->nnz); (subj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->subj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->subj)); else return (nullptr); })()); (subi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->subi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->subi)); else return (nullptr); })()); (cof = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->cof) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->cof)); else return (nullptr); })()); (bfix = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->bfix) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->bfix)); else return (nullptr); })()); (buffer_cof = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->buffer_cof) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->buffer_cof)); else return (nullptr); })()); (buffer_subj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->buffer_subj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->buffer_subj)); else return (nullptr); })()); (buffer_subi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->buffer_subi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->buffer_subi)); else return (nullptr); })()); (nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_3184)->nunordered); (nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_3184)->nbarnz); (barsubi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->barsubi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->barsubi)); else return (nullptr); })()); (barsubj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->barsubj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->barsubj)); else return (nullptr); })()); (barmatidx = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3184)->barmatidx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3184)->barmatidx)); else return (nullptr); })()); }}}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _3185,    std::shared_ptr< monty::ndarray< double,1 > > _3186,    std::shared_ptr< monty::ndarray< int,1 > > _3187,    std::shared_ptr< monty::ndarray< double,1 > > _3188,    std::shared_ptr< monty::ndarray< int,1 > > _3189,    std::shared_ptr< monty::ndarray< int,1 > > _3190,    std::shared_ptr< monty::ndarray< int,1 > > _3191){ return new mosek::fusion::ConstraintCache(_3185,_3186,_3187,_3188,_3189,_3190,_3191); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _3185,    std::shared_ptr< monty::ndarray< double,1 > > _3186,    std::shared_ptr< monty::ndarray< int,1 > > _3187,    std::shared_ptr< monty::ndarray< double,1 > > _3188,    std::shared_ptr< monty::ndarray< int,1 > > _3189,    std::shared_ptr< monty::ndarray< int,1 > > _3190,    std::shared_ptr< monty::ndarray< int,1 > > _3191) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_3185,_3186,_3187,_3188,_3189,_3190,_3191); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _3185,    std::shared_ptr< monty::ndarray< double,1 > > _3186,    std::shared_ptr< monty::ndarray< int,1 > > _3187,    std::shared_ptr< monty::ndarray< double,1 > > _3188,    std::shared_ptr< monty::ndarray< int,1 > > _3189,    std::shared_ptr< monty::ndarray< int,1 > > _3190,    std::shared_ptr< monty::ndarray< int,1 > > _3191){monty::rc_reserve __reserve_this(_pubthis); { { (nrows = ((int)((_3185)->size(0)) - (int)1)); (nnz = ((*_3185)(((int)((_3185)->size(0)) - (int)1)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)))); (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)))); if (_3188){ (bfix = _3188); }else { (bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)))); }if ((_3189 && (_3190 && _3191))){ (nbarnz = (int)((_3189)->size(0))); if ((nbarnz > (int)((_3190)->size(0)))){ (nbarnz = (int)((_3190)->size(0))); }else {}if ((nbarnz > (int)((_3191)->size(0)))){ (nbarnz = (int)((_3191)->size(0))); }else {}(barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); (barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); (barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); ::mosek::fusion::Utils::Tools::arraycopy(_3189,(long long)((int)0),barsubi,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3190,(long long)((int)0),barsubj,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3191,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz); }else { (nbarnz = (int)0); (barsubi = nullptr); (barsubj = nullptr); (barmatidx = nullptr); }::mosek::fusion::Utils::Tools::arraycopy(_3187,(long long)0,subj,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(_3186,(long long)0,cof,(long long)0,nnz); int _8550 = (int)0; int _8551 = nrows; for (int _3192 = _8550;_3192<_8551;++_3192){ long long _8552 = ((*_3185)(_3192)); long long _8553 = ((*_3185)((_3192 + (int)1))); for (long long _3193 = _8552;_3193<_8553;++_3193){ (((*subi)(_3193)) = _3192); }}(buffer_cof = nullptr); (buffer_subj = nullptr); (buffer_subi = nullptr); (nunordered = (long long)0); }}}void mosek::fusion::p_ConstraintCache::unchecked_add_fx( std::shared_ptr< monty::ndarray< double,1 > > _3194){ int _8554 = (int)0; int _8555 = nrows; for (int _3195 = _8554;_3195<_8555;++_3195){ (((*bfix)(_3195)) = (((*bfix)(_3195)) + ((*_3194)(_3195)))); }}long long mosek::fusion::p_ConstraintCache::order_barentries( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3196 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8556; for (long long _3197=(long long)0, _8557=nbarnz; _3197 < _8557;++_3197)_8556.push_back(_3197); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8556.size()),_8556.begin(),_8556.end())); })(); if ((! ::mosek::fusion::p_Sort::issorted(_3196,barsubi,barsubj,(long long)((int)0),nbarnz,false))){ ::mosek::fusion::p_Sort::argsort(_3196,barsubi,barsubj,(long long)((int)0),nbarnz,false); std::shared_ptr< monty::ndarray< int,1 > > _3198 = barsubi; std::shared_ptr< monty::ndarray< int,1 > > _3199 = barsubj; std::shared_ptr< monty::ndarray< int,1 > > _3200 = barmatidx; (barsubi = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8558; for (long long _3201=(int)0, _8559=nbarnz; _3201 < _8559;++_3201)_8558.push_back(((*_3198)(((*_3196)(_3201))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8558.size()),_8558.begin(),_8558.end())); })()); (barsubj = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8560; for (long long _3202=(int)0, _8561=nbarnz; _3202 < _8561;++_3202)_8560.push_back(((*_3199)(((*_3196)(_3202))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8560.size()),_8560.begin(),_8560.end())); })()); (barmatidx = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8562; for (long long _3203=(int)0, _8563=nbarnz; _3203 < _8563;++_3203)_8562.push_back(((*_3200)(((*_3196)(_3203))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8562.size()),_8562.begin(),_8562.end())); })()); }else {}return nbarnz; }void mosek::fusion::p_ConstraintCache::add_bar( std::shared_ptr< monty::ndarray< int,1 > > _3204,std::shared_ptr< monty::ndarray< int,1 > > _3205,std::shared_ptr< monty::ndarray< int,1 > > _3206){ if (_3204){ int _3207 = (int)((_3204)->size(0)); if (((int)((_3204)->size(0)) <= (nbarnz + _3207))){ std::shared_ptr< monty::ndarray< int,1 > > _3208 = barsubi; std::shared_ptr< monty::ndarray< int,1 > > _3209 = barsubj; std::shared_ptr< monty::ndarray< int,1 > > _3210 = barmatidx; long long _3211 = ([&]() -> long long { if ( (((int)2 * nbarnz) > (nbarnz + _3207))) return (((int)2 * nbarnz)); else return ((nbarnz + (_3207 * (int)2))); })(); (barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3211)))); (barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3211)))); (barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3211)))); if ((nbarnz > (int)0)){ ::mosek::fusion::Utils::Tools::arraycopy(_3208,(long long)((int)0),barsubi,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3209,(long long)((int)0),barsubj,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3210,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz); }else {}}else {}::mosek::fusion::Utils::Tools::arraycopy(_3204,(long long)((int)0),barsubi,nbarnz,(long long)(_3207)); ::mosek::fusion::Utils::Tools::arraycopy(_3205,(long long)((int)0),barsubj,nbarnz,(long long)(_3207)); ::mosek::fusion::Utils::Tools::arraycopy(_3206,(long long)((int)0),barmatidx,nbarnz,(long long)(_3207)); (nbarnz += _3207); }else {}}void mosek::fusion::p_ConstraintCache::unchecked_add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3212,std::shared_ptr< monty::ndarray< int,1 > > _3213,std::shared_ptr< monty::ndarray< double,1 > > _3214,std::shared_ptr< monty::ndarray< double,1 > > _3215){ long long _3216 = (nunordered + ((*_3212)(nrows))); long long _3217 = ((*_3212)(nrows)); std::shared_ptr< monty::ndarray< int,1 > > _3218; std::shared_ptr< monty::ndarray< int,1 > > _3219; std::shared_ptr< monty::ndarray< double,1 > > _3220; if ((! buffer_cof || ((int)((buffer_cof)->size(0)) < _3216))){ (_3218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3216)))); (_3219 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3216)))); (_3220 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3216)))); if (buffer_cof){ ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_3218,(long long)0,nunordered); ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_3219,(long long)0,nunordered); ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_3220,(long long)0,nunordered); }else {}}else { (_3218 = buffer_subi); (_3219 = buffer_subj); (_3220 = buffer_cof); }int _8564 = (int)0; int _8565 = nrows; for (int _3221 = _8564;_3221<_8565;++_3221){ long long _8566 = ((*_3212)(_3221)); long long _8567 = ((*_3212)((_3221 + (int)1))); for (long long _3222 = _8566;_3222<_8567;++_3222){ (((*_3218)((nunordered + _3222))) = _3221); }}::mosek::fusion::Utils::Tools::arraycopy(_3213,(long long)0,_3219,nunordered,_3217); ::mosek::fusion::Utils::Tools::arraycopy(_3214,(long long)0,_3220,nunordered,_3217); (buffer_subi = _3218); (buffer_subj = _3219); (buffer_cof = _3220); if (_3215){ int _8568 = (int)0; int _8569 = nrows; for (int _3223 = _8568;_3223<_8569;++_3223){ (((*bfix)(_3223)) = (((*bfix)(_3223)) + ((*_3215)(_3223)))); }}else {}(nunordered = _3216); }void mosek::fusion::ConstraintCache::add  ( std::shared_ptr< monty::ndarray< long long,1 > > _3224,    std::shared_ptr< monty::ndarray< int,1 > > _3225,    std::shared_ptr< monty::ndarray< double,1 > > _3226,    std::shared_ptr< monty::ndarray< double,1 > > _3227) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_3224,_3225,_3226,_3227); }void mosek::fusion::p_ConstraintCache::add( std::shared_ptr< monty::ndarray< long long,1 > > _3224,std::shared_ptr< monty::ndarray< int,1 > > _3225,std::shared_ptr< monty::ndarray< double,1 > > _3226,std::shared_ptr< monty::ndarray< double,1 > > _3227){ if ((((int)((_3224)->size(0)) != (nrows + (int)1)) || (_3227 && ((int)((_3227)->size(0)) != nrows)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));}else {}unchecked_add_l(_3224,_3225,_3226,_3227); }long long mosek::fusion::ConstraintCache::flush  ( std::shared_ptr< monty::ndarray< int,1 > > _3228,    std::shared_ptr< monty::ndarray< int,1 > > _3229,    std::shared_ptr< monty::ndarray< double,1 > > _3230,    std::shared_ptr< monty::ndarray< double,1 > > _3231) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_3228,_3229,_3230,_3231); }long long mosek::fusion::p_ConstraintCache::flush( std::shared_ptr< monty::ndarray< int,1 > > _3228,std::shared_ptr< monty::ndarray< int,1 > > _3229,std::shared_ptr< monty::ndarray< double,1 > > _3230,std::shared_ptr< monty::ndarray< double,1 > > _3231){ std::shared_ptr< monty::ndarray< long long,1 > > _3232 = nullptr; if ((bfix && _3231)){ int _8570 = (int)0; int _8571 = nrows; for (int _3233 = _8570;_3233<_8571;++_3233){ (((*_3231)(_3233)) = ((*bfix)(_3233))); }}else {}if ((nunordered == (long long)0)){ return (long long)0; }else {}bool _3234 = false; { int _3235 = (int)1; while (((_3235 < nunordered) && ((((*buffer_subi)((_3235 - (int)1))) < ((*buffer_subi)(_3235))) || ((((*buffer_subi)((_3235 - (int)1))) == ((*buffer_subi)(_3235))) && (((*buffer_subj)((_3235 - (int)1))) <= ((*buffer_subj)(_3235))))))) { ( ++ _3235 ); }(_3234 = (_3235 == nunordered)); }if ((! _3234)){ (_3232 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8572; for (long long _3236=(int)0, _8573=nunordered; _3236 < _8573;++_3236)_8572.push_back(_3236); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8572.size()),_8572.begin(),_8572.end())); })()); ::mosek::fusion::p_CommonTools::argQsort(_3232,buffer_subi,buffer_subj,(long long)0,nunordered); }else {}long long _3237 = nnz; std::shared_ptr< monty::ndarray< int,1 > > _3238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((nunordered + _3237)))); std::shared_ptr< monty::ndarray< int,1 > > _3239 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((nunordered + _3237)))); std::shared_ptr< monty::ndarray< double,1 > > _3240 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((nunordered + _3237)))); long long _3241 = (long long)0; if (_3234){ int _3242 = (int)0; int _3243 = (int)0; long long _3244 = _3237; long long _3245 = nunordered; int _3246 = (int)0; long long _3247 = (long long)0; while (((_3242 < _3244) && (_3243 < _3245))) { if (((((*subi)(_3242)) < ((*buffer_subi)(_3243))) || ((((*subi)(_3242)) == ((*buffer_subi)(_3243))) && (((*subj)(_3242)) < ((*buffer_subj)(_3243)))))){ (((*_3238)(_3246)) = ((*subi)(_3242))); (((*_3239)(_3246)) = ((*subj)(_3242))); (((*_3240)(_3246)) = ((*cof)(_3242))); ( ++ _3242 ); ( ++ _3246 ); }else if (((((*subi)(_3242)) > ((*buffer_subi)(_3243))) || ((((*subi)(_3242)) == ((*buffer_subi)(_3243))) && (((*subj)(_3242)) > ((*buffer_subj)(_3243)))))){ (((*_3238)(_3246)) = ((*buffer_subi)(_3243))); (((*_3239)(_3246)) = ((*buffer_subj)(_3243))); (((*_3240)(_3246)) = ((*buffer_cof)(_3243))); (((*_3228)(_3241)) = ((*_3238)(_3246))); (((*_3229)(_3241)) = ((*_3239)(_3246))); (((*_3230)(_3241)) = ((*_3240)(_3246))); ( ++ _3241 ); ( ++ _3243 ); ( ++ _3246 ); }else { (((*_3238)(_3246)) = ((*subi)(_3242))); (((*_3239)(_3246)) = ((*subj)(_3242))); (((*_3240)(_3246)) = ((*cof)(_3242))); while (((_3242 < (int)((subi)->size(0))) && ((_3243 < (int)((buffer_subi)->size(0))) && ((((*subi)(_3242)) == ((*buffer_subi)(_3243))) && (((*subj)(_3242)) == ((*buffer_subj)(_3243))))))) { (((*_3240)(_3246)) = (((*_3240)(_3246)) + ((*buffer_cof)(_3243)))); ( ++ _3243 ); }(((*_3228)(_3241)) = ((*_3238)(_3246))); (((*_3229)(_3241)) = ((*_3239)(_3246))); (((*_3230)(_3241)) = ((*_3240)(_3246))); ( ++ _3241 ); ( ++ _3242 ); ( ++ _3246 ); }}while ((_3242 < _3244)) { (((*_3238)(_3246)) = ((*subi)(_3242))); (((*_3239)(_3246)) = ((*subj)(_3242))); (((*_3240)(_3246)) = ((*cof)(_3242))); ( ++ _3242 ); ( ++ _3246 ); }while ((_3243 < _3245)) { (((*_3238)(_3246)) = ((*buffer_subi)(_3243))); (((*_3239)(_3246)) = ((*buffer_subj)(_3243))); (((*_3240)(_3246)) = ((*buffer_cof)(_3243))); (((*_3228)(_3241)) = ((*_3238)(_3246))); (((*_3229)(_3241)) = ((*_3239)(_3246))); (((*_3230)(_3241)) = ((*_3240)(_3246))); ( ++ _3241 ); ( ++ _3243 ); ( ++ _3246 ); }(nnz = _3246); }else { int _3248 = (int)0; int _3249 = (int)0; long long _3250 = _3237; long long _3251 = nunordered; int _3252 = (int)0; long long _3253 = (long long)0; while (((_3248 < _3250) && (_3249 < _3251))) { if (((((*subi)(_3248)) < ((*buffer_subi)(((*_3232)(_3249))))) || ((((*subi)(_3248)) == ((*buffer_subi)(((*_3232)(_3249))))) && (((*subj)(_3248)) < ((*buffer_subj)(((*_3232)(_3249)))))))){ (((*_3238)(_3252)) = ((*subi)(_3248))); (((*_3239)(_3252)) = ((*subj)(_3248))); (((*_3240)(_3252)) = ((*cof)(_3248))); ( ++ _3248 ); ( ++ _3252 ); }else if (((((*subi)(_3248)) > ((*buffer_subi)(((*_3232)(_3249))))) || ((((*subi)(_3248)) == ((*buffer_subi)(((*_3232)(_3249))))) && (((*subj)(_3248)) > ((*buffer_subj)(((*_3232)(_3249)))))))){ (((*_3238)(_3252)) = ((*buffer_subi)(((*_3232)(_3249))))); (((*_3239)(_3252)) = ((*buffer_subj)(((*_3232)(_3249))))); (((*_3240)(_3252)) = ((*buffer_cof)(((*_3232)(_3249))))); (((*_3228)(_3241)) = ((*_3238)(_3252))); (((*_3229)(_3241)) = ((*_3239)(_3252))); (((*_3230)(_3241)) = ((*_3240)(_3252))); ( ++ _3241 ); ( ++ _3249 ); ( ++ _3252 ); }else { (((*_3238)(_3252)) = ((*subi)(_3248))); (((*_3239)(_3252)) = ((*subj)(_3248))); (((*_3240)(_3252)) = ((*cof)(_3248))); while (((((*subi)(_3248)) == ((*buffer_subi)(((*_3232)(_3249))))) && (((*subj)(_3248)) == ((*buffer_subj)(((*_3232)(_3249))))))) { (((*_3240)(_3252)) = (((*_3240)(_3252)) + ((*buffer_cof)(((*_3232)(_3249)))))); ( ++ _3249 ); }(((*_3228)(_3241)) = ((*_3238)(_3252))); (((*_3229)(_3241)) = ((*_3239)(_3252))); (((*_3230)(_3241)) = ((*_3240)(_3252))); ( ++ _3241 ); ( ++ _3248 ); ( ++ _3252 ); }}(nnz = _3252); }(subi = _3238); (subj = _3239); (cof = _3240); (nunordered = (long long)0); return _3241; }long long mosek::fusion::ConstraintCache::numUnsorted  ( ) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted( ){ return nunordered; }monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::clone( ){ return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(_pubthis); }void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::CompoundConstraint::CompoundConstraint(mosek::fusion::p_CompoundConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "CompoundConstraint()" << this << std::endl; */ }mosek::fusion::CompoundConstraint::~CompoundConstraint() {  /* std::cout << "~CompoundConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_CompoundConstraint::p_CompoundConstraint  (::mosek::fusion::CompoundConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::CompoundConstraint::t mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3254){ return new mosek::fusion::CompoundConstraint(_3254); }mosek::fusion::CompoundConstraint::CompoundConstraint  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3254) :    CompoundConstraint(new mosek::fusion::p_CompoundConstraint(this)){ mosek::fusion::p_CompoundConstraint::_get_impl(this)->_initialize(_3254); }void mosek::fusion::p_CompoundConstraint::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3254){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(::mosek::fusion::p_CompoundConstraint::model_from_con(_3254),::mosek::fusion::p_CompoundConstraint::compute_shape(_3254,(int)0));int _3255 = (int)0; int _3256 = (int)0; int _3257 = (int)0; { int _3258 = (int)0; for (;(_3258 < (int)((_3254)->size(0)));( ++ _3258 )){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3254)(_3258)))->shape_p)->size == (int)1)){ ( ++ _3256 ); ( ++ _3257 ); }else if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3254)(_3258)))->shape_p)->size > (int)1)){ ( ++ _3256 ); (_3257 = (_3257 + mosek::fusion::p_Constraint::_get_impl(((*_3254)(_3258)))->shape_p->dim(_3255))); }else {}}}(cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >(monty::shape(_3256)))); (consb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_3256 + (int)1))))); (((*consb)((int)0)) = (int)0); (stackdim = _3255); { int _3259 = (int)0; { int _3260 = (int)0; for (;(_3260 < (int)((_3254)->size(0)));( ++ _3260 )){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3254)(_3260)))->shape_p)->size > (int)0)){ (((*cons)(_3259)) = ((*_3254)(_3260))); ( ++ _3259 ); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3254)(_3260)))->shape_p)->size == (int)1)){ (((*consb)((_3260 + (int)1))) = (((*consb)(_3260)) + (int)1)); }else { (((*consb)((_3260 + (int)1))) = (((*consb)(_3260)) + mosek::fusion::p_Constraint::_get_impl(((*_3254)(_3260)))->shape_p->dim(_3255))); }}else {}}}}}}void mosek::fusion::p_CompoundConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3261,long long _3262,std::shared_ptr< monty::ndarray< std::string,1 > > _3263){ throw ::mosek::fusion::UnimplementedError(std::string ("SliceConstraint.toStringArray() not implemented"));}void mosek::fusion::p_CompoundConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3264,std::shared_ptr< monty::ndarray< long long,1 > > _3265,std::shared_ptr< monty::ndarray< int,1 > > _3266,std::shared_ptr< monty::ndarray< int,1 > > _3267,std::shared_ptr< monty::ndarray< int,1 > > _3268,std::shared_ptr< monty::ndarray< double,1 > > _3269,std::shared_ptr< monty::ndarray< double,1 > > _3270,long long _3271,int _3272,int _3273){ std::shared_ptr< monty::ndarray< long long,1 > > _3274 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8574; for (int _3275=(int)0, _8575=_3273; _3275 < _8575;++_3275)_8574.push_back((((*_3264)((_3272 + _3275))) - _3271)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8574.size()),_8574.begin(),_8574.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3276 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8576; for (int _3277=(int)0, _8577=_3273; _3277 < _8577;++_3277)_8576.push_back(_3277); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8576.size()),_8576.begin(),_8576.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3278 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8578; for (int _3279=(int)0, _8579=_3273; _3279 < _8579;++_3279)_8578.push_back(((*mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((((*_3264)((_3272 + _3279))) - _3271)))(stackdim))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8578.size()),_8578.begin(),_8578.end())); })(); ::mosek::fusion::p_CommonTools::argQsort(_3276,_3278,_3274,(long long)0,(long long)_3273); std::shared_ptr< monty::ndarray< int,1 > > _3280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3273))); { int _3281 = (int)0; while ((((*consb)(_3281)) < ((*_3278)(((*_3276)((int)0)))))) { ( ++ _3281 ); }(((*_3280)((int)0)) = _3281); int _8580 = (int)1; int _8581 = _3273; for (int _3282 = _8580;_3282<_8581;++_3282){ while ((((*consb)(_3281)) < ((*_3278)(((*_3276)(_3282)))))) { ( ++ _3281 ); }(((*_3280)(_3282)) = _3281); }}{ std::shared_ptr< monty::ndarray< long long,1 > > _3283 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3273))); std::shared_ptr< monty::ndarray< long long,1 > > _3284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_3273 + (int)1)))); long long _3285 = (((*_3265)((_3272 + _3273))) - ((*_3265)(_3272))); std::shared_ptr< monty::ndarray< int,1 > > _3286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3285))); std::shared_ptr< monty::ndarray< int,1 > > _3287 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3285))); std::shared_ptr< monty::ndarray< int,1 > > _3288 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3285))); std::shared_ptr< monty::ndarray< double,1 > > _3289 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3285))); std::shared_ptr< monty::ndarray< double,1 > > _3290 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _3270) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3273)))); })(); (((*_3284)((int)0)) = (long long)0); int _8582 = (int)0; int _8583 = _3273; for (int _3291 = _8582;_3291<_8583;++_3291){ int _3292 = ((*_3280)(_3291)); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3292)))->shape_p)->size == (int)1)){ (((*_3283)(_3291)) = (long long)0); }else { std::shared_ptr< monty::ndarray< int,1 > > _3293 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3274)(((*_3276)(_3291))))); (((*_3293)(stackdim)) = (((*_3293)(stackdim)) - ((*consb)(_3292)))); (((*_3283)(_3291)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3292)))->shape_p.get())->linearidx(_3293)); }long long _3294 = (((*_3265)((((*_3276)(_3291)) + (int)1))) - ((*_3265)(((*_3276)(_3291))))); (((*_3284)((_3291 + (int)1))) = (((*_3284)(_3291)) + _3294)); ::mosek::fusion::Utils::Tools::arraycopy(_3266,((*_3265)(((*_3276)(_3291)))),_3286,((*_3284)(_3291)),_3294); ::mosek::fusion::Utils::Tools::arraycopy(_3267,((*_3265)(((*_3276)(_3291)))),_3287,((*_3284)(_3291)),_3294); ::mosek::fusion::Utils::Tools::arraycopy(_3268,((*_3265)(((*_3276)(_3291)))),_3288,((*_3284)(_3291)),_3294); ::mosek::fusion::Utils::Tools::arraycopy(_3269,((*_3265)(((*_3276)(_3291)))),_3289,((*_3284)(_3291)),_3294); }if (_3270){ int _8584 = (int)0; int _8585 = _3273; for (int _3295 = _8584;_3295<_8585;++_3295){ (((*_3290)(_3295)) = ((*_3270)(((*_3276)(_3295))))); }}else {}{ int _3296 = (int)0; while ((_3296 < _3273)) { int _3297 = _3296; ( ++ _3296 ); while (((_3296 < _3273) && (((*_3280)(_3296)) == ((*_3280)(_3297))))) { ( ++ _3296 ); }mosek::fusion::p_Constraint::_get_impl(((*cons)(((*_3280)(_3297)))).get())->add_l(_3283,_3284,_3286,_3287,_3288,_3289,_3290,(long long)0,_3297,(_3296 - _3297)); }}}}void mosek::fusion::p_CompoundConstraint::dual_values( long long _3298,std::shared_ptr< monty::ndarray< int,1 > > _3299,std::shared_ptr< monty::ndarray< long long,1 > > _3300,int _3301,std::shared_ptr< monty::ndarray< double,1 > > _3302){ int _3303 = (int)((_3300)->size(0)); int _3304 = ((*_3299)((int)0)); int _8586 = (int)1; int _8587 = (int)((_3299)->size(0)); for (int _3305 = _8586;_3305<_8587;++_3305){ (_3304 = (_3304 * ((*_3299)(_3305)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3306 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8588; for (int _3307=(int)0, _8589=(int)((_3299)->size(0)); _3307 < _8589;++_3307)_8588.push_back(_3298); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8588.size()),_8588.begin(),_8588.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3308 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3299)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _3309 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3310 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3310)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _8590 = (int)1; int _8591 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3311 = _8590;_3311<_8591;++_3311){ (((*_3310)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3311) - (int)1))) = (((*_3310)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3311))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3311)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3312 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _8592 = (int)0; int _8593 = _3304; for (int _3313 = _8592;_3313<_8593;++_3313){ { long long _3314 = ((*_3306)((int)0)); int _8594 = (int)0; int _8595 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3315 = _8594;_3315<_8595;++_3315){ (((*_3309)(_3315)) = (int)(_3314 / ((*_3310)(_3315)))); (_3314 = (_3314 - ((long long)((*_3309)(_3315)) * ((*_3310)(_3315))))); }}{ int _3316 = (int)0; while ((((*_3309)(stackdim)) >= ((*consb)((_3316 + (int)1))))) { ( ++ _3316 ); }(((*_3309)(stackdim)) = (((*_3309)(stackdim)) - ((*consb)(_3316)))); (((*_3312)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3316)))->shape_p.get())->linearidx(_3309)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3316)).get())->dual_values(_3312,(_3301 + _3313),_3302); }{ ( ++ ((*_3308)((int)0)) ); (((*_3306)((int)0)) = (((*_3306)((int)0)) + ((*_3300)((_3303 - (int)1))))); int _3317 = (int)0; { (_3317 = (int)0); for (;((_3317 < (_3303 - (int)1)) && (((*_3308)(_3317)) == ((*_3299)(_3317))));( ++ _3317 )){ (((*_3308)(_3317)) = (int)0); ( ++ ((*_3308)((_3317 + (int)1))) ); }}int _8596 = (int)0; int _8597 = _3317; for (int _3318 = _8596;_3318<_8597;++_3318){ (((*_3306)(_3318)) = ((*_3306)(_3317))); }}}}void mosek::fusion::p_CompoundConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3319,int _3320,std::shared_ptr< monty::ndarray< double,1 > > _3321){ std::shared_ptr< monty::ndarray< long long,1 > > _3322 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _3323 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8598 = (int)0; int _8599 = (int)((_3319)->size(0)); for (int _3324 = _8598;_3324<_8599;++_3324){ { long long _3325 = (long long)((*_3319)(_3324)); int _8600 = (int)0; int _8601 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3326 = _8600;_3326<_8601;++_3326){ (((*_3323)(_3326)) = (int)(_3325 / shape_p->stride(_3326))); (_3325 = (_3325 - ((long long)((*_3323)(_3326)) * shape_p->stride(_3326)))); }}{ int _3327 = (int)0; while ((((*_3323)(stackdim)) >= ((*consb)((_3327 + (int)1))))) { ( ++ _3327 ); }(((*_3323)(stackdim)) = (((*_3323)(stackdim)) - ((*consb)(_3327)))); (((*_3322)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3327)))->shape_p.get())->linearidx(_3323)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3327)).get())->dual_values(_3322,(_3320 + _3324),_3321); }}}void mosek::fusion::p_CompoundConstraint::level_values( long long _3328,std::shared_ptr< monty::ndarray< int,1 > > _3329,std::shared_ptr< monty::ndarray< long long,1 > > _3330,int _3331,std::shared_ptr< monty::ndarray< double,1 > > _3332){ int _3333 = (int)((_3330)->size(0)); int _3334 = ((*_3329)((int)0)); int _8602 = (int)1; int _8603 = (int)((_3329)->size(0)); for (int _3335 = _8602;_3335<_8603;++_3335){ (_3334 = (_3334 * ((*_3329)(_3335)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3336 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8604; for (int _3337=(int)0, _8605=(int)((_3329)->size(0)); _3337 < _8605;++_3337)_8604.push_back(_3328); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8604.size()),_8604.begin(),_8604.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3338 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3329)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _3339 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3340)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _8606 = (int)1; int _8607 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3341 = _8606;_3341<_8607;++_3341){ (((*_3340)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3341) - (int)1))) = (((*_3340)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3341))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3341)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _8608 = (int)0; int _8609 = _3334; for (int _3343 = _8608;_3343<_8609;++_3343){ { long long _3344 = ((*_3336)((int)0)); int _8610 = (int)0; int _8611 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3345 = _8610;_3345<_8611;++_3345){ (((*_3339)(_3345)) = (int)(_3344 / ((*_3340)(_3345)))); (_3344 = (_3344 - ((long long)((*_3339)(_3345)) * ((*_3340)(_3345))))); }}{ int _3346 = (int)0; while ((((*_3339)(stackdim)) >= ((*consb)((_3346 + (int)1))))) { ( ++ _3346 ); }(((*_3339)(stackdim)) = (((*_3339)(stackdim)) - ((*consb)(_3346)))); (((*_3342)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3346)))->shape_p.get())->linearidx(_3339)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3346)).get())->level_values(_3342,(_3331 + _3343),_3332); }{ ( ++ ((*_3338)((int)0)) ); (((*_3336)((int)0)) = (((*_3336)((int)0)) + ((*_3330)((_3333 - (int)1))))); int _3347 = (int)0; { (_3347 = (int)0); for (;((_3347 < (_3333 - (int)1)) && (((*_3338)(_3347)) == ((*_3329)(_3347))));( ++ _3347 )){ (((*_3338)(_3347)) = (int)0); ( ++ ((*_3338)((_3347 + (int)1))) ); }}int _8612 = (int)0; int _8613 = _3347; for (int _3348 = _8612;_3348<_8613;++_3348){ (((*_3336)(_3348)) = ((*_3336)(_3347))); }}}}void mosek::fusion::p_CompoundConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3349,int _3350,std::shared_ptr< monty::ndarray< double,1 > > _3351){ std::shared_ptr< monty::ndarray< long long,1 > > _3352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _3353 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8614 = (int)0; int _8615 = (int)((_3349)->size(0)); for (int _3354 = _8614;_3354<_8615;++_3354){ { long long _3355 = (long long)((*_3349)(_3354)); int _8616 = (int)0; int _8617 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3356 = _8616;_3356<_8617;++_3356){ (((*_3353)(_3356)) = (int)(_3355 / shape_p->stride(_3356))); (_3355 = (_3355 - ((long long)((*_3353)(_3356)) * shape_p->stride(_3356)))); }}{ int _3357 = (int)0; while ((((*_3353)(stackdim)) >= ((*consb)((_3357 + (int)1))))) { ( ++ _3357 ); }(((*_3353)(stackdim)) = (((*_3353)(stackdim)) - ((*consb)(_3357)))); (((*_3352)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3357)))->shape_p.get())->linearidx(_3353)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3357)).get())->level_values(_3352,(_3350 + _3354),_3351); }}}void mosek::fusion::p_CompoundConstraint::add( std::shared_ptr< monty::ndarray< long long,1 > > _3358,std::shared_ptr< monty::ndarray< int,1 > > _3359,std::shared_ptr< monty::ndarray< double,1 > > _3360,std::shared_ptr< monty::ndarray< double,1 > > _3361,int _3362,std::shared_ptr< monty::ndarray< int,1 > > _3363,int _3364){ throw ::mosek::fusion::UnimplementedError(std::string ("Functionality not implemented yet."));}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::CompoundConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3365,    std::shared_ptr< monty::ndarray< int,1 > > _3366) { return mosek::fusion::p_CompoundConstraint::_get_impl(this)->slice(_3365,_3366); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_CompoundConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3365,std::shared_ptr< monty::ndarray< int,1 > > _3366){ throw ::mosek::fusion::UnimplementedError(std::string ("Compound constraints cannot be sliced"));}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::CompoundConstraint::slice  ( int _3367,    int _3368) { return mosek::fusion::p_CompoundConstraint::_get_impl(this)->slice(_3367,_3368); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_CompoundConstraint::slice( int _3367,int _3368){ throw ::mosek::fusion::UnimplementedError(std::string ("Compound constraints cannot be sliced"));}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_CompoundConstraint::compute_shape( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3369,int _3370){ monty::rc_ptr< ::mosek::fusion::Set > _3371 = ((*_3369)((int)0))->shape(); int _3372 = (int)0; int _8618 = (int)0; int _8619 = (int)((_3369)->size(0)); for (int _3373 = _8618;_3373<_8619;++_3373){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3369)(_3373)))->shape_p)->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3369)(_3373)))->shape_p)->nd != mosek::fusion::p_Set::_get_impl(_3371)->nd)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}{ int _3374 = (int)0; for (;(_3374 < mosek::fusion::p_Set::_get_impl(_3371)->nd);( ++ _3374 )){ if (((_3374 != _3370) && (_3371->dim(_3374) != mosek::fusion::p_Constraint::_get_impl(((*_3369)(_3373)))->shape_p->dim(_3374)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}}}(_3372 = (_3372 + mosek::fusion::p_Constraint::_get_impl(((*_3369)(_3373)))->shape_p->dim(_3370))); }else { throw ::mosek::fusion::DimensionError(std::string ("Empty element in compound variable"));}}if ((mosek::fusion::p_Set::_get_impl(_3371)->nd == (int)1)){ return ::mosek::fusion::p_IntSet::_new_IntSet(_3372); }else { std::shared_ptr< monty::ndarray< int,1 > > _3375 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8620; for (int _3376=(int)0, _8621=mosek::fusion::p_Set::_get_impl(_3371)->nd; _3376 < _8621;++_3376)_8620.push_back(_3371->dim(_3376)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8620.size()),_8620.begin(),_8620.end())); })(); (((*_3375)(_3370)) = _3372); return ::mosek::fusion::p_NDSet::_new_NDSet(_3375); }}int mosek::fusion::p_CompoundConstraint::count_numcon( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3377){ int _3378 = (int)0; { int _3379 = (int)0; for (;(_3379 < (int)((_3377)->size(0)));( ++ _3379 )){ monty::rc_ptr< ::mosek::fusion::Constraint > _3380 = ((*_3377)(_3379)); monty::rc_ptr< ::mosek::fusion::Constraint > _8622 = _3380; if (nullptr != dynamic_cast< ::mosek::fusion::CompoundConstraint* >(_8622.get())) {::mosek::fusion::CompoundConstraint::t _3381(dynamic_cast< ::mosek::fusion::CompoundConstraint* >(_8622.get()));{ (_3378 = (_3378 + (int)((mosek::fusion::p_CompoundConstraint::_get_impl(_3381)->cons)->size(0)))); }}else {mosek::fusion::Constraint::t _3382 = _8622;{ ( ++ _3378 ); }}}}return _3378; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_CompoundConstraint::model_from_con( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3383){ return mosek::fusion::p_Constraint::_get_impl(((*_3383)((int)0)))->model; }void mosek::fusion::p_CompoundConstraint::destroy(){consb.reset();cons.reset();}void mosek::fusion::CompoundConstraint::destroy() { mosek::fusion::p_CompoundConstraint::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3384,    monty::rc_ptr< ::mosek::fusion::Set > _3385,    long long _3386,    std::shared_ptr< monty::ndarray< long long,1 > > _3387,    bool _3388){ return new mosek::fusion::BoundInterfaceConstraint(_3384,_3385,_3386,_3387,_3388); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3384,    monty::rc_ptr< ::mosek::fusion::Set > _3385,    long long _3386,    std::shared_ptr< monty::ndarray< long long,1 > > _3387,    bool _3388) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_3384,_3385,_3386,_3387,_3388); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3384,    monty::rc_ptr< ::mosek::fusion::Set > _3385,    long long _3386,    std::shared_ptr< monty::ndarray< long long,1 > > _3387,    bool _3388){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_SliceConstraint::_initialize(_3384,_3385,_3386,_3387);(origincon = _3384); (islower = _3388); }}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::slice_( monty::rc_ptr< ::mosek::fusion::Set > _3389,long long _3390,std::shared_ptr< monty::ndarray< long long,1 > > _3391){ return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(origincon,_3389,_3390,_3391,islower); }void mosek::fusion::p_BoundInterfaceConstraint::dual_values( long long _3392,std::shared_ptr< monty::ndarray< int,1 > > _3393,std::shared_ptr< monty::ndarray< long long,1 > > _3394,int _3395,std::shared_ptr< monty::ndarray< double,1 > > _3396){ if (islower){ mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_l(_3392,_3393,_3394,_3395,_3396); }else { mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_u(_3392,_3393,_3394,_3395,_3396); }}void mosek::fusion::p_BoundInterfaceConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3397,int _3398,std::shared_ptr< monty::ndarray< double,1 > > _3399){ if (islower){ mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_l(_3397,_3398,_3399); }else { mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_u(_3397,_3398,_3399); }}void mosek::fusion::p_BoundInterfaceConstraint::destroy(){origincon.reset();}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3400,    monty::rc_ptr< ::mosek::fusion::Set > _3401,    long long _3402,    std::shared_ptr< monty::ndarray< long long,1 > > _3403){ return new mosek::fusion::SliceConstraint(_3400,_3401,_3402,_3403); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3400,    monty::rc_ptr< ::mosek::fusion::Set > _3401,    long long _3402,    std::shared_ptr< monty::ndarray< long long,1 > > _3403) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_3400,_3401,_3402,_3403); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3400,    monty::rc_ptr< ::mosek::fusion::Set > _3401,    long long _3402,    std::shared_ptr< monty::ndarray< long long,1 > > _3403){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(mosek::fusion::p_Constraint::_get_impl(_3400)->model,_3401);(origin = _3400); (first = _3402); (strides = _3403); }}void mosek::fusion::p_SliceConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3404,std::shared_ptr< monty::ndarray< long long,1 > > _3405,std::shared_ptr< monty::ndarray< int,1 > > _3406,std::shared_ptr< monty::ndarray< int,1 > > _3407,std::shared_ptr< monty::ndarray< int,1 > > _3408,std::shared_ptr< monty::ndarray< double,1 > > _3409,std::shared_ptr< monty::ndarray< double,1 > > _3410,long long _3411,int _3412,int _3413){ long long _3414 = (((*_3405)((_3412 + _3413))) - ((*_3405)(_3412))); std::shared_ptr< monty::ndarray< long long,1 > > _3415 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3413))); std::shared_ptr< monty::ndarray< long long,1 > > _3416 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_3413 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _3417 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _3410) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3413)))); })(); int _8623 = (int)0; int _8624 = (_3413 + (int)1); for (int _3418 = _8623;_3418<_8624;++_3418){ (((*_3416)(_3418)) = ((*_3405)((_3412 + _3418)))); }if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd == (int)1)){ int _8625 = (int)0; int _8626 = _3413; for (int _3419 = _8625;_3419<_8626;++_3419){ (((*_3415)(_3419)) = ((((*_3404)((_3419 + _3412))) - _3411) + first)); }}else { int _8627 = (int)0; int _8628 = _3413; for (int _3420 = _8627;_3420<_8628;++_3420){ std::shared_ptr< monty::ndarray< int,1 > > _3421 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((((*_3404)((_3412 + _3420))) - _3411)); long long _3422 = (long long)0; int _8629 = (int)0; int _8630 = (int)((_3421)->size(0)); for (int _3423 = _8629;_3423<_8630;++_3423){ (_3422 = (_3422 + ((long long)((*_3421)(_3423)) * ((*strides)(_3423))))); }(((*_3415)(_3420)) = _3422); }}if (_3410){ ::mosek::fusion::Utils::Tools::arraycopy(_3410,_3412,_3417,(int)0,_3413); }else {}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->add_l(_3415,_3416,_3406,_3407,_3408,_3409,_3417,(long long)0,(int)0,_3413); }void mosek::fusion::p_SliceConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3424,std::shared_ptr< monty::ndarray< double,1 > > _3425,long long _3426,int _3427,int _3428){ std::shared_ptr< monty::ndarray< long long,1 > > _3429 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3428))); std::shared_ptr< monty::ndarray< double,1 > > _3430 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3428))); ::mosek::fusion::Utils::Tools::arraycopy(_3425,_3427,_3430,(int)0,_3428); int _8631 = (int)0; int _8632 = _3428; for (int _3431 = _8631;_3431<_8632;++_3431){ std::shared_ptr< monty::ndarray< int,1 > > _3432 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3424)((_3427 + _3431)))); long long _3433 = (long long)0; int _8633 = (int)0; int _8634 = (int)((_3432)->size(0)); for (int _3434 = _8633;_3434<_8634;++_3434){ (_3433 = (_3433 + ((long long)((*_3432)(_3434)) * ((*strides)(_3434))))); }(((*_3429)(_3431)) = _3433); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->add_fx(_3429,_3430,(long long)0,(int)0,_3428); }void mosek::fusion::p_SliceConstraint::dual_values( long long _3435,std::shared_ptr< monty::ndarray< int,1 > > _3436,std::shared_ptr< monty::ndarray< long long,1 > > _3437,int _3438,std::shared_ptr< monty::ndarray< double,1 > > _3439){ if (((_3435 == (long long)0) && (((int)((_3436)->size(0)) == (int)1) && ((((*_3436)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_3437)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _3440 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8635; for (int _3441=(int)0, _8636=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3441 < _8636;++_3441)_8635.push_back(shape_p->dim(_3441)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8635.size()),_8635.begin(),_8635.end())); })(); mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(first,_3440,strides,_3438,_3439); }else { int _3442 = (int)((_3436)->size(0)); bool _3443 = (_3442 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _3444 = (int)0; for (;((_3444 < _3442) && _3443);( ++ _3444 )){ (_3443 = (((*_3437)(_3444)) == shape_p->stride(_3444))); }}if (_3443){ long long _3445 = first; { long long _3446 = _3435; int _8637 = (int)0; int _8638 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _3447 = _8637;_3447<_8638;++_3447){ long long _3448 = (_3446 / ((*_3437)(_3447))); (_3446 = (_3446 - (((*_3437)(_3447)) * _3448))); (_3445 = (_3445 + (shape_p->stride(_3447) * _3448))); }}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3445,_3436,strides,_3438,_3439); }else { long long _3449 = (long long)1; int _8639 = (int)0; int _8640 = (int)((_3436)->size(0)); for (int _3450 = _8639;_3450<_8640;++_3450){ (_3449 = (_3449 * ((*_3436)(_3450)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3451 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3449))); { std::shared_ptr< monty::ndarray< int,1 > > _3452 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3436)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _3453 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3436)->size(0))))); int _8641 = (int)0; int _8642 = (int)((_3436)->size(0)); for (int _3454 = _8641;_3454<_8642;++_3454){ (((*_3453)(_3454)) = (long long)0); }long long _8643 = (long long)0; long long _8644 = _3449; for (long long _3455 = _8643;_3455<_8644;++_3455){ { long long _3456 = (_3435 + ((*_3453)((int)0))); long long _3457 = (long long)0; int _8645 = (int)0; int _8646 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3458 = _8645;_3458<_8646;++_3458){ long long _3459 = (_3456 / shape_p->stride(_3458)); (_3457 = (_3457 + (((*strides)(_3458)) * _3459))); (_3456 = (_3456 - (_3459 * shape_p->stride(_3458)))); }(((*_3451)(_3455)) = _3457); }{ int _3460 = (int)0; ( ++ ((*_3452)((int)0)) ); (((*_3453)((int)0)) = (((*_3453)((int)0)) + ((*_3437)((_3442 - (int)1))))); while (((_3460 < (_3442 - (int)1)) && (((*_3452)(_3460)) >= ((*_3436)(((_3442 - _3460) - (int)1)))))) { (((*_3453)(_3460)) = (long long)0); (((*_3453)(_3460)) = (((*_3453)(_3460)) + ((*_3437)(((_3442 - _3460) - (int)1))))); (((*_3452)(_3460)) = (int)0); ( ++ ((*_3452)((_3460 + (int)1))) ); ( ++ _3460 ); }int _8647 = (int)0; int _8648 = _3460; for (int _3461 = _8647;_3461<_8648;++_3461){ (((*_3453)(_3461)) = ((*_3453)(_3460))); }}}}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3451,_3438,_3439); }}}void mosek::fusion::p_SliceConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3462,int _3463,std::shared_ptr< monty::ndarray< double,1 > > _3464){ std::shared_ptr< monty::ndarray< long long,1 > > _3465 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3462)->size(0))))); int _8649 = (int)0; int _8650 = (int)((_3462)->size(0)); for (int _3466 = _8649;_3466<_8650;++_3466){ std::shared_ptr< monty::ndarray< int,1 > > _3467 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3462)(_3466))); long long _3468 = (long long)0; int _8651 = (int)0; int _8652 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3469 = _8651;_3469<_8652;++_3469){ (_3468 = (_3468 + ((long long)((*_3467)(_3469)) * ((*strides)(_3469))))); }(((*_3465)(_3466)) = _3468); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3465,_3463,_3464); }void mosek::fusion::p_SliceConstraint::level_values( long long _3470,std::shared_ptr< monty::ndarray< int,1 > > _3471,std::shared_ptr< monty::ndarray< long long,1 > > _3472,int _3473,std::shared_ptr< monty::ndarray< double,1 > > _3474){ if (((_3470 == (long long)0) && (((int)((_3471)->size(0)) == (int)1) && ((((*_3471)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_3472)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _3475 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8653; for (int _3476=(int)0, _8654=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3476 < _8654;++_3476)_8653.push_back(shape_p->dim(_3476)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8653.size()),_8653.begin(),_8653.end())); })(); mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(first,_3475,strides,_3473,_3474); }else { int _3477 = (int)((_3471)->size(0)); bool _3478 = (_3477 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _3479 = (int)0; for (;((_3479 < _3477) && _3478);( ++ _3479 )){ (_3478 = (((*_3472)(_3479)) == shape_p->stride(_3479))); }}if (_3478){ long long _3480 = first; { long long _3481 = _3470; int _8655 = (int)0; int _8656 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _3482 = _8655;_3482<_8656;++_3482){ long long _3483 = (_3481 / ((*_3472)(_3482))); (_3481 = (_3481 - (((*_3472)(_3482)) * _3483))); (_3480 = (_3480 + (shape_p->stride(_3482) * _3483))); }}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3480,_3471,strides,_3473,_3474); }else { long long _3484 = (long long)1; int _8657 = (int)0; int _8658 = (int)((_3471)->size(0)); for (int _3485 = _8657;_3485<_8658;++_3485){ (_3484 = (_3484 * ((*_3471)(_3485)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3486 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3484))); { std::shared_ptr< monty::ndarray< int,1 > > _3487 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3471)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _3488 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3471)->size(0))))); long long _8659 = (long long)0; long long _8660 = _3484; for (long long _3489 = _8659;_3489<_8660;++_3489){ { long long _3490 = (_3470 + ((*_3488)((int)0))); long long _3491 = (long long)0; int _8661 = (int)0; int _8662 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3492 = _8661;_3492<_8662;++_3492){ long long _3493 = (_3490 / shape_p->stride(_3492)); (_3491 = (_3491 + (((*strides)(_3492)) * _3493))); (_3490 = (_3490 - (_3493 * shape_p->stride(_3492)))); }(((*_3486)(_3489)) = _3491); }{ int _3494 = (int)0; ( ++ ((*_3487)((int)0)) ); (((*_3488)((int)0)) = (((*_3488)((int)0)) + ((*_3472)((_3477 - (int)1))))); while (((_3494 < (_3477 - (int)1)) && (((*_3487)(_3494)) >= ((*_3471)(((_3477 - _3494) - (int)1)))))) { (((*_3488)(_3494)) = (long long)0); (((*_3488)(_3494)) = (((*_3488)(_3494)) + ((*_3472)(((_3477 - _3494) - (int)1))))); (((*_3487)(_3494)) = (int)0); ( ++ ((*_3487)((_3494 + (int)1))) ); ( ++ _3494 ); }int _8663 = (int)0; int _8664 = _3494; for (int _3495 = _8663;_3495<_8664;++_3495){ (((*_3488)(_3495)) = ((*_3488)(_3494))); }}}}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3486,_3473,_3474); }}}void mosek::fusion::p_SliceConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3496,int _3497,std::shared_ptr< monty::ndarray< double,1 > > _3498){ std::shared_ptr< monty::ndarray< long long,1 > > _3499 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3496)->size(0))))); int _8665 = (int)0; int _8666 = (int)((_3496)->size(0)); for (int _3500 = _8665;_3500<_8666;++_3500){ std::shared_ptr< monty::ndarray< int,1 > > _3501 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3496)(_3500))); long long _3502 = (long long)0; int _8667 = (int)0; int _8668 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3503 = _8667;_3503<_8668;++_3503){ (_3502 = (_3502 + ((long long)((*_3501)(_3503)) * ((*strides)(_3503))))); }(((*_3499)(_3500)) = _3502); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3499,_3497,_3498); }void mosek::fusion::p_SliceConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3504,long long _3505,std::shared_ptr< monty::ndarray< std::string,1 > > _3506){ std::shared_ptr< monty::ndarray< long long,1 > > _3507 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3504)->size(0))))); int _8669 = (int)0; int _8670 = (int)((_3504)->size(0)); for (int _3508 = _8669;_3508<_8670;++_3508){ std::shared_ptr< monty::ndarray< int,1 > > _3509 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3504)(_3508))); long long _3510 = (long long)0; int _8671 = (int)0; int _8672 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3511 = _8671;_3511<_8672;++_3511){ (_3510 = (_3510 + ((long long)((*_3509)(_3511)) * ((*strides)(_3511))))); }(((*_3507)(_3508)) = _3510); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->toStringArray(_3507,_3505,_3506); }long long mosek::fusion::SliceConstraint::size  ( ) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->size(); }long long mosek::fusion::p_SliceConstraint::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::SliceConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->slice(_3512,_3513); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3512,std::shared_ptr< monty::ndarray< int,1 > > _3513){ monty::rc_ptr< ::mosek::fusion::Set > _3514 = shape_p->slice(_3512,_3513); long long _3515 = first; { int _3516 = (int)0; for (;(_3516 < (int)((_3512)->size(0)));( ++ _3516 )){ (_3515 = (_3515 + ((long long)((*_3512)(_3516)) * ((*strides)(_3516))))); }}return slice_(_3514,_3515,strides); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::SliceConstraint::slice  ( int _3517,    int _3518) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->slice(_3517,_3518); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice( int _3517,int _3518){ monty::rc_ptr< ::mosek::fusion::Set > _3519 = shape_p->slice(_3517,_3518); return slice_(_3519,(long long)((_3517 + _3517)),strides); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice_( monty::rc_ptr< ::mosek::fusion::Set > _3520,long long _3521,std::shared_ptr< monty::ndarray< long long,1 > > _3522){ return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(origin,_3520,_3521,_3522); }void mosek::fusion::p_SliceConstraint::destroy(){strides.reset();origin.reset();}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3523,    monty::rc_ptr< ::mosek::fusion::Model > _3524){ return new mosek::fusion::RangedConstraint(_3523,_3524); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3523,    monty::rc_ptr< ::mosek::fusion::Model > _3524) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_3523,_3524); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3523,    monty::rc_ptr< ::mosek::fusion::Model > _3524){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3523,_3524);(dom = mosek::fusion::p_RangedConstraint::_get_impl(_3523)->dom); (idxmap = nullptr); }}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3525,    const std::string &  _3526,    monty::rc_ptr< ::mosek::fusion::Set > _3527,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3528,    std::shared_ptr< monty::ndarray< int,1 > > _3529,    std::shared_ptr< monty::ndarray< long long,1 > > _3530,    std::shared_ptr< monty::ndarray< int,1 > > _3531,    std::shared_ptr< monty::ndarray< double,1 > > _3532,    std::shared_ptr< monty::ndarray< double,1 > > _3533,    std::shared_ptr< monty::ndarray< int,1 > > _3534,    std::shared_ptr< monty::ndarray< int,1 > > _3535,    std::shared_ptr< monty::ndarray< int,1 > > _3536){ return new mosek::fusion::RangedConstraint(_3525,_3526,_3527,_3528,_3529,_3530,_3531,_3532,_3533,_3534,_3535,_3536); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3525,    const std::string &  _3526,    monty::rc_ptr< ::mosek::fusion::Set > _3527,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3528,    std::shared_ptr< monty::ndarray< int,1 > > _3529,    std::shared_ptr< monty::ndarray< long long,1 > > _3530,    std::shared_ptr< monty::ndarray< int,1 > > _3531,    std::shared_ptr< monty::ndarray< double,1 > > _3532,    std::shared_ptr< monty::ndarray< double,1 > > _3533,    std::shared_ptr< monty::ndarray< int,1 > > _3534,    std::shared_ptr< monty::ndarray< int,1 > > _3535,    std::shared_ptr< monty::ndarray< int,1 > > _3536) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_3525,_3526,_3527,_3528,_3529,_3530,_3531,_3532,_3533,_3534,_3535,_3536); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3525,    const std::string &  _3526,    monty::rc_ptr< ::mosek::fusion::Set > _3527,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3528,    std::shared_ptr< monty::ndarray< int,1 > > _3529,    std::shared_ptr< monty::ndarray< long long,1 > > _3530,    std::shared_ptr< monty::ndarray< int,1 > > _3531,    std::shared_ptr< monty::ndarray< double,1 > > _3532,    std::shared_ptr< monty::ndarray< double,1 > > _3533,    std::shared_ptr< monty::ndarray< int,1 > > _3534,    std::shared_ptr< monty::ndarray< int,1 > > _3535,    std::shared_ptr< monty::ndarray< int,1 > > _3536){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3525,_3526,_3527,_3529,_3530,_3531,_3532,_3533,_3534,_3535,_3536);(dom = _3528); (idxmap = nullptr); }}void mosek::fusion::p_RangedConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3537,std::shared_ptr< monty::ndarray< double,1 > > _3538,long long _3539,int _3540,int _3541){ std::shared_ptr< monty::ndarray< double,1 > > _3542 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3541))); std::shared_ptr< monty::ndarray< double,1 > > _3543 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3541))); std::shared_ptr< monty::ndarray< int,1 > > _3544 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3541))); int _8673 = (int)0; int _8674 = _3541; for (int _3545 = _8673;_3545<_8674;++_3545){ (((*_3544)(_3545)) = ((*nativeindexes)((((*_3537)((_3540 + _3545))) - _3539)))); }int _8675 = (int)0; int _8676 = (int)((_3542)->size(0)); for (int _3546 = _8675;_3546<_8676;++_3546){ (((*_3542)(_3546)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item((((*_3537)((_3540 + _3546))) - _3539)) - ((*_3538)((((*_3537)((_3540 + _3546))) - _3539))))); (((*_3543)(_3546)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item((((*_3537)((_3540 + _3546))) - _3539)) - ((*_3538)((((*_3537)((_3540 + _3546))) - _3539))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_ra(_3544,_3542,_3543); }void mosek::fusion::p_RangedConstraint::dual_u( long long _3547,std::shared_ptr< monty::ndarray< int,1 > > _3548,std::shared_ptr< monty::ndarray< long long,1 > > _3549,int _3550,std::shared_ptr< monty::ndarray< double,1 > > _3551){ long long _3552 = (long long)1; int _3553 = (int)((_3549)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3554 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3547,_3548,_3549); std::shared_ptr< monty::ndarray< double,1 > > _3555 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_suc(::mosek::fusion::SolutionType::Default); int _8677 = (int)0; int _8678 = _3553; for (int _3556 = _8677;_3556<_8678;++_3556){ (_3552 = (_3552 * ((*_3548)(_3556)))); }if (nativeindexes){ long long _8679 = (long long)0; long long _8680 = _3552; for (long long _3557 = _8679;_3557<_8680;++_3557){ (((*_3551)((_3557 + _3550))) = (((*_3555)(((*nativeindexes)(_3554->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3554->get())))); _3554->inc(); }}else { long long _8681 = (long long)0; long long _8682 = _3552; for (long long _3558 = _8681;_3558<_8682;++_3558){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3554->get())){ (((*_3551)(_3558)) = (((*_3555)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3554->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3554->get())))); }else { (((*_3551)(_3558)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3554->get())); }_3554->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _3559,int _3560,std::shared_ptr< monty::ndarray< double,1 > > _3561){ std::shared_ptr< monty::ndarray< double,1 > > _3562 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_suc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8683 = (int)0; int _8684 = (int)((_3559)->size(0)); for (int _3563 = _8683;_3563<_8684;++_3563){ (((*_3561)((_3560 + _3563))) = (((*_3562)(((*nativeindexes)(((*_3559)(_3563)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3559)(_3563)))))); }}else { int _8685 = (int)0; int _8686 = (int)((_3559)->size(0)); for (int _3564 = _8685;_3564<_8686;++_3564){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3559)(_3564)))){ (((*_3561)((_3560 + _3564))) = (((*_3562)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3559)(_3564))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3559)(_3564)))))); }else { (((*_3561)((_3560 + _3564))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3559)(_3564)))); }}}}void mosek::fusion::p_RangedConstraint::dual_l( long long _3565,std::shared_ptr< monty::ndarray< int,1 > > _3566,std::shared_ptr< monty::ndarray< long long,1 > > _3567,int _3568,std::shared_ptr< monty::ndarray< double,1 > > _3569){ long long _3570 = (long long)1; int _3571 = (int)((_3567)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3572 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3565,_3566,_3567); std::shared_ptr< monty::ndarray< double,1 > > _3573 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slc(::mosek::fusion::SolutionType::Default); int _8687 = (int)0; int _8688 = _3571; for (int _3574 = _8687;_3574<_8688;++_3574){ (_3570 = (_3570 * ((*_3566)(_3574)))); }if (nativeindexes){ long long _8689 = (long long)0; long long _8690 = _3570; for (long long _3575 = _8689;_3575<_8690;++_3575){ (((*_3569)((_3575 + _3568))) = (((*_3573)(((*nativeindexes)(_3572->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3572->get())))); _3572->inc(); }}else { long long _8691 = (long long)0; long long _8692 = _3570; for (long long _3576 = _8691;_3576<_8692;++_3576){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3572->get())){ (((*_3569)(_3576)) = (((*_3573)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3572->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3572->get())))); }else { (((*_3569)(_3576)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3572->get())); }_3572->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _3577,int _3578,std::shared_ptr< monty::ndarray< double,1 > > _3579){ std::shared_ptr< monty::ndarray< double,1 > > _3580 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8693 = (int)0; int _8694 = (int)((_3577)->size(0)); for (int _3581 = _8693;_3581<_8694;++_3581){ (((*_3579)((_3578 + _3581))) = (((*_3580)(((*nativeindexes)(((*_3577)(_3581)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3577)(_3581)))))); }}else { int _8695 = (int)0; int _8696 = (int)((_3577)->size(0)); for (int _3582 = _8695;_3582<_8696;++_3582){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3577)(_3582)))){ (((*_3579)((_3578 + _3582))) = (((*_3580)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3577)(_3582))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3577)(_3582)))))); }else { (((*_3579)((_3578 + _3582))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3577)(_3582)))); }}}}void mosek::fusion::p_RangedConstraint::dual_values( long long _3583,std::shared_ptr< monty::ndarray< int,1 > > _3584,std::shared_ptr< monty::ndarray< long long,1 > > _3585,int _3586,std::shared_ptr< monty::ndarray< double,1 > > _3587){ long long _3588 = (long long)1; int _3589 = (int)((_3585)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3590 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3583,_3584,_3585); std::shared_ptr< monty::ndarray< double,1 > > _3591 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); int _8697 = (int)0; int _8698 = _3589; for (int _3592 = _8697;_3592<_8698;++_3592){ (_3588 = (_3588 * ((*_3584)(_3592)))); }if (nativeindexes){ long long _8699 = (long long)0; long long _8700 = _3588; for (long long _3593 = _8699;_3593<_8700;++_3593){ (((*_3587)((_3593 + _3586))) = (((*_3591)(((*nativeindexes)(_3590->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3590->get())))); _3590->inc(); }}else { long long _8701 = (long long)0; long long _8702 = _3588; for (long long _3594 = _8701;_3594<_8702;++_3594){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3590->get())){ (((*_3587)(_3594)) = (((*_3591)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3590->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3590->get())))); }else { (((*_3587)(_3594)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3590->get())); }_3590->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3595,int _3596,std::shared_ptr< monty::ndarray< double,1 > > _3597){ std::shared_ptr< monty::ndarray< double,1 > > _3598 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8703 = (int)0; int _8704 = (int)((_3595)->size(0)); for (int _3599 = _8703;_3599<_8704;++_3599){ (((*_3597)((_3596 + _3599))) = (((*_3598)(((*nativeindexes)(((*_3595)(_3599)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3595)(_3599)))))); }}else { int _8705 = (int)0; int _8706 = (int)((_3595)->size(0)); for (int _3600 = _8705;_3600<_8706;++_3600){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3595)(_3600)))){ (((*_3597)((_3596 + _3600))) = (((*_3598)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3595)(_3600))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3595)(_3600)))))); }else { (((*_3597)((_3596 + _3600))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3595)(_3600)))); }}}}void mosek::fusion::p_RangedConstraint::level_values( long long _3601,std::shared_ptr< monty::ndarray< int,1 > > _3602,std::shared_ptr< monty::ndarray< long long,1 > > _3603,int _3604,std::shared_ptr< monty::ndarray< double,1 > > _3605){ long long _3606 = (long long)1; int _3607 = (int)((_3603)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3608 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3601,_3602,_3603); std::shared_ptr< monty::ndarray< double,1 > > _3609 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8707 = (int)0; int _8708 = _3607; for (int _3610 = _8707;_3610<_8708;++_3610){ (_3606 = (_3606 * ((*_3602)(_3610)))); }if (nativeindexes){ long long _8709 = (long long)0; long long _8710 = _3606; for (long long _3611 = _8709;_3611<_8710;++_3611){ (((*_3605)((_3611 + _3604))) = (((*_3609)(((*nativeindexes)(_3608->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3608->get())))); _3608->inc(); }}else { long long _8711 = (long long)0; long long _8712 = _3606; for (long long _3612 = _8711;_3612<_8712;++_3612){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3608->get())){ (((*_3605)(_3612)) = (((*_3609)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3608->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3608->get())))); }else { (((*_3605)(_3612)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3608->get())); }_3608->inc(); }}}void mosek::fusion::p_RangedConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3613,int _3614,std::shared_ptr< monty::ndarray< double,1 > > _3615){ std::shared_ptr< monty::ndarray< double,1 > > _3616 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8713 = (int)0; int _8714 = (int)((_3613)->size(0)); for (int _3617 = _8713;_3617<_8714;++_3617){ (((*_3615)((_3614 + _3617))) = (((*_3616)(((*nativeindexes)(((*_3613)(_3617)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3613)(_3617)))))); }}else { int _8715 = (int)0; int _8716 = (int)((_3613)->size(0)); for (int _3618 = _8715;_3618<_8716;++_3618){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3613)(_3618)))){ (((*_3615)((_3614 + _3618))) = (((*_3616)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3613)(_3618))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3613)(_3618)))))); }else { (((*_3615)((_3614 + _3618))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3613)(_3618)))); }}}}void mosek::fusion::p_RangedConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3619,std::shared_ptr< monty::ndarray< long long,1 > > _3620,std::shared_ptr< monty::ndarray< int,1 > > _3621,std::shared_ptr< monty::ndarray< int,1 > > _3622,std::shared_ptr< monty::ndarray< int,1 > > _3623,std::shared_ptr< monty::ndarray< double,1 > > _3624,std::shared_ptr< monty::ndarray< double,1 > > _3625,int _3626,int _3627,int _3628){ add_l(_3619,_3620,_3621,_3622,_3623,_3624,_3625,_3626,_3627,_3628); if (_3625){ long long _3629 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_RangeDomain::_get_impl(dom)->shape)->size; std::shared_ptr< monty::ndarray< double,1 > > _3630 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3629))); std::shared_ptr< monty::ndarray< double,1 > > _3631 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3629))); std::shared_ptr< monty::ndarray< int,1 > > _3632 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3628))); int _8717 = (int)0; int _8718 = _3628; for (int _3633 = _8717;_3633<_8718;++_3633){ (((*_3630)(_3633)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(((*_3619)(_3633))) - ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3633)))); (((*_3631)(_3633)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3619)(_3633))) - ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3633)))); (((*_3632)(_3633)) = ((*nativeindexes)(((*_3619)(_3633))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_ra(_3632,_3630,_3631); }else {}}void mosek::fusion::p_RangedConstraint::domainToString( long long _3634,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3635){ mosek::fusion::p_RangeDomain::_get_impl(dom.get())->domainToString(_3634,_3635); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::RangedConstraint::upperBoundCon  ( ) { return mosek::fusion::p_RangedConstraint::_get_impl(this)->upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_RangedConstraint::upperBoundCon( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3636 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3636)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3637 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3637 > (int)0);( -- _3637 )){ (((*_3636)((_3637 - (int)1))) = (((*_3636)(_3637)) * shape_p->dim(_3637))); }}return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis,shape_p,(long long)0,_3636,false); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::RangedConstraint::lowerBoundCon  ( ) { return mosek::fusion::p_RangedConstraint::_get_impl(this)->lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_RangedConstraint::lowerBoundCon( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3638 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3638)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3639 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3639 > (int)0);( -- _3639 )){ (((*_3638)((_3639 - (int)1))) = (((*_3638)(_3639)) * shape_p->dim(_3639))); }}return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis,shape_p,(long long)0,_3638,true); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3640){ return ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(_pubthis,_3640); }void mosek::fusion::p_RangedConstraint::destroy(){idxmap.reset();dom.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3641,    monty::rc_ptr< ::mosek::fusion::Model > _3642){ return new mosek::fusion::ConicConstraint(_3641,_3642); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3641,    monty::rc_ptr< ::mosek::fusion::Model > _3642) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_3641,_3642); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3641,    monty::rc_ptr< ::mosek::fusion::Model > _3642){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3641,_3642);(first_slack = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->first_slack); (last_slack = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->last_slack); (first = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->first); (last = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->last); (dom = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->dom); (conesize = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->conesize); (coneidx = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->coneidx); (names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_3641)->names_flushed); }}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3643,    const std::string &  _3644,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3645,    monty::rc_ptr< ::mosek::fusion::Set > _3646,    std::shared_ptr< monty::ndarray< int,1 > > _3647,    int _3648,    int _3649,    int _3650,    int _3651,    int _3652,    std::shared_ptr< monty::ndarray< long long,1 > > _3653,    std::shared_ptr< monty::ndarray< int,1 > > _3654,    std::shared_ptr< monty::ndarray< double,1 > > _3655,    std::shared_ptr< monty::ndarray< double,1 > > _3656,    std::shared_ptr< monty::ndarray< int,1 > > _3657,    std::shared_ptr< monty::ndarray< int,1 > > _3658,    std::shared_ptr< monty::ndarray< int,1 > > _3659){ return new mosek::fusion::ConicConstraint(_3643,_3644,_3645,_3646,_3647,_3648,_3649,_3650,_3651,_3652,_3653,_3654,_3655,_3656,_3657,_3658,_3659); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3643,    const std::string &  _3644,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3645,    monty::rc_ptr< ::mosek::fusion::Set > _3646,    std::shared_ptr< monty::ndarray< int,1 > > _3647,    int _3648,    int _3649,    int _3650,    int _3651,    int _3652,    std::shared_ptr< monty::ndarray< long long,1 > > _3653,    std::shared_ptr< monty::ndarray< int,1 > > _3654,    std::shared_ptr< monty::ndarray< double,1 > > _3655,    std::shared_ptr< monty::ndarray< double,1 > > _3656,    std::shared_ptr< monty::ndarray< int,1 > > _3657,    std::shared_ptr< monty::ndarray< int,1 > > _3658,    std::shared_ptr< monty::ndarray< int,1 > > _3659) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_3643,_3644,_3645,_3646,_3647,_3648,_3649,_3650,_3651,_3652,_3653,_3654,_3655,_3656,_3657,_3658,_3659); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3643,    const std::string &  _3644,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3645,    monty::rc_ptr< ::mosek::fusion::Set > _3646,    std::shared_ptr< monty::ndarray< int,1 > > _3647,    int _3648,    int _3649,    int _3650,    int _3651,    int _3652,    std::shared_ptr< monty::ndarray< long long,1 > > _3653,    std::shared_ptr< monty::ndarray< int,1 > > _3654,    std::shared_ptr< monty::ndarray< double,1 > > _3655,    std::shared_ptr< monty::ndarray< double,1 > > _3656,    std::shared_ptr< monty::ndarray< int,1 > > _3657,    std::shared_ptr< monty::ndarray< int,1 > > _3658,    std::shared_ptr< monty::ndarray< int,1 > > _3659){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3643,_3644,_3646,_3647,_3653,_3654,_3655,_3656,_3657,_3658,_3659);(first_slack = _3648); (last_slack = _3649); (first = _3651); (last = (_3651 + _3652)); (dom = _3645); (conesize = _3650); (coneidx = _3651); (names_flushed = false); }}void mosek::fusion::p_ConicConstraint::flushNames( ){ ::mosek::fusion::p_ModelConstraint::flushNames(); if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8719 = first_slack; int _8720 = last_slack; for (int _3660 = _8719;_3660<_8720;++_3660){ mosek::fusion::p_Model::_get_impl(model.get())->task_var_name(_3660,([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)((_3660 - first_slack)))).get())->a(std::string ("].coneslack")).get())->toString()); })()); }int _8721 = first; int _8722 = last; for (int _3661 = _8721;_3661<_8722;++_3661){ mosek::fusion::p_Model::_get_impl(model.get())->task_cone_name(_3661,([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a((_3661 - first)).get())->a(std::string ("]")).get())->toString()); })()); }(names_flushed = true); }else {}}std::string mosek::fusion::ConicConstraint::toString  ( ) { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString( ){ long long _3662 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3663 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3662))); toStringArray(::mosek::fusion::Utils::Tools::range(_3662),(long long)0,_3663); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3664 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string ("ConicConstraint( (")).get())->a(shape_p->dim((int)0)); int _8723 = (int)1; int _8724 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3665 = _8723;_3665<_8724;++_3665){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string (",")).get())->a(shape_p->dim(_3665)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string ("),")); if ((mosek::fusion::p_QConeDomain::_get_impl(dom)->key == ::mosek::fusion::QConeKey::InQCone)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string (" QuadCone,")).get())->lf(); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string (" RotatedQuadCone,")).get())->lf(); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string ("  ")).get())->a(((*_3663)((int)0))); int _8725 = (int)1; int _8726 = (int)((_3663)->size(0)); for (int _3666 = _8725;_3666<_8726;++_3666){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3663)(_3666))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3664.get())->toString(); }void mosek::fusion::p_ConicConstraint::dual_values( long long _3667,std::shared_ptr< monty::ndarray< int,1 > > _3668,std::shared_ptr< monty::ndarray< long long,1 > > _3669,int _3670,std::shared_ptr< monty::ndarray< double,1 > > _3671){ long long _3672 = (long long)1; int _3673 = (int)((_3669)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3674 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3667,_3668,_3669); std::shared_ptr< monty::ndarray< double,1 > > _3675 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); int _8727 = (int)0; int _8728 = _3673; for (int _3676 = _8727;_3676<_8728;++_3676){ (_3672 = (_3672 * ((*_3668)(_3676)))); }long long _8729 = (long long)0; long long _8730 = _3672; for (long long _3677 = _8729;_3677<_8730;++_3677){ (((*_3671)((_3677 + _3670))) = ((*_3675)(((long long)first_slack + _3674->get())))); _3674->inc(); }}void mosek::fusion::p_ConicConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3678,int _3679,std::shared_ptr< monty::ndarray< double,1 > > _3680){ std::shared_ptr< monty::ndarray< double,1 > > _3681 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); int _8731 = (int)0; int _8732 = (int)((_3678)->size(0)); for (int _3682 = _8731;_3682<_8732;++_3682){ (((*_3680)((_3679 + _3682))) = ((*_3681)(((long long)first_slack + ((*_3678)(_3682)))))); }}void mosek::fusion::p_ConicConstraint::level_values( long long _3683,std::shared_ptr< monty::ndarray< int,1 > > _3684,std::shared_ptr< monty::ndarray< long long,1 > > _3685,int _3686,std::shared_ptr< monty::ndarray< double,1 > > _3687){ long long _3688 = (long long)1; int _3689 = (int)((_3685)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3690 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3683,_3684,_3685); std::shared_ptr< monty::ndarray< double,1 > > _3691 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _3692 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8733 = (int)0; int _8734 = _3689; for (int _3693 = _8733;_3693<_8734;++_3693){ (_3688 = (_3688 * ((*_3684)(_3693)))); }long long _8735 = (long long)0; long long _8736 = _3688; for (long long _3694 = _8735;_3694<_8736;++_3694){ (((*_3687)((_3694 + _3686))) = (((*_3691)((first_slack + _3690->get()))) + ((*_3692)(((*nativeindexes)(_3690->get())))))); _3690->inc(); }}void mosek::fusion::p_ConicConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3695,int _3696,std::shared_ptr< monty::ndarray< double,1 > > _3697){ std::shared_ptr< monty::ndarray< double,1 > > _3698 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _3699 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8737 = (int)0; int _8738 = (int)((_3695)->size(0)); for (int _3700 = _8737;_3700<_8738;++_3700){ (((*_3697)((_3696 + _3700))) = (((*_3699)(((*nativeindexes)(((*_3695)(_3700)))))) + ((*_3698)((first_slack + ((*_3695)(_3700))))))); }}void mosek::fusion::p_ConicConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3701,std::shared_ptr< monty::ndarray< double,1 > > _3702,long long _3703,int _3704,int _3705){ std::shared_ptr< monty::ndarray< double,1 > > _3706 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8739; for (int _3707=(int)0, _8740=_3705; _3707 < _8740;++_3707)_8739.push_back((- ((*_3702)((((*_3701)((_3704 + _3707))) - _3703))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8739.size()),_8739.begin(),_8739.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3708 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8741; for (int _3709=(int)0, _8742=_3705; _3709 < _8742;++_3709)_8741.push_back(((*nativeindexes)((((*_3701)((_3704 + _3709))) - _3703)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8741.size()),_8741.begin(),_8741.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3708,_3706); }void mosek::fusion::p_ConicConstraint::dual( std::shared_ptr< monty::ndarray< int,1 > > _3710,int _3711,int _3712,int _3713,std::shared_ptr< monty::ndarray< double,1 > > _3714){ if (((_3712 - _3711) > ((int)((_3714)->size(0)) - _3713))){ throw ::mosek::fusion::SliceError(std::string ("Wrong target array length"));}else if (((_3712 < _3711) || (_3712 >= (int)((_3710)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Slice indexes out of bounds"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _3715 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); { int _3716 = (int)0; for (;(_3716 < (_3712 - _3711));( ++ _3716 )){ (((*_3714)((_3716 + _3713))) = ((*_3715)((first_slack + ((*_3710)((_3711 + _3716))))))); }}}void mosek::fusion::p_ConicConstraint::dual_values( std::shared_ptr< monty::ndarray< int,1 > > _3717,std::shared_ptr< monty::ndarray< int,1 > > _3718,int _3719,std::shared_ptr< monty::ndarray< double,1 > > _3720){ if ((((int)((_3717)->size(0)) != (int)1) || ((int)((_3718)->size(0)) != (int)1))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice dimensions"));}else {}int _3721 = ((*_3717)((int)0)); int _3722 = ((*_3718)((int)0)); if (((_3722 - _3721) > ((int)((_3720)->size(0)) - _3719))){ throw ::mosek::fusion::SliceError(std::string ("Wrong target array length"));}else if (((_3722 < _3721) || (_3722 > (last_slack - first_slack)))){ throw ::mosek::fusion::SliceError(std::string ("Slice indexes out of bounds"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _3723; (_3723 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); { int _3724 = (int)0; for (;(_3724 < (_3722 - _3721));( ++ _3724 )){ (((*_3720)((_3724 + _3719))) = ((*_3723)(((_3721 + _3724) + first_slack)))); }}}void mosek::fusion::p_ConicConstraint::domainToString( long long _3725,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3726){ mosek::fusion::p_QConeDomain::_get_impl(dom.get())->domainToString(_3725,_3726); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3727){ return ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(_pubthis,_3727); }void mosek::fusion::p_ConicConstraint::destroy(){dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3728,    monty::rc_ptr< ::mosek::fusion::Model > _3729){ return new mosek::fusion::LinearConstraint(_3728,_3729); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3728,    monty::rc_ptr< ::mosek::fusion::Model > _3729) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_3728,_3729); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3728,    monty::rc_ptr< ::mosek::fusion::Model > _3729){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3728,_3729);(dom = mosek::fusion::p_LinearConstraint::_get_impl(_3728)->dom); (idxmap = nullptr); }}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3730,    const std::string &  _3731,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3732,    monty::rc_ptr< ::mosek::fusion::Set > _3733,    std::shared_ptr< monty::ndarray< int,1 > > _3734,    std::shared_ptr< monty::ndarray< long long,1 > > _3735,    std::shared_ptr< monty::ndarray< int,1 > > _3736,    std::shared_ptr< monty::ndarray< double,1 > > _3737,    std::shared_ptr< monty::ndarray< double,1 > > _3738,    std::shared_ptr< monty::ndarray< int,1 > > _3739,    std::shared_ptr< monty::ndarray< int,1 > > _3740,    std::shared_ptr< monty::ndarray< int,1 > > _3741){ return new mosek::fusion::LinearConstraint(_3730,_3731,_3732,_3733,_3734,_3735,_3736,_3737,_3738,_3739,_3740,_3741); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3730,    const std::string &  _3731,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3732,    monty::rc_ptr< ::mosek::fusion::Set > _3733,    std::shared_ptr< monty::ndarray< int,1 > > _3734,    std::shared_ptr< monty::ndarray< long long,1 > > _3735,    std::shared_ptr< monty::ndarray< int,1 > > _3736,    std::shared_ptr< monty::ndarray< double,1 > > _3737,    std::shared_ptr< monty::ndarray< double,1 > > _3738,    std::shared_ptr< monty::ndarray< int,1 > > _3739,    std::shared_ptr< monty::ndarray< int,1 > > _3740,    std::shared_ptr< monty::ndarray< int,1 > > _3741) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_3730,_3731,_3732,_3733,_3734,_3735,_3736,_3737,_3738,_3739,_3740,_3741); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3730,    const std::string &  _3731,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3732,    monty::rc_ptr< ::mosek::fusion::Set > _3733,    std::shared_ptr< monty::ndarray< int,1 > > _3734,    std::shared_ptr< monty::ndarray< long long,1 > > _3735,    std::shared_ptr< monty::ndarray< int,1 > > _3736,    std::shared_ptr< monty::ndarray< double,1 > > _3737,    std::shared_ptr< monty::ndarray< double,1 > > _3738,    std::shared_ptr< monty::ndarray< int,1 > > _3739,    std::shared_ptr< monty::ndarray< int,1 > > _3740,    std::shared_ptr< monty::ndarray< int,1 > > _3741){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3730,_3731,_3733,_3734,_3735,_3736,_3737,_3738,_3739,_3740,_3741);(dom = _3732); (idxmap = nullptr); }}void mosek::fusion::p_LinearConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3742,std::shared_ptr< monty::ndarray< double,1 > > _3743,long long _3744,int _3745,int _3746){ std::shared_ptr< monty::ndarray< double,1 > > _3747; if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::IsFree)){ }else { (_3747 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3746)))); std::shared_ptr< monty::ndarray< int,1 > > _3748 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8743; for (int _3749=(int)0, _8744=_3746; _3749 < _8744;++_3749)_8743.push_back(((*nativeindexes)((((*_3742)((_3745 + _3749))) - _3744)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8743.size()),_8743.begin(),_8743.end())); })(); (_3747 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8745; for (int _3750=(int)0, _8746=_3746; _3750 < _8746;++_3750)_8745.push_back((mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item((((*_3742)((_3745 + _3750))) - _3744)) - ((*_3743)((((*_3742)((_3745 + _3750))) - _3744))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8745.size()),_8745.begin(),_8745.end())); })()); if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::EqualsTo)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3748,_3747); }else if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::LessThan)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_up(_3748,_3747); }else if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::GreaterThan)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_lo(_3748,_3747); }else {}}}void mosek::fusion::p_LinearConstraint::dual_values( long long _3751,std::shared_ptr< monty::ndarray< int,1 > > _3752,std::shared_ptr< monty::ndarray< long long,1 > > _3753,int _3754,std::shared_ptr< monty::ndarray< double,1 > > _3755){ long long _3756 = (long long)1; int _3757 = (int)((_3753)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3758 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3751,_3752,_3753); std::shared_ptr< monty::ndarray< double,1 > > _3759 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); int _8747 = (int)0; int _8748 = _3757; for (int _3760 = _8747;_3760<_8748;++_3760){ (_3756 = (_3756 * ((*_3752)(_3760)))); }if (nativeindexes){ long long _8749 = (long long)0; long long _8750 = _3756; for (long long _3761 = _8749;_3761<_8750;++_3761){ (((*_3755)((_3761 + _3754))) = ((*_3759)(((*nativeindexes)(_3758->get()))))); _3758->inc(); }}else { long long _8751 = (long long)0; long long _8752 = _3756; for (long long _3762 = _8751;_3762<_8752;++_3762){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3758->get())){ (((*_3755)(_3762)) = ((*_3759)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3758->get())))); }else { (((*_3755)(_3762)) = 0.0); }_3758->inc(); }}}void mosek::fusion::p_LinearConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3763,int _3764,std::shared_ptr< monty::ndarray< double,1 > > _3765){ std::shared_ptr< monty::ndarray< double,1 > > _3766 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8753 = (int)0; int _8754 = (int)((_3763)->size(0)); for (int _3767 = _8753;_3767<_8754;++_3767){ (((*_3765)((_3764 + _3767))) = ((*_3766)(((*nativeindexes)(((*_3763)(_3767))))))); }}else { int _8755 = (int)0; int _8756 = (int)((_3763)->size(0)); for (int _3768 = _8755;_3768<_8756;++_3768){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3763)(_3768)))){ (((*_3765)((_3764 + _3768))) = ((*_3766)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3763)(_3768)))))); }else { (((*_3765)((_3764 + _3768))) = 0.0); }}}}void mosek::fusion::p_LinearConstraint::level_values( long long _3769,std::shared_ptr< monty::ndarray< int,1 > > _3770,std::shared_ptr< monty::ndarray< long long,1 > > _3771,int _3772,std::shared_ptr< monty::ndarray< double,1 > > _3773){ long long _3774 = (long long)1; int _3775 = (int)((_3771)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3776 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3769,_3770,_3771); std::shared_ptr< monty::ndarray< double,1 > > _3777 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8757 = (int)0; int _8758 = _3775; for (int _3778 = _8757;_3778<_8758;++_3778){ (_3774 = (_3774 * ((*_3770)(_3778)))); }if (nativeindexes){ long long _8759 = (long long)0; long long _8760 = _3774; for (long long _3779 = _8759;_3779<_8760;++_3779){ (((*_3773)((_3779 + _3772))) = ((*_3777)(((*nativeindexes)(_3776->get()))))); _3776->inc(); }}else { long long _8761 = (long long)0; long long _8762 = _3774; for (long long _3780 = _8761;_3780<_8762;++_3780){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3776->get())){ (((*_3773)(_3780)) = ((*_3777)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3776->get())))); }else { (((*_3773)(_3780)) = 0.0); }_3776->inc(); }}}void mosek::fusion::p_LinearConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3781,int _3782,std::shared_ptr< monty::ndarray< double,1 > > _3783){ std::shared_ptr< monty::ndarray< double,1 > > _3784 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8763 = (int)0; int _8764 = (int)((_3781)->size(0)); for (int _3785 = _8763;_3785<_8764;++_3785){ (((*_3783)((_3782 + _3785))) = ((*_3784)(((*nativeindexes)(((*_3781)(_3785))))))); }}else { int _8765 = (int)0; int _8766 = (int)((_3781)->size(0)); for (int _3786 = _8765;_3786<_8766;++_3786){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3781)(_3786)))){ (((*_3783)((_3782 + _3786))) = ((*_3784)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3781)(_3786)))))); }else { (((*_3783)((_3782 + _3786))) = 0.0); }}}}void mosek::fusion::p_LinearConstraint::domainToString( long long _3787,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3788){ mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_3787,_3788); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3789){ return ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(_pubthis,_3789); }void mosek::fusion::p_LinearConstraint::destroy(){dom.reset();idxmap.reset();}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3790,    monty::rc_ptr< ::mosek::fusion::Model > _3791){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(_3790,_3791);(cache = mosek::fusion::p_ConstraintCache::_get_impl(mosek::fusion::p_ModelConstraint::_get_impl(_3790)->cache.get())->clone()); (nativeindexes = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8767; for (int _3792=(int)0, _8768=(int)((mosek::fusion::p_ModelConstraint::_get_impl(_3790)->nativeindexes)->size(0)); _3792 < _8768;++_3792)_8767.push_back(((*mosek::fusion::p_ModelConstraint::_get_impl(_3790)->nativeindexes)(_3792))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8767.size()),_8767.begin(),_8767.end())); })()); (name = mosek::fusion::p_ModelConstraint::_get_impl(_3790)->name); (cache_bfix = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8769; for (int _3793=(int)0, _8770=(int)((mosek::fusion::p_ModelConstraint::_get_impl(_3790)->cache_bfix)->size(0)); _3793 < _8770;++_3793)_8769.push_back(((*mosek::fusion::p_ModelConstraint::_get_impl(_3790)->cache_bfix)(_3793))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8769.size()),_8769.begin(),_8769.end())); })()); (names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_3790)->names_flushed); }}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3794,    const std::string &  _3795,    monty::rc_ptr< ::mosek::fusion::Set > _3796,    std::shared_ptr< monty::ndarray< int,1 > > _3797,    std::shared_ptr< monty::ndarray< long long,1 > > _3798,    std::shared_ptr< monty::ndarray< int,1 > > _3799,    std::shared_ptr< monty::ndarray< double,1 > > _3800,    std::shared_ptr< monty::ndarray< double,1 > > _3801,    std::shared_ptr< monty::ndarray< int,1 > > _3802,    std::shared_ptr< monty::ndarray< int,1 > > _3803,    std::shared_ptr< monty::ndarray< int,1 > > _3804){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(_3794,_3796);(cache = ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(_3798,_3800,_3799,_3801,_3802,_3803,_3804)); (nativeindexes = _3797); (name = _3795); if (_3801){ (cache_bfix = ::mosek::fusion::Utils::Tools::arraycopy(_3801)); }else { (cache_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_3797)->size(0)))))); }(names_flushed = false); }}void mosek::fusion::p_ModelConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8771 = (int)0; int _8772 = (int)((nativeindexes)->size(0)); for (int _3805 = _8771;_3805<_8772;++_3805){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3805)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_3805))).get())->a(std::string ("]")).get())->toString()); })()); }(names_flushed = true); }else {}}std::string mosek::fusion::ModelConstraint::toString  ( ) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString( ){ long long _3806 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3807 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3806))); toStringArray(::mosek::fusion::Utils::Tools::range(_3806),(long long)0,_3807); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3808 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string ("Constraint( ")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("', ")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string ("(")).get())->a(shape_p->dim((int)0)); int _8773 = (int)1; int _8774 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3809 = _8773;_3809<_8774;++_3809){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string (",")).get())->a(shape_p->dim(_3809)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string ("),")).get())->lf(); if (((int)((_3807)->size(0)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string ("  ")).get())->a(((*_3807)((int)0))); int _8775 = (int)1; int _8776 = (int)((_3807)->size(0)); for (int _3810 = _8775;_3810<_8776;++_3810){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3807)(_3810))); }}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3808.get())->toString(); }void mosek::fusion::p_ModelConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3811,long long _3812,std::shared_ptr< monty::ndarray< std::string,1 > > _3813){ int _8777 = (int)0; int _8778 = (int)((_3811)->size(0)); for (int _3814 = _8777;_3814<_8778;++_3814){ if (((((*_3811)(_3814)) < (int)0) || (((*_3811)(_3814)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_3811)->size(0)) + _3812) > (long long)((_3813)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3815 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); int _3816 = (int)0; long long _3817 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _3818 = (int)0; int _8779 = (int)0; int _8780 = (int)((_3811)->size(0)); for (int _3819 = _8779;_3819<_8780;++_3819){ long long _3820 = ((*_3811)(_3819)); int _3821 = ((*nativeindexes)(_3820)); int _3822 = _3816; while (((_3816 < mosek::fusion::p_ConstraintCache::_get_impl(cache)->nnz) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3816)) == _3820))) { ( ++ _3816 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_3820)).get())->a(std::string ("] : ")); int _8781 = _3822; int _8782 = _3816; for (int _3823 = _8781;_3823<_8782;++_3823){ double _3824 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_3823)); if ((_3824 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" + ")).get())->a(_3824).get())->a(std::string (" ")); mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3823)),_3815); }else if ((_3824 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" - ")).get())->a((- _3824)).get())->a(std::string (" ")); mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3823)),_3815); }else {}}while (((_3818 < _3817) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3818)) < _3820))) { ( ++ _3818 ); }int _3825 = _3818; while (((_3825 < _3817) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3825)) == _3820))) { ( ++ _3825 ); }while (((_3818 < _3825) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3818)) == _3820))) { int _3826 = _3818; int _3827 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3818)); ( ++ _3818 ); while (((_3818 < _3825) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3818)) == _3827))) { ( ++ _3818 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3826))); int _8783 = (_3826 + (int)1); int _8784 = _3818; for (int _3828 = _8783;_3828<_8784;++_3828){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3828))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3826)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3826)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_3820)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3820))); }else if ((((*cache_bfix)(_3820)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3820))); }else {}}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->a(std::string (" ")); domainToString(_3820,_3815); (((*_3813)(((long long)_3819 + _3812))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_3815.get())->toString()); }}void mosek::fusion::p_ModelConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3831,std::shared_ptr< monty::ndarray< long long,1 > > _3832,std::shared_ptr< monty::ndarray< int,1 > > _3833,std::shared_ptr< monty::ndarray< int,1 > > _3834,std::shared_ptr< monty::ndarray< int,1 > > _3835,std::shared_ptr< monty::ndarray< double,1 > > _3836,std::shared_ptr< monty::ndarray< double,1 > > _3837,long long _3838,int _3839,int _3840){ int _8785 = (int)1; int _8786 = (int)((_3831)->size(0)); for (int _3841 = _8785;_3841<_8786;++_3841){ if ((((*_3831)((_3841 - (int)1))) >= ((*_3831)(_3841)))){ throw ::mosek::fusion::UnimplementedError(std::string ("Not supported: Non-contiguous index ranges in ModelConstraint.add_l"));}else {}}if (((((*_3832)((_3839 + _3840))) <= ((*_3832)(_3839))) && ! _3837)){ return ; }else {}std::shared_ptr< monty::ndarray< long long,1 > > _3842 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((((*_3832)((_3839 + _3840))) - ((*_3832)(_3839)))))); long long _8787 = (long long)0; long long _8788 = (((*_3832)((_3839 + _3840))) - ((*_3832)(_3839))); for (long long _3843 = _8787;_3843<_8788;++_3843){ (((*_3842)(_3843)) = (((*_3832)(_3839)) + _3843)); }int _8789 = (int)0; int _8790 = _3840; for (int _3844 = _8789;_3844<_8790;++_3844){ ::mosek::fusion::p_CommonTools::argQsort(_3842,_3833,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),((*_3832)((_3839 + _3844))),((*_3832)(((_3839 + _3844) + (int)1)))); }int _3845 = (int)0; int _3846 = (int)0; long long _8791 = ((*_3832)(_3839)); long long _8792 = ((*_3832)((_3839 + _3840))); for (long long _3847 = _8791;_3847<_8792;++_3847){ if ((((*_3833)(_3847)) >= (int)0)){ ( ++ _3845 ); }else { ( ++ _3846 ); }}if (((_3845 > (int)0) || _3837)){ std::shared_ptr< monty::ndarray< long long,1 > > _3848 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows + (int)1)))); std::shared_ptr< monty::ndarray< int,1 > > _3849 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3845))); std::shared_ptr< monty::ndarray< double,1 > > _3850 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3845))); std::shared_ptr< monty::ndarray< double,1 > > _3851 = nullptr; if (_3837){ (_3851 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows)))); int _8793 = (int)0; int _8794 = _3840; for (int _3852 = _8793;_3852<_8794;++_3852){ (((*_3851)((((*_3831)((_3852 + _3839))) - _3838))) = ((*_3837)((_3839 + _3852)))); }}else {}(((*_3848)((int)0)) = (long long)0); int _3853 = _3839; int _8795 = (int)0; int _8796 = mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows; for (int _3854 = _8795;_3854<_8796;++_3854){ if (((_3853 < _3840) && ((((*_3831)(_3853)) - _3838) == _3854))){ long long _3855 = ((*_3848)(_3854)); long long _8797 = ((*_3832)(_3853)); long long _8798 = ((*_3832)((_3853 + (int)1))); for (long long _3856 = _8797;_3856<_8798;++_3856){ if ((((*_3833)(_3856)) >= (int)0)){ (((*_3849)(_3855)) = ((*_3833)(_3856))); (((*_3850)(_3855)) = ((*_3836)(_3856))); ( ++ _3855 ); }else {}}(((*_3848)((_3854 + (int)1))) = _3855); ( ++ _3853 ); }else { (((*_3848)((_3854 + (int)1))) = ((*_3848)(_3854))); }}cache->add(_3848,_3849,_3850,_3851); { int _3857 = mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows; int _3858 = (int)cache->numUnsorted(); std::shared_ptr< monty::ndarray< int,1 > > _3859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3858))); std::shared_ptr< monty::ndarray< int,1 > > _3860 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3858))); std::shared_ptr< monty::ndarray< double,1 > > _3861 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3858))); long long _3862 = cache->flush(_3859,_3860,_3861,std::shared_ptr< monty::ndarray< double,1 > >(nullptr)); long long _8799 = (long long)0; long long _8800 = _3862; for (long long _3863 = _8799;_3863<_8800;++_3863){ (((*_3859)(_3863)) = ((*nativeindexes)(((*_3859)(_3863))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_putaijlist(_3859,_3860,_3861,_3862); if (_3837){ add_fx(_3831,mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix,_3838,_3839,_3840); }else {}}}else {}if ((_3846 > (int)0)){ int _3864 = (int)0; { long long _3865 = ((*_3832)(_3839)); int _8801 = (int)0; int _8802 = _3840; for (int _3866 = _8801;_3866<_8802;++_3866){ if ((((*_3833)(((*_3842)((((*_3832)(_3839)) - _3865))))) < (int)0)){ int _3867 = (int)1; long long _8803 = ((((*_3832)((_3839 + _3866))) - _3865) + (int)1); long long _8804 = (((*_3832)(((_3839 + _3866) + (int)1))) - _3865); for (long long _3868 = _8803;_3868<_8804;++_3868){ if (((((*_3833)(((*_3842)(_3868)))) < (int)0) && (((*_3833)(((*_3842)(_3868)))) != ((*_3833)(((*_3842)((_3868 - (int)1)))))))){ ( ++ _3867 ); }else {}}(_3864 += _3867); }else {}}}std::shared_ptr< monty::ndarray< int,1 > > _3869 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3864))); std::shared_ptr< monty::ndarray< int,1 > > _3870 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3864))); std::shared_ptr< monty::ndarray< int,1 > > _3871 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3864))); std::shared_ptr< monty::ndarray< int,1 > > _3872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3864))); { long long _3873 = ((*_3832)(_3839)); int _3874 = (int)0; int _8805 = (int)0; int _8806 = _3840; for (int _3875 = _8805;_3875<_8806;++_3875){ long long _3876 = (((*_3832)((_3839 + _3875))) - _3873); long long _3877 = (((*_3832)(((_3839 + _3875) + (int)1))) - _3873); if ((((*_3833)(((*_3842)(_3876)))) < (int)0)){ while (((_3876 < _3877) && (((*_3833)(((*_3842)(_3876)))) < (int)0))) { (((*_3870)(_3874)) = (int)((*_3831)((_3839 + _3875)))); (((*_3869)(_3874)) = ((*nativeindexes)((int)((*_3831)((_3839 + _3875)))))); (((*_3871)(_3874)) = ((- ((*_3833)(((*_3842)(_3876))))) - (int)1)); long long _3878 = _3876; while (((_3876 < _3877) && ((((*_3833)(((*_3842)(_3876)))) < (int)0) && (((*_3833)(((*_3842)(_3876)))) == ((*_3833)(((*_3842)(_3878)))))))) { ( ++ _3876 ); }std::shared_ptr< monty::ndarray< int,1 > > _3879; std::shared_ptr< monty::ndarray< int,1 > > _3880; std::shared_ptr< monty::ndarray< double,1 > > _3881; int _3882 = (int)1; if (((_3876 - _3878) > (int)1)){ ::mosek::fusion::p_CommonTools::argQsort(_3842,_3834,_3835,(long long)_3878,(long long)(_3876 - _3878)); int _3883 = (int)1; long long _8807 = (long long)1; long long _8808 = (_3876 - _3878); for (long long _3884 = _8807;_3884<_8808;++_3884){ if (((((*_3834)(((*_3842)(((_3876 + _3884) - (int)1))))) != ((*_3834)(((*_3842)((_3876 + _3884)))))) || (((*_3835)(((*_3842)(((_3876 + _3884) - (int)1))))) != ((*_3835)(((*_3842)((_3876 + _3884)))))))){ ( ++ _3883 ); }else {}}(_3879 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3883)))); (_3880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3883)))); (_3881 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3883)))); (((*_3879)((int)0)) = ((*_3834)(((*_3842)((int)0))))); (((*_3880)((int)0)) = ((*_3835)(((*_3842)((int)0))))); (((*_3881)((int)0)) = ((*_3836)(((*_3842)((int)0))))); int _3885 = (int)0; long long _8809 = (long long)1; long long _8810 = (_3876 - _3878); for (long long _3886 = _8809;_3886<_8810;++_3886){ if (((((*_3879)(((*_3842)(((_3876 + _3886) - (int)1))))) != ((*_3879)(((*_3842)((_3876 + _3886)))))) || (((*_3880)(((*_3842)(((_3876 + _3886) - (int)1))))) != ((*_3880)(((*_3842)((_3876 + _3886)))))))){ ( ++ _3885 ); (((*_3879)(_3885)) = ((*_3834)(((*_3842)((_3876 + _3886)))))); (((*_3880)(_3885)) = ((*_3835)(((*_3842)((_3876 + _3886)))))); }else {}(((*_3881)(_3885)) = (((*_3881)(_3885)) + ((*_3836)(((*_3842)((_3876 + _3886))))))); }}else { (_3879 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_3834)(((*_3842)(_3878))))})); (_3880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_3835)(((*_3842)(_3878))))})); (_3881 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{((*_3836)(((*_3842)(_3878))))})); }int _3887 = mosek::fusion::p_Model::_get_impl(model.get())->task_append_barmatrix(mosek::fusion::p_Model::_get_impl(model.get())->task_barvardim(((*_3871)(_3874))),_3879,_3880,_3881); (((*_3872)(_3874)) = _3887); ( ++ _3874 ); }}else {}}}mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->add_bar(_3870,_3871,_3872); }else {}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::ModelConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3893,    std::shared_ptr< monty::ndarray< int,1 > > _3894) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->slice(_3893,_3894); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_ModelConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3893,std::shared_ptr< monty::ndarray< int,1 > > _3894){ if (((int)((_3893)->size(0)) != (int)((_3894)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _3895 = shape_p->slice(_3893,_3894); std::shared_ptr< monty::ndarray< long long,1 > > _3896 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3896)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3897 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3897 > (int)0);(_3897 = (_3897 - (int)1))){ (((*_3896)((_3897 - (int)1))) = (((*_3896)(_3897)) * shape_p->dim(_3897))); }}long long _3898 = (long long)0; int _8811 = (int)0; int _8812 = (int)((_3896)->size(0)); for (int _3899 = _8811;_3899<_8812;++_3899){ (_3898 = (_3898 + (((*_3896)(_3899)) * ((*_3893)(_3899))))); }return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis,_3895,_3898,_3896); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::ModelConstraint::slice  ( int _3900,    int _3901) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->slice(_3900,_3901); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_ModelConstraint::slice( int _3900,int _3901){ std::shared_ptr< monty::ndarray< long long,1 > > _3902 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis,shape_p->slice(_3900,_3901),(long long)_3900,_3902); }void mosek::fusion::p_ModelConstraint::destroy(){nativeindexes.reset();cache_bfix.reset();cache.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _3904,    monty::rc_ptr< ::mosek::fusion::Model > _3905){monty::rc_reserve __reserve_this(_pubthis); { { (model = _3905); (shape_p = mosek::fusion::p_Constraint::_get_impl(_3904)->shape_p); }}}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3906,    monty::rc_ptr< ::mosek::fusion::Set > _3907){monty::rc_reserve __reserve_this(_pubthis); { { (model = _3906); (shape_p = _3907); }}}std::string mosek::fusion::Constraint::toString  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString( ){ long long _3908 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3909 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3908))); toStringArray(::mosek::fusion::Utils::Tools::range(_3908),(long long)0,_3909); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3910 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->a(std::string ("Constraint( (")).get())->a(shape_p->dim((int)0)); int _8813 = (int)1; int _8814 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3911 = _8813;_3911<_8814;++_3911){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->a(std::string (",")).get())->a(shape_p->dim(_3911)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->a(std::string ("  ")).get())->a(((*_3909)((int)0))); int _8815 = (int)1; int _8816 = (int)((_3909)->size(0)); for (int _3912 = _8815;_3912<_8816;++_3912){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3909)(_3912))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3910.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( double _3916) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3916); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( double _3916){ long long _3917 = mosek::fusion::p_Set::_get_impl(shape_p)->size; add_l(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8817; for (long long _3918=(int)0, _8818=_3917; _3918 < _8818;++_3918)_8817.push_back(_3918); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8817.size()),_8817.begin(),_8817.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8819; for (long long _3919=(int)0, _8820=(_3917 + (int)1); _3919 < _8820;++_3919)_8819.push_back((int)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8819.size()),_8819.begin(),_8819.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8821; for (long long _3920=(int)0, _8822=_3917; _3920 < _8822;++_3920)_8821.push_back(_3916); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8821.size()),_8821.begin(),_8821.end())); })(),(long long)0,(int)0,(int)_3917); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( std::shared_ptr< monty::ndarray< double,1 > > _3921) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3921); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( std::shared_ptr< monty::ndarray< double,1 > > _3921){ long long _3922 = mosek::fusion::p_Set::_get_impl(shape_p)->size; if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((int)((_3921)->size(0)) != shape_p->dim((int)0)))){ throw ::mosek::fusion::DimensionError(std::string ("The added constant array does not have the same shape as the constraint"));}else {}add_l(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8823; for (long long _3923=(int)0, _8824=_3922; _3923 < _8824;++_3923)_8823.push_back(_3923); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8823.size()),_8823.begin(),_8823.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8825; for (long long _3924=(int)0, _8826=(_3922 + (int)1); _3924 < _8826;++_3924)_8825.push_back((int)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8825.size()),_8825.begin(),_8825.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),_3921,(long long)0,(int)0,(int)_3922); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _3925) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3925); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( monty::rc_ptr< ::mosek::fusion::Variable > _3925){ if ((! _3925->shape()->compare(shape_p))){ throw ::mosek::fusion::DimensionError(std::string ("The added variable does not have the same shape as the constraint"));}else {}long long _3926 = mosek::fusion::p_Set::_get_impl(_3925->getShape())->size; std::shared_ptr< monty::ndarray< int,1 > > _3927 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3926))); std::shared_ptr< monty::ndarray< int,1 > > _3928 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3926))); std::shared_ptr< monty::ndarray< int,1 > > _3929 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3926))); std::shared_ptr< monty::ndarray< long long,1 > > _3930 = ::mosek::fusion::Utils::Tools::range((long long)0,(_3926 + (int)1)); std::shared_ptr< monty::ndarray< double,1 > > _3931 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3926))); long long _8827 = (long long)0; long long _8828 = _3926; for (long long _3932 = _8827;_3932<_8828;++_3932){ _3925->inst(_3932,_3932,_3927,_3928,_3929); (((*_3931)(_3932)) = 1.0); }std::shared_ptr< monty::ndarray< long long,1 > > _3933 = ::mosek::fusion::Utils::Tools::range((long long)0,_3926); add_l(_3933,_3930,_3927,_3928,_3928,_3931,std::shared_ptr< monty::ndarray< double,1 > >(nullptr),(long long)0,(int)0,(int)_3926); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _3934) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3934); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( monty::rc_ptr< ::mosek::fusion::Expression > _3934){ if ((! _3934->shape()->compare(shape_p))){ throw ::mosek::fusion::DimensionError(std::string ("The added expression does not have the same shape as the constraint"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _3935 = _3934->eval(); int _3936 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(_3935)->ptrb)->size(0)) - (int)1); std::shared_ptr< monty::ndarray< int,1 > > _3937 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3935)->nnz))); std::shared_ptr< monty::ndarray< int,1 > > _3938 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3935)->nnz))); std::shared_ptr< monty::ndarray< int,1 > > _3939 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3935)->nnz))); ::mosek::fusion::p_Constraint::inst(mosek::fusion::p_FlatExpr::_get_impl(_3935)->x,mosek::fusion::p_FlatExpr::_get_impl(_3935)->subj,_3937,_3937,_3937); std::shared_ptr< monty::ndarray< long long,1 > > _3940 = mosek::fusion::p_FlatExpr::_get_impl(_3935)->inst; if (! _3940){ (_3940 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)_3936)); }else {}add_l(_3940,mosek::fusion::p_FlatExpr::_get_impl(_3935)->ptrb,_3937,_3938,_3939,mosek::fusion::p_FlatExpr::_get_impl(_3935)->cof,mosek::fusion::p_FlatExpr::_get_impl(_3935)->bfix,(long long)0,(int)0,_3936); return _pubthis; }void mosek::fusion::p_Constraint::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _3941,std::shared_ptr< monty::ndarray< long long,1 > > _3942,std::shared_ptr< monty::ndarray< int,1 > > _3943,std::shared_ptr< monty::ndarray< int,1 > > _3944,std::shared_ptr< monty::ndarray< int,1 > > _3945){ std::shared_ptr< monty::ndarray< long long,1 > > _3946 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_3941)->size(0)) + (int)1)))); int _8829 = (int)0; int _8830 = (int)((_3941)->size(0)); for (int _3947 = _8829;_3947<_8830;++_3947){ (((*_3946)((_3947 + (int)1))) = (((*_3946)(_3947)) + ((*_3941)(_3947))->size())); }int _8831 = (int)0; int _8832 = (int)((_3942)->size(0)); for (int _3948 = _8831;_3948<_8832;++_3948){ int _3949 = ((int)((_3946)->size(0)) / (int)2); { int _3950 = (int)0; int _3951 = ((int)((_3946)->size(0)) - (int)1); int _3952 = (int)0; while ((_3950 < _3951)) { (_3952 = ((_3950 + _3951) / (int)2)); if ((((*_3942)(_3948)) < ((*_3946)(_3952)))){ (_3951 = _3952); }else if ((((*_3942)(_3948)) >= ((*_3946)((_3952 + (int)1))))){ (_3950 = _3952); }else { (_3950 = _3952); (_3951 = _3952); }}(_3949 = _3952); }((*_3941)(_3949))->inst((((*_3942)(_3948)) - ((*_3946)(_3949))),(long long)_3948,_3943,_3944,_3945); }}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( std::shared_ptr< monty::ndarray< int,1 > > _3963,    std::shared_ptr< monty::ndarray< int,1 > > _3964) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(_3963,_3964); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( std::shared_ptr< monty::ndarray< int,1 > > _3963,std::shared_ptr< monty::ndarray< int,1 > > _3964){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3963)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3964)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3965 = (int)1; { int _3966 = (int)0; for (;(_3966 < mosek::fusion::p_Set::_get_impl(shape_p)->nd);( ++ _3966 )){ if (((((*_3963)(_3966)) > ((*_3964)(_3966))) || ((((*_3963)(_3966)) < (int)0) || (((*_3964)(_3966)) >= shape_p->dim(_3966))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index out of bound"));}else {}(_3965 = (_3965 * (((*_3964)(_3966)) * ((*_3963)(_3966))))); }}std::shared_ptr< monty::ndarray< double,1 > > _3967 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3965))); std::shared_ptr< monty::ndarray< int,1 > > _3968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3969 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); long long _3970 = (long long)0; int _8833 = (int)0; int _8834 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3971 = _8833;_3971<_8834;++_3971){ (((*_3968)(_3971)) = (((*_3964)(_3971)) - ((*_3963)(_3971)))); (((*_3969)(_3971)) = shape_p->stride(_3971)); (_3970 = (_3970 + (((*_3969)(_3971)) * ((*_3963)(_3971))))); }dual_values(_3970,_3968,_3969,(int)0,_3967); return _3967; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( int _3972,    int _3973) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(_3972,_3973); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( int _3972,int _3973){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3972 > _3973) || ((_3972 < (int)0) || (_3973 >= shape_p->dim((int)0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3974 = (_3973 - _3972); std::shared_ptr< monty::ndarray< double,1 > > _3975 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3974))); dual_values((long long)(_3972),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_3974}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}),(int)0,_3975); return _3975; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( ){ std::shared_ptr< monty::ndarray< double,1 > > _3976 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); dual_values((int)0,_3976); return _3976; }void mosek::fusion::p_Constraint::dual_values( int _3977,std::shared_ptr< monty::ndarray< double,1 > > _3978){ std::shared_ptr< monty::ndarray< int,1 > > _3979 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8835; for (int _3980=(int)0, _8836=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3980 < _8836;++_3980)_8835.push_back(shape_p->dim(_3980)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8835.size()),_8835.begin(),_8835.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3981 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8837; for (int _3982=(int)0, _8838=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3982 < _8838;++_3982)_8837.push_back(shape_p->stride(_3982)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8837.size()),_8837.begin(),_8837.end())); })(); dual_values((long long)0,_3979,_3981,_3977,_3978); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::level  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( ){ std::shared_ptr< monty::ndarray< double,1 > > _3991 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); level_values((int)0,_3991); return _3991; }double mosek::fusion::p_Constraint::level( int _3992){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3992 < (int)0) || (_3992 >= shape_p->dim((int)0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid index."));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _3993 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_3992}); std::shared_ptr< monty::ndarray< double,1 > > _3994 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); level_values(_3993,(int)0,_3994); return ((*_3994)((int)0)); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( std::shared_ptr< monty::ndarray< int,1 > > _3995,std::shared_ptr< monty::ndarray< int,1 > > _3996){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3995)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3996)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3997 = (int)1; { int _3998 = (int)0; for (;(_3998 < mosek::fusion::p_Set::_get_impl(shape_p)->nd);( ++ _3998 )){ if (((((*_3995)(_3998)) > ((*_3996)(_3998))) || ((((*_3995)(_3998)) < (int)0) || (((*_3996)(_3998)) > shape_p->dim(_3998))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index out of bound"));}else {}(_3997 = (_3997 * (((*_3996)(_3998)) - ((*_3995)(_3998))))); }}std::shared_ptr< monty::ndarray< double,1 > > _3999 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3997))); if ((_3997 > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _4000 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _4001 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8839 = (int)0; int _8840 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _4002 = _8839;_4002<_8840;++_4002){ (((*_4001)(_4002)) = shape_p->stride(_4002)); }int _8841 = (int)0; int _8842 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _4003 = _8841;_4003<_8842;++_4003){ (((*_4000)(_4003)) = (((*_3996)(_4003)) - ((*_3995)(_4003)))); }long long _4004 = (long long)0; int _8843 = (int)0; int _8844 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _4005 = _8843;_4005<_8844;++_4005){ (_4004 = (_4004 + ((long long)((*_3995)(_4005)) * ((*_4001)(_4005))))); }level_values(_4004,_4000,_4001,(int)0,_3999); }else {}return _3999; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( int _4006,int _4007){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_4006 < (int)0) || ((_4006 > _4007) || (_4007 > shape_p->dim((int)0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _4008 = (_4007 - _4006); std::shared_ptr< monty::ndarray< double,1 > > _4009 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4008))); std::shared_ptr< monty::ndarray< int,1 > > _4010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(_4007 - _4006)}); std::shared_ptr< monty::ndarray< long long,1 > > _4011 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); level_values((long long)_4006,_4010,_4011,(int)0,_4009); return _4009; }void mosek::fusion::p_Constraint::level_values( int _4012,std::shared_ptr< monty::ndarray< double,1 > > _4013){ std::shared_ptr< monty::ndarray< long long,1 > > _4014 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8845; for (int _4015=(int)0, _8846=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _4015 < _8846;++_4015)_8845.push_back(shape_p->stride(_4015)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8845.size()),_8845.begin(),_8845.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _4016 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8847; for (int _4017=(int)0, _8848=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _4017 < _8848;++_4017)_8847.push_back(shape_p->dim(_4017)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8847.size()),_8847.begin(),_8847.end())); })(); level_values((long long)0,_4016,_4014,_4012,_4013); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::get_model( ){ return model; }int mosek::fusion::Constraint::get_nd  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->nd_p; }long long mosek::fusion::Constraint::size  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4026) { return mosek::fusion::p_Constraint::stack(_4026); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4026){ return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_4026); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _4027,    monty::rc_ptr< ::mosek::fusion::Constraint > _4028,    monty::rc_ptr< ::mosek::fusion::Constraint > _4029) { return mosek::fusion::p_Constraint::stack(_4027,_4028,_4029); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( monty::rc_ptr< ::mosek::fusion::Constraint > _4027,monty::rc_ptr< ::mosek::fusion::Constraint > _4028,monty::rc_ptr< ::mosek::fusion::Constraint > _4029){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4030 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{_4027,_4028}); return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_4030); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _4031,    monty::rc_ptr< ::mosek::fusion::Constraint > _4032) { return mosek::fusion::p_Constraint::stack(_4031,_4032); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( monty::rc_ptr< ::mosek::fusion::Constraint > _4031,monty::rc_ptr< ::mosek::fusion::Constraint > _4032){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _4033 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{_4031,_4032}); return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_4033); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index  ( std::shared_ptr< monty::ndarray< int,1 > > _4034) { return mosek::fusion::p_Constraint::_get_impl(this)->index(_4034); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::index( std::shared_ptr< monty::ndarray< int,1 > > _4034){ return mosek::fusion::p_Constraint::_get_impl(_pubthis->slice(_4034,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8849; for (int _4035=(int)0, _8850=(int)((_4034)->size(0)); _4035 < _8850;++_4035)_8849.push_back((((*_4034)(_4035)) + (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8849.size()),_8849.begin(),_8849.end())); })()).get())->reduceDims(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index  ( int _4036) { return mosek::fusion::p_Constraint::_get_impl(this)->index(_4036); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::index( int _4036){ return _pubthis->slice(_4036,(_4036 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::reduceDims( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd > (int)1)){ int _4041 = shape_p->realnd(); std::shared_ptr< monty::ndarray< int,1 > > _4042 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4041))); { int _4043 = (int)0; { int _4044 = (int)0; for (;(_4044 < _4041);( ++ _4044 )){ if ((shape_p->dim(_4044) > (int)1)){ (((*_4042)(_4043)) = shape_p->dim(_4044)); ( ++ _4043 ); }else {}}}}(shape_p = ::mosek::fusion::p_NDSet::_new_NDSet(_4042)); }else {}return _pubthis; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Constraint::shape  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Constraint::shape( ){ return shape_p; }void mosek::fusion::p_Constraint::destroy(){shape_p.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::ProductSet::ProductSet(mosek::fusion::p_ProductSet *_impl) : mosek::fusion::NDSet(_impl) { /*std::cout << "ProductSet()" << this << std::endl; */ }mosek::fusion::ProductSet::~ProductSet() {  /* std::cout << "~ProductSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_ProductSet::p_ProductSet  (::mosek::fusion::ProductSet * _pubthis) :     mosek::fusion::p_NDSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ProductSet::t mosek::fusion::p_ProductSet::_new_ProductSet  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4045){ return new mosek::fusion::ProductSet(_4045); }mosek::fusion::ProductSet::ProductSet  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4045) :    ProductSet(new mosek::fusion::p_ProductSet(this)){ mosek::fusion::p_ProductSet::_get_impl(this)->_initialize(_4045); }void mosek::fusion::p_ProductSet::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4045){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_NDSet::_initialize(::mosek::fusion::p_ProductSet::computedims(_4045));(sets = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Set > > _8851; for (int _4046=(int)0, _8852=(int)((_4045)->size(0)); _4046 < _8852;++_4046)_8851.push_back(((*_4045)(_4046))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 >(monty::shape(_8851.size()),_8851.begin(),_8851.end())); })()); }}std::string mosek::fusion::ProductSet::indexToString  ( long long _4047) { return mosek::fusion::p_ProductSet::_get_impl(this)->indexToString(_4047); }std::string mosek::fusion::p_ProductSet::indexToString( long long _4047){ std::shared_ptr< monty::ndarray< int,1 > > _4048 = idxtokey(_4047); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4049 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); { std::shared_ptr< monty::ndarray< int,1 > > _4050 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8853; for (int _4051=(int)0, _8854=mosek::fusion::p_Set::_get_impl(((*sets)((int)0)))->nd; _4051 < _8854;++_4051)_8853.push_back(((*_4048)(_4051))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8853.size()),_8853.begin(),_8853.end())); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(((*sets)((int)0))->indexToString(mosek::fusion::p_Set::_get_impl(((*sets)((int)0)).get())->linearidx(_4050))); }int _4052 = mosek::fusion::p_Set::_get_impl(((*sets)((int)0)))->nd; int _8855 = (int)1; int _8856 = (int)((sets)->size(0)); for (int _4053 = _8855;_4053<_8856;++_4053){ int _4054 = _4052; (_4052 = (_4052 + mosek::fusion::p_Set::_get_impl(((*sets)(_4053)))->nd)); std::shared_ptr< monty::ndarray< int,1 > > _4055 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8857; for (int _4056=(int)0, _8858=(_4052 - _4054); _4056 < _8858;++_4056)_8857.push_back(((*_4048)((_4056 + _4054)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8857.size()),_8857.begin(),_8857.end())); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (",")).get())->a(((*sets)(_4053))->indexToString(mosek::fusion::p_Set::_get_impl(((*sets)(_4053)).get())->linearidx(_4055))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->toString(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ProductSet::computedims( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4057){ int _4058 = (int)0; int _8859 = (int)0; int _8860 = (int)((_4057)->size(0)); for (int _4059 = _8859;_4059<_8860;++_4059){ (_4058 = (_4058 + mosek::fusion::p_Set::_get_impl(((*_4057)(_4059)))->nd)); }std::shared_ptr< monty::ndarray< int,1 > > _4060 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8861; for (int _4061=(int)0, _8862=(int)((_4057)->size(0)); _4061 < _8862;++_4061) for (int _4062=(int)0, _8863=mosek::fusion::p_Set::_get_impl(((*_4057)(_4061)))->nd; _4062 < _8863;++_4062)_8861.push_back(((*_4057)(_4061))->dim(_4062)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8861.size()),_8861.begin(),_8861.end())); })(); return _4060; }void mosek::fusion::p_ProductSet::destroy(){sets.reset();}void mosek::fusion::ProductSet::destroy() { mosek::fusion::p_ProductSet::_get_impl(this)->destroy(); }mosek::fusion::IntSet::IntSet(mosek::fusion::p_IntSet *_impl) : mosek::fusion::BaseSet(_impl) { /*std::cout << "IntSet()" << this << std::endl; */ }mosek::fusion::IntSet::~IntSet() {  /* std::cout << "~IntSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_IntSet::p_IntSet  (::mosek::fusion::IntSet * _pubthis) :     mosek::fusion::p_BaseSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::IntSet::t mosek::fusion::p_IntSet::_new_IntSet  (int _4063){ return new mosek::fusion::IntSet(_4063); }mosek::fusion::IntSet::IntSet  (int _4063) :    IntSet(new mosek::fusion::p_IntSet(this)){ mosek::fusion::p_IntSet::_get_impl(this)->_initialize(_4063); }void mosek::fusion::p_IntSet::_initialize  (int _4063){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)_4063);(first = (int)0); (last = _4063); }}mosek::fusion::IntSet::t mosek::fusion::p_IntSet::_new_IntSet  (int _4064,    int _4065){ return new mosek::fusion::IntSet(_4064,_4065); }mosek::fusion::IntSet::IntSet  (int _4064,    int _4065) :    IntSet(new mosek::fusion::p_IntSet(this)){ mosek::fusion::p_IntSet::_get_impl(this)->_initialize(_4064,_4065); }void mosek::fusion::p_IntSet::_initialize  (int _4064,    int _4065){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)(_4065 - _4064));(first = _4064); (last = _4065); }}std::string mosek::fusion::IntSet::indexToString  ( long long _4066) { return mosek::fusion::p_IntSet::_get_impl(this)->indexToString(_4066); }std::string mosek::fusion::p_IntSet::indexToString( long long _4066){ return mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a((int)_4066).get())->toString(); }std::string mosek::fusion::IntSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _4067) { return mosek::fusion::p_IntSet::_get_impl(this)->getname(_4067); }std::string mosek::fusion::p_IntSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _4067){ if (((int)((_4067)->size(0)) != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid key specification"));}else {}return ::mosek::fusion::Utils::Tools::stringvalue(((*_4067)((int)0))); }std::string mosek::fusion::IntSet::getname  ( long long _4068) { return mosek::fusion::p_IntSet::_get_impl(this)->getname(_4068); }std::string mosek::fusion::p_IntSet::getname( long long _4068){ return ::mosek::fusion::Utils::Tools::stringvalue(_4068); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::IntSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _4069,    std::shared_ptr< monty::ndarray< int,1 > > _4070) { return mosek::fusion::p_IntSet::_get_impl(this)->slice(_4069,_4070); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_IntSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _4069,std::shared_ptr< monty::ndarray< int,1 > > _4070){ if ((((int)((_4069)->size(0)) != (int)1) || ((int)((_4070)->size(0)) != (int)1))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return _pubthis->slice(((*_4069)((int)0)),((*_4070)((int)0))); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::IntSet::slice  ( int _4071,    int _4072) { return mosek::fusion::p_IntSet::_get_impl(this)->slice(_4071,_4072); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_IntSet::slice( int _4071,int _4072){ if (((_4071 < (int)0) || ((_4071 > _4072) || (_4072 > (last - first))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return ::mosek::fusion::p_IntSet::_new_IntSet((first + _4071),(first + _4072)); }int mosek::fusion::IntSet::getidx  ( int _4073) { return mosek::fusion::p_IntSet::_get_impl(this)->getidx(_4073); }int mosek::fusion::p_IntSet::getidx( int _4073){ if (((_4073 < first) || (_4073 > last))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}return (_4073 - first); }long long mosek::fusion::IntSet::stride  ( int _4074) { return mosek::fusion::p_IntSet::_get_impl(this)->stride(_4074); }long long mosek::fusion::p_IntSet::stride( int _4074){ return (long long)1; }void mosek::fusion::p_IntSet::destroy(){}void mosek::fusion::IntSet::destroy() { mosek::fusion::p_IntSet::_get_impl(this)->destroy(); }mosek::fusion::StringSet::StringSet(mosek::fusion::p_StringSet *_impl) : mosek::fusion::BaseSet(_impl) { /*std::cout << "StringSet()" << this << std::endl; */ }mosek::fusion::StringSet::~StringSet() {  /* std::cout << "~StringSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_StringSet::p_StringSet  (::mosek::fusion::StringSet * _pubthis) :     mosek::fusion::p_BaseSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::StringSet::t mosek::fusion::p_StringSet::_new_StringSet  (std::shared_ptr< monty::ndarray< std::string,1 > > _4075){ return new mosek::fusion::StringSet(_4075); }mosek::fusion::StringSet::StringSet  (std::shared_ptr< monty::ndarray< std::string,1 > > _4075) :    StringSet(new mosek::fusion::p_StringSet(this)){ mosek::fusion::p_StringSet::_get_impl(this)->_initialize(_4075); }void mosek::fusion::p_StringSet::_initialize  (std::shared_ptr< monty::ndarray< std::string,1 > > _4075){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)(int)((_4075)->size(0)));(keys = ::mosek::fusion::Utils::Tools::arraycopy(_4075)); }}std::string mosek::fusion::StringSet::indexToString  ( long long _4076) { return mosek::fusion::p_StringSet::_get_impl(this)->indexToString(_4076); }std::string mosek::fusion::p_StringSet::indexToString( long long _4076){ return ((*keys)(_4076)); }std::string mosek::fusion::StringSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _4077) { return mosek::fusion::p_StringSet::_get_impl(this)->getname(_4077); }std::string mosek::fusion::p_StringSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _4077){ if (((int)((_4077)->size(0)) != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid key specification"));}else {}return ((*keys)(((*_4077)((int)0)))); }std::string mosek::fusion::StringSet::getname  ( long long _4078) { return mosek::fusion::p_StringSet::_get_impl(this)->getname(_4078); }std::string mosek::fusion::p_StringSet::getname( long long _4078){ return ((*keys)(_4078)); }monty::rc_ptr< ::mosek::fusion::BaseSet > mosek::fusion::p_StringSet::slice_( std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080){ if ((((int)((_4079)->size(0)) != (int)1) || (((int)((_4080)->size(0)) != (int)1) || ((((*_4079)((int)0)) < (int)0) || ((((*_4079)((int)0)) > ((*_4080)((int)0))) || (((*_4080)((int)0)) >= (int)((keys)->size(0)))))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return slice_(((*_4079)((int)0)),((*_4080)((int)0))); }monty::rc_ptr< ::mosek::fusion::BaseSet > mosek::fusion::p_StringSet::slice_( int _4081,int _4082){ if (((_4081 < (int)0) || ((_4081 > _4082) || (_4082 > (int)((keys)->size(0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return ::mosek::fusion::p_StringSet::_new_StringSet(([=]()->std::shared_ptr< monty::ndarray< std::string,1 > > { std::vector< std::string > _8864; for (int _4083=(int)0, _8865=(_4082 - _4081); _4083 < _8865;++_4083)_8864.push_back(((*keys)((_4083 + _4081)))); return std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_8864.size()),_8864.begin(),_8864.end())); })()); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::StringSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _4084,    std::shared_ptr< monty::ndarray< int,1 > > _4085) { return mosek::fusion::p_StringSet::_get_impl(this)->slice(_4084,_4085); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_StringSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _4084,std::shared_ptr< monty::ndarray< int,1 > > _4085){ return slice_(_4084,_4085); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::StringSet::slice  ( int _4086,    int _4087) { return mosek::fusion::p_StringSet::_get_impl(this)->slice(_4086,_4087); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_StringSet::slice( int _4086,int _4087){ return slice_(_4086,_4087); }std::string mosek::fusion::StringSet::toString  ( ) { return mosek::fusion::p_StringSet::_get_impl(this)->toString(); }std::string mosek::fusion::p_StringSet::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4088 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4088.get())->a(std::string ("{'")).get())->a(((*keys)((int)0))).get())->a(std::string ("'")); { int _4089 = (int)1; for (;(_4089 < (int)((keys)->size(0)));( ++ _4089 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4088.get())->a(std::string (",'")).get())->a(((*keys)(_4089))).get())->a(std::string ("'")); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_4088.get())->a(std::string ("}")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4088.get())->toString(); }long long mosek::fusion::StringSet::stride  ( int _4090) { return mosek::fusion::p_StringSet::_get_impl(this)->stride(_4090); }long long mosek::fusion::p_StringSet::stride( int _4090){ return (long long)1; }void mosek::fusion::p_StringSet::destroy(){keys.reset();}void mosek::fusion::StringSet::destroy() { mosek::fusion::p_StringSet::_get_impl(this)->destroy(); }mosek::fusion::BaseSet::BaseSet(mosek::fusion::p_BaseSet *_impl) : mosek::fusion::Set(_impl) { /*std::cout << "BaseSet()" << this << std::endl; */ }mosek::fusion::BaseSet::~BaseSet() {  /* std::cout << "~BaseSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_BaseSet::p_BaseSet  (::mosek::fusion::BaseSet * _pubthis) :     mosek::fusion::p_Set(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_BaseSet::_initialize  (long long _4091){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)1,_4091);}}int mosek::fusion::BaseSet::dim  ( int _4092) { return mosek::fusion::p_BaseSet::_get_impl(this)->dim(_4092); }int mosek::fusion::p_BaseSet::dim( int _4092){ if ((_4092 < (int)0)){ throw ::mosek::fusion::IndexError(std::string ("Invalid dimension"));}else if ((_4092 > (int)0)){ return (int)1; }else { return (int)size; }}void mosek::fusion::p_BaseSet::destroy(){}void mosek::fusion::BaseSet::destroy() { mosek::fusion::p_BaseSet::_get_impl(this)->destroy(); }mosek::fusion::NDSet::NDSet(mosek::fusion::p_NDSet *_impl) : mosek::fusion::Set(_impl) { /*std::cout << "NDSet()" << this << std::endl; */ }mosek::fusion::NDSet::~NDSet() {  /* std::cout << "~NDSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_NDSet::p_NDSet  (::mosek::fusion::NDSet * _pubthis) :     mosek::fusion::p_Set(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (int _4093,    int _4094,    int _4095){ return new mosek::fusion::NDSet(_4093,_4094,_4095); }mosek::fusion::NDSet::NDSet  (int _4093,    int _4094,    int _4095) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_4093,_4094,_4095); }void mosek::fusion::p_NDSet::_initialize  (int _4093,    int _4094,    int _4095){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)3,(long long)((_4093 * _4094) * _4095));(dimdef = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4093,_4094,_4095})); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)(_4094 * _4095),(long long)_4095,(long long)1})); }}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (int _4096,    int _4097){ return new mosek::fusion::NDSet(_4096,_4097); }mosek::fusion::NDSet::NDSet  (int _4096,    int _4097) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_4096,_4097); }void mosek::fusion::p_NDSet::_initialize  (int _4096,    int _4097){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)2,(long long)(_4096 * _4097));(dimdef = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4096,_4097})); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_4097,(long long)1})); }}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (std::shared_ptr< monty::ndarray< int,1 > > _4098){ return new mosek::fusion::NDSet(_4098); }mosek::fusion::NDSet::NDSet  (std::shared_ptr< monty::ndarray< int,1 > > _4098) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_4098); }void mosek::fusion::p_NDSet::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4098){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)((_4098)->size(0)),::mosek::fusion::p_NDSet::sumdims(_4098));int _8866 = (int)0; int _8867 = nd; for (int _4099 = _8866;_4099<_8867;++_4099){ if ((((*_4098)(_4099)) < (int)0)){ throw ::mosek::fusion::SliceError(std::string ("Negative dimension size"));}else {}}(dimdef = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8868; for (int _4100=(int)0, _8869=(int)((_4098)->size(0)); _4100 < _8869;++_4100)_8868.push_back(((*_4098)(_4100))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8868.size()),_8868.begin(),_8868.end())); })()); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(nd)))); (((*strides)((nd - (int)1))) = (long long)1); { int _4101 = (nd - (int)1); for (;(_4101 > (int)0);( -- _4101 )){ (((*strides)((_4101 - (int)1))) = (((*strides)(_4101)) * ((*dimdef)(_4101)))); }}}}std::string mosek::fusion::NDSet::indexToString  ( long long _4102) { return mosek::fusion::p_NDSet::_get_impl(this)->indexToString(_4102); }std::string mosek::fusion::p_NDSet::indexToString( long long _4102){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4103 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::shared_ptr< monty::ndarray< int,1 > > _4104 = idxtokey(_4102); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4103.get())->a(((*_4104)((int)0))); int _8870 = (int)1; int _8871 = (int)((_4104)->size(0)); for (int _4105 = _8870;_4105<_8871;++_4105){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4103.get())->a(std::string (",")).get())->a(((*_4104)(_4105))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4103.get())->toString(); }std::string mosek::fusion::NDSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _4106) { return mosek::fusion::p_NDSet::_get_impl(this)->getname(_4106); }std::string mosek::fusion::p_NDSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _4106){ if ((nd != (int)((_4106)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Key dimensions do not match set dimensions."));}else {}{ int _4107 = (int)0; for (;(_4107 < nd);( ++ _4107 )){ if (((((*_4106)(_4107)) < (int)0) || (((*_4106)(_4107)) >= (((*dimdef)(_4107)) + (int)1)))){ throw ::mosek::fusion::IndexError(std::string ("Key dimensions do not match set dimensions."));}else {}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4108 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4108.get())->a(((*_4106)((int)0))); int _8872 = (int)1; int _8873 = nd; for (int _4109 = _8872;_4109<_8873;++_4109){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4108.get())->a(std::string (",")).get())->a(((*_4106)(_4109))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4108.get())->toString(); }std::string mosek::fusion::NDSet::getname  ( long long _4110) { return mosek::fusion::p_NDSet::_get_impl(this)->getname(_4110); }std::string mosek::fusion::p_NDSet::getname( long long _4110){ if ((nd == (int)1)){ std::shared_ptr< monty::ndarray< long long,1 > > _4111 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(nd))); long long _4112 = _4110; int _8874 = (int)0; int _8875 = nd; for (int _4113 = _8874;_4113<_8875;++_4113){ (((*_4111)(_4113)) = (_4112 / ((*strides)(_4113)))); (_4112 = (_4112 - (((*_4111)(_4113)) * ((*strides)(_4113))))); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4114 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_4114.get())->a(_4110); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4114.get())->toString(); }else { return _pubthis->getname(idxtokey(_4110)); }}int mosek::fusion::NDSet::dim  ( int _4115) { return mosek::fusion::p_NDSet::_get_impl(this)->dim(_4115); }int mosek::fusion::p_NDSet::dim( int _4115){ return ([&]() -> int { if ( (_4115 >= nd)) return ((int)1); else return (((*dimdef)(_4115))); })(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NDSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _4116,    std::shared_ptr< monty::ndarray< int,1 > > _4117) { return mosek::fusion::p_NDSet::_get_impl(this)->slice(_4116,_4117); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_NDSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _4116,std::shared_ptr< monty::ndarray< int,1 > > _4117){ if (((nd != (int)((_4116)->size(0))) || (nd != (int)((_4117)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else {}{ int _4118 = (int)0; for (;(_4118 < nd);( ++ _4118 )){ if (((((*_4116)(_4118)) < (int)0) || ((((*_4117)(_4118)) < ((*_4116)(_4118))) || (((*_4117)(_4118)) > ((*dimdef)(_4118)))))){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds."));}else {}}}std::shared_ptr< monty::ndarray< int,1 > > _4119 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8876; for (int _4120=(int)0, _8877=nd; _4120 < _8877;++_4120)_8876.push_back((((*_4117)(_4120)) - ((*_4116)(_4120)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8876.size()),_8876.begin(),_8876.end())); })(); return ::mosek::fusion::p_NDSet::_new_NDSet(_4119); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NDSet::slice  ( int _4121,    int _4122) { return mosek::fusion::p_NDSet::_get_impl(this)->slice(_4121,_4122); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_NDSet::slice( int _4121,int _4122){ if ((nd != (int)1)){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else if (((_4121 < (int)0) || ((_4122 < _4121) || (_4122 > size)))){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else {}return ::mosek::fusion::p_IntSet::_new_IntSet(_4121,_4122); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_NDSet::selectidxs( std::shared_ptr< monty::ndarray< std::string,1 > > _4123){ throw ::mosek::fusion::IndexError(std::string ("invalid key type"));}int mosek::fusion::p_NDSet::linear_index_in_dim( int _4124,std::shared_ptr< monty::ndarray< int,1 > > _4125){ throw ::mosek::fusion::IndexError(std::string ("invalid key type"));}int mosek::fusion::p_NDSet::linear_index_in_dim( int _4126,int _4127){ if (((_4126 < (int)0) || (_4126 >= (int)((dimdef)->size(0))))){ throw ::mosek::fusion::IndexError(std::string ("dimension index out of bounds"));}else {}if (((_4127 < (int)0) || (_4127 >= ((*dimdef)(_4126))))){ throw ::mosek::fusion::IndexError(std::string ("key out of bounds"));}else { return _4127; }}long long mosek::fusion::p_NDSet::sumdims( std::shared_ptr< monty::ndarray< int,1 > > _4128){ long long _4129 = (long long)1; int _8878 = (int)0; int _8879 = (int)((_4128)->size(0)); for (int _4130 = _8878;_4130<_8879;++_4130){ (_4129 *= ((*_4128)(_4130))); }return _4129; }long long mosek::fusion::NDSet::stride  ( int _4131) { return mosek::fusion::p_NDSet::_get_impl(this)->stride(_4131); }long long mosek::fusion::p_NDSet::stride( int _4131){ return ((*strides)(_4131)); }void mosek::fusion::p_NDSet::destroy(){strides.reset();dimdef.reset();}void mosek::fusion::NDSet::destroy() { mosek::fusion::p_NDSet::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Set::_initialize  (int _4132,    long long _4133){monty::rc_reserve __reserve_this(_pubthis); { { (nd = _4132); (nd_p = _4132); (size = _4133); }}}std::string mosek::fusion::Set::toString  ( ) { return mosek::fusion::p_Set::_get_impl(this)->toString(); }std::string mosek::fusion::p_Set::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4134 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4134.get())->a(std::string ("Set(shape=(")).get())->a(_pubthis->dim((int)0)); int _8880 = (int)1; int _8881 = nd; for (int _4135 = _8880;_4135<_8881;++_4135){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4134.get())->a(std::string (",")).get())->a(_pubthis->dim(_4135)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4134.get())->a(std::string ("))")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4134.get())->toString(); }long long mosek::fusion::p_Set::linearidx( int _4141,int _4142,int _4143){ return (long long)((((_4141 * _pubthis->dim((int)1)) + _4142) * _pubthis->dim((int)2)) + _4143); }long long mosek::fusion::p_Set::linearidx( int _4144,int _4145){ return ((_4144 * _pubthis->dim((int)1)) + _4145); }long long mosek::fusion::p_Set::linearidx( std::shared_ptr< monty::ndarray< int,1 > > _4146){ long long _4147 = ((*_4146)((int)0)); int _8882 = (int)1; int _8883 = (int)((_4146)->size(0)); for (int _4148 = _8882;_4148<_8883;++_4148){ (_4147 = ((_4147 * _pubthis->dim(_4148)) + ((*_4146)(_4148)))); }return _4147; }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( long long _4149) { return mosek::fusion::p_Set::_get_impl(this)->idxtokey(_4149); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey( long long _4149){ std::shared_ptr< monty::ndarray< int,1 > > _4150 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nd_p))); long long _4151 = _4149; int _8884 = (int)0; int _8885 = nd_p; for (int _4152 = _8884;_4152<_8885;++_4152){ (((*_4150)(_4152)) = (int)(_4151 / _pubthis->stride(_4152))); (_4151 = (_4151 % _pubthis->stride(_4152))); }return _4150; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4157) { return mosek::fusion::p_Set::make(_4157); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4157){ return ::mosek::fusion::p_ProductSet::_new_ProductSet(_4157); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( monty::rc_ptr< ::mosek::fusion::Set > _4158,    monty::rc_ptr< ::mosek::fusion::Set > _4159) { return mosek::fusion::p_Set::make(_4158,_4159); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( monty::rc_ptr< ::mosek::fusion::Set > _4158,monty::rc_ptr< ::mosek::fusion::Set > _4159){ return ::mosek::fusion::p_ProductSet::_new_ProductSet(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 >{_4158,_4159})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _4160) { return mosek::fusion::p_Set::make(_4160); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< int,1 > > _4160){ return ::mosek::fusion::p_NDSet::_new_NDSet(_4160); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4161,    int _4162,    int _4163) { return mosek::fusion::p_Set::make(_4161,_4162,_4163); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4161,int _4162,int _4163){ return ::mosek::fusion::p_NDSet::_new_NDSet(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4161,_4162,_4163})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4164,    int _4165) { return mosek::fusion::p_Set::make(_4164,_4165); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4164,int _4165){ return ::mosek::fusion::p_NDSet::_new_NDSet(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4164,_4165})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4166) { return mosek::fusion::p_Set::make(_4166); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4166){ return ::mosek::fusion::p_IntSet::_new_IntSet(_4166); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::scalar( ){ return ::mosek::fusion::p_Set::make((int)1); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _4167) { return mosek::fusion::p_Set::make(_4167); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< std::string,1 > > _4167){ return ::mosek::fusion::p_StringSet::_new_StringSet(_4167); }int mosek::fusion::Set::realnd  ( ) { return mosek::fusion::p_Set::_get_impl(this)->realnd(); }int mosek::fusion::p_Set::realnd( ){ if ((nd == (int)1)){ return (int)1; }else { int _4168 = (int)0; { int _4169 = (int)0; for (;(_4169 < nd);( ++ _4169 )){ if ((_pubthis->dim(_4169) != (int)1)){ ( ++ _4168 ); }else {}}}if ((_4168 == (int)0)){ ( ++ _4168 ); }else {}return _4168; }}long long mosek::fusion::Set::getSize  ( ) { return mosek::fusion::p_Set::_get_impl(this)->getSize(); }long long mosek::fusion::p_Set::getSize( ){ return size; }bool mosek::fusion::Set::compare  ( monty::rc_ptr< ::mosek::fusion::Set > _4170) { return mosek::fusion::p_Set::_get_impl(this)->compare(_4170); }bool mosek::fusion::p_Set::compare( monty::rc_ptr< ::mosek::fusion::Set > _4170){ if (((size != mosek::fusion::p_Set::_get_impl(_4170)->size) || (_pubthis->realnd() != _4170->realnd()))){ return false; }else {}int _4171 = (int)0; int _4172 = (int)0; while (((_4171 < nd) && (_4172 < mosek::fusion::p_Set::_get_impl(_4170)->nd))) { if ((_pubthis->dim(_4171) == (int)1)){ ( ++ _4171 ); }else if ((_4170->dim(_4172) == (int)1)){ ( ++ _4172 ); }else if ((_pubthis->dim(_4171) != _4170->dim(_4172))){ return false; }else { ( ++ _4171 ); ( ++ _4172 ); }}return true; }void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::QConeDomain::QConeDomain(mosek::fusion::p_QConeDomain *_impl) : _impl(_impl) { /*std::cout << "QConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::QConeDomain::~QConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_QConeDomain::p_QConeDomain  (::mosek::fusion::QConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::QConeDomain::t mosek::fusion::p_QConeDomain::_new_QConeDomain  (mosek::fusion::QConeKey _4173,    std::shared_ptr< monty::ndarray< int,1 > > _4174,    int _4175){ return new mosek::fusion::QConeDomain(_4173,_4174,_4175); }mosek::fusion::QConeDomain::QConeDomain  (mosek::fusion::QConeKey _4173,    std::shared_ptr< monty::ndarray< int,1 > > _4174,    int _4175) :    QConeDomain(new mosek::fusion::p_QConeDomain(this)){ mosek::fusion::p_QConeDomain::_get_impl(this)->_initialize(_4173,_4174,_4175); }void mosek::fusion::p_QConeDomain::_initialize  (mosek::fusion::QConeKey _4173,    std::shared_ptr< monty::ndarray< int,1 > > _4174,    int _4175){monty::rc_reserve __reserve_this(_pubthis); { { (shape = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _4174) return (::mosek::fusion::p_Set::make(_4174)); else return (nullptr); })()); (key = _4173); (axisidx = _4175); (int_flag = false); }}}std::string mosek::fusion::p_QConeDomain::domainToString( long long _4176,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4177){ if ((key == ::mosek::fusion::QConeKey::InQCone)){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4178 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4176); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (" : element (")).get())->a(((*_4178)((int)0))); int _8886 = (int)1; int _8887 = (int)((_4178)->size(0)); for (int _4179 = _8886;_4179<_8887;++_4179){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (",")).get())->a(((*_4178)(_4179))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (") in a quadratic cone of size (")).get())->a(shape->dim((int)0)); int _8888 = (int)1; int _8889 = (int)((_4178)->size(0)); for (int _4180 = _8888;_4180<_8889;++_4180){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (",")).get())->a(shape->dim(_4180)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (" : element in a quadratic cone")); }}else if ((key == ::mosek::fusion::QConeKey::InRotatedQCone)){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4181 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4176); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (" : element (")).get())->a(((*_4181)((int)0))); int _8890 = (int)1; int _8891 = (int)((_4181)->size(0)); for (int _4182 = _8890;_4182<_8891;++_4182){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (",")).get())->a(((*_4181)(_4182))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (") in a rotated quadratic cone of size (")).get())->a(shape->dim((int)0)); int _8892 = (int)1; int _8893 = (int)((_4181)->size(0)); for (int _4183 = _8892;_4183<_8893;++_4183){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (",")).get())->a(shape->dim(_4183)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->a(std::string (" : element in a rotated quadratic cone")); }}else {}return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4177.get())->toString(); }bool mosek::fusion::p_QConeDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4184){ return (! shape || shape->compare(_4184)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::QConeDomain::integral  ( ) { return mosek::fusion::p_QConeDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_QConeDomain::integral( ){ (int_flag = true); return _pubthis; }int mosek::fusion::QConeDomain::getAxis  ( ) { return mosek::fusion::p_QConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_QConeDomain::getAxis( ){ return axisidx; }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::QConeDomain::axis  ( int _4185) { return mosek::fusion::p_QConeDomain::_get_impl(this)->axis(_4185); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_QConeDomain::axis( int _4185){ (axisidx = _4185); return _pubthis; }void mosek::fusion::p_QConeDomain::destroy(){shape.reset();}void mosek::fusion::QConeDomain::destroy() { mosek::fusion::p_QConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { { (shape = nullptr); }}}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (monty::rc_ptr< ::mosek::fusion::Set > _4186){ return new mosek::fusion::LinPSDDomain(_4186); }mosek::fusion::LinPSDDomain::LinPSDDomain  (monty::rc_ptr< ::mosek::fusion::Set > _4186) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_4186); }void mosek::fusion::p_LinPSDDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Set > _4186){monty::rc_reserve __reserve_this(_pubthis); { { (shape = _4186); }}}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _4187){ return new mosek::fusion::PSDDomain(_4187); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _4187) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_4187); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _4187){monty::rc_reserve __reserve_this(_pubthis); { { (shape = nullptr); (key = _4187); }}}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _4188,    monty::rc_ptr< ::mosek::fusion::Set > _4189){ return new mosek::fusion::PSDDomain(_4188,_4189); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _4188,    monty::rc_ptr< ::mosek::fusion::Set > _4189) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_4188,_4189); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _4188,    monty::rc_ptr< ::mosek::fusion::Set > _4189){monty::rc_reserve __reserve_this(_pubthis); { { (shape = _4189); (key = _4188); }}}std::string mosek::fusion::p_PSDDomain::domainToString( long long _4190,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4191){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4192 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4190); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->a(std::string (" : element (")).get())->a(((*_4192)((int)0))); int _8894 = (int)1; int _8895 = (int)((_4192)->size(0)); for (int _4193 = _8894;_4193<_8895;++_4193){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->a(std::string (",")).get())->a(((*_4192)(_4193))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->a(std::string (") in a semidefinite cone of size (")).get())->a(shape->dim((int)0)); int _8896 = (int)1; int _8897 = (int)((_4192)->size(0)); for (int _4194 = _8896;_4194<_8897;++_4194){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->a(std::string (",")).get())->a(shape->dim(_4194)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->a(std::string (" : element in a semidefinite cone")); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4191.get())->toString(); }void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4195){ return new mosek::fusion::SymmetricRangeDomain(_4195); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4195) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_4195); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4195){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_RangeDomain::_initialize(_4195);if ((shape && ((mosek::fusion::p_Set::_get_impl(shape)->nd != (int)2) || (shape->dim((int)0) != mosek::fusion::p_RangeDomain::_get_impl(_4195)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));}else {}(dim = ([&]() -> int { if ( ! shape) return ((int)0); else return (shape->dim((int)0)); })()); }}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (std::shared_ptr< monty::ndarray< double,1 > > _4196,    std::shared_ptr< monty::ndarray< double,1 > > _4197,    std::shared_ptr< monty::ndarray< int,1 > > _4198,    std::shared_ptr< monty::ndarray< long long,1 > > _4199){ return new mosek::fusion::RangeDomain(_4196,_4197,_4198,_4199); }mosek::fusion::RangeDomain::RangeDomain  (std::shared_ptr< monty::ndarray< double,1 > > _4196,    std::shared_ptr< monty::ndarray< double,1 > > _4197,    std::shared_ptr< monty::ndarray< int,1 > > _4198,    std::shared_ptr< monty::ndarray< long long,1 > > _4199) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_4196,_4197,_4198,_4199); }void mosek::fusion::p_RangeDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _4196,    std::shared_ptr< monty::ndarray< double,1 > > _4197,    std::shared_ptr< monty::ndarray< int,1 > > _4198,    std::shared_ptr< monty::ndarray< long long,1 > > _4199){monty::rc_reserve __reserve_this(_pubthis); { { (cardinal_flag = false); (sparse_flag = false); if (! _4198){ (shape = nullptr); }else { (shape = ::mosek::fusion::p_Set::make(_4198)); }if (_4199){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); int _8898 = (int)0; int _8899 = (int)((_4196)->size(0)); for (int _4200 = _8898;_4200<_8899;++_4200){ mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_4199)(_4200)),_4200); }}else { (idxmap = nullptr); }(ub = _4197); (lb = _4196); }}}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4201){ return new mosek::fusion::RangeDomain(_4201); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4201) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_4201); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4201){monty::rc_reserve __reserve_this(_pubthis); { { (cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_4201)->cardinal_flag); (sparse_flag = mosek::fusion::p_RangeDomain::_get_impl(_4201)->sparse_flag); (shape = mosek::fusion::p_RangeDomain::_get_impl(_4201)->shape); (idxmap = mosek::fusion::p_RangeDomain::_get_impl(_4201)->idxmap); (ub = mosek::fusion::p_RangeDomain::_get_impl(_4201)->ub); (lb = mosek::fusion::p_RangeDomain::_get_impl(_4201)->lb); }}}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::symmetric( ){ return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(_pubthis); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_RangeDomain::domainToString( long long _4202,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4203){ return mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4203.get())->a(std::string (" in [ ")).get())->a(get_lb_item(_4202)).get())->a(std::string (",")).get())->a(get_ub_item(_4202)).get())->a(std::string ("]")).get())->toString(); }bool mosek::fusion::p_RangeDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4204){ if (! shape){ return true; }else { return shape->compare(_4204); }}double mosek::fusion::p_RangeDomain::get_ub_item( long long _4205){ if (idxmap){ if (! ub){ return 0.0; }else { if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_4205)){ return ((*ub)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_4205))); }else { return 0.0; }}}else { if (((int)((ub)->size(0)) == (int)1)){ return ((*ub)((int)0)); }else if (ub){ return ((*ub)(_4205)); }else { return 0.0; }}}double mosek::fusion::p_RangeDomain::get_lb_item( long long _4206){ if (idxmap){ if (! lb){ return 0.0; }else if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_4206)){ return ((*lb)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_4206))); }else { return 0.0; }}else { if (((int)((lb)->size(0)) == (int)1)){ return ((*lb)((int)0)); }else if (lb){ return ((*lb)(_4206)); }else { return 0.0; }}}void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();idxmap.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4207){ return new mosek::fusion::SymmetricLinearDomain(_4207); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4207) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_4207); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4207){monty::rc_reserve __reserve_this(_pubthis); { { (dom = _4207); (shape = mosek::fusion::p_LinearDomain::_get_impl(_4207)->shape); (key = mosek::fusion::p_LinearDomain::_get_impl(_4207)->key); (cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_4207)->cardinal_flag); (sparse_flag = mosek::fusion::p_LinearDomain::_get_impl(_4207)->sparse_flag); if ((shape && ((mosek::fusion::p_Set::_get_impl(shape)->nd != (int)2) || (shape->dim((int)0) != mosek::fusion::p_LinearDomain::_get_impl(_4207)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));}else {}(dim = ([&]() -> int { if ( ! shape) return ((int)0); else return (shape->dim((int)0)); })()); }}}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse  ( ) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral  ( ) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_SymmetricLinearDomain::domainToString( long long _4208,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4209){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_4208,_4209); }bool mosek::fusion::p_SymmetricLinearDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4210){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->match_shape(_4210); }double mosek::fusion::p_SymmetricLinearDomain::get_rhs_item( long long _4211){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_4211); }void mosek::fusion::p_SymmetricLinearDomain::destroy(){shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _4212,    std::shared_ptr< monty::ndarray< double,1 > > _4213,    std::shared_ptr< monty::ndarray< long long,1 > > _4214,    std::shared_ptr< monty::ndarray< int,1 > > _4215){ return new mosek::fusion::LinearDomain(_4212,_4213,_4214,_4215); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _4212,    std::shared_ptr< monty::ndarray< double,1 > > _4213,    std::shared_ptr< monty::ndarray< long long,1 > > _4214,    std::shared_ptr< monty::ndarray< int,1 > > _4215) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_4212,_4213,_4214,_4215); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _4212,    std::shared_ptr< monty::ndarray< double,1 > > _4213,    std::shared_ptr< monty::ndarray< long long,1 > > _4214,    std::shared_ptr< monty::ndarray< int,1 > > _4215){monty::rc_reserve __reserve_this(_pubthis); { { (shape = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _4215) return (::mosek::fusion::p_Set::make(_4215)); else return (nullptr); })()); (key = _4212); (bnd = _4213); if (_4214){ (inst = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); int _8900 = (int)0; int _8901 = (int)((_4214)->size(0)); for (int _4216 = _8900;_4216<_8901;++_4216){ mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->setItem(((*_4214)(_4216)),_4216); }}else { (inst = nullptr); }(cardinal_flag = false); (sparse_flag = false); }}}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4217){ return new mosek::fusion::LinearDomain(_4217); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4217) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_4217); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4217){monty::rc_reserve __reserve_this(_pubthis); { { (shape = mosek::fusion::p_LinearDomain::_get_impl(_4217)->shape); (inst = mosek::fusion::p_LinearDomain::_get_impl(_4217)->inst); (bnd = mosek::fusion::p_LinearDomain::_get_impl(_4217)->bnd); (key = mosek::fusion::p_LinearDomain::_get_impl(_4217)->key); (cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_4217)->cardinal_flag); (sparse_flag = mosek::fusion::p_LinearDomain::_get_impl(_4217)->sparse_flag); }}}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::symmetric( ){ return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(_pubthis); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_LinearDomain::domainToString( long long _4218,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4219){ if ((key == ::mosek::fusion::RelationKey::EqualsTo)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4219.get())->a(std::string (" = ")).get())->a(get_rhs_item(_4218)); }else if ((key == ::mosek::fusion::RelationKey::LessThan)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4219.get())->a(std::string (" <= ")).get())->a(get_rhs_item(_4218)); }else if ((key == ::mosek::fusion::RelationKey::GreaterThan)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4219.get())->a(std::string (" >= ")).get())->a(get_rhs_item(_4218)); }else if ((key == ::mosek::fusion::RelationKey::IsFree)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_4219.get())->a(std::string (" is unbounded")); }else {}return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4219.get())->toString(); }bool mosek::fusion::p_LinearDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4220){ if (! shape){ return true; }else { return shape->compare(_4220); }}double mosek::fusion::p_LinearDomain::get_rhs_item( long long _4221){ if (inst){ if (mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->hasItem(_4221)){ return ((*bnd)(mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->getItem(_4221))); }else { return 0.0; }}else { if (scalable()){ return ([&]() -> double { if ( bnd) return (((*bnd)((int)0))); else return (0.0); })(); }else { return ([&]() -> double { if ( bnd) return (((*bnd)(_4221))); else return (0.0); })(); }}}bool mosek::fusion::p_LinearDomain::scalable( ){ return (! bnd || (((int)((bnd)->size(0)) == (int)1) && ! inst)); }void mosek::fusion::p_LinearDomain::destroy(){bnd.reset();inst.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize( std::shared_ptr< monty::ndarray< int,1 > > _4222){ long long _4223 = (long long)1; int _8902 = (int)0; int _8903 = (int)((_4222)->size(0)); for (int _4224 = _8902;_4224<_8903;++_4224){ (_4223 *= ((*_4222)(_4224))); }return _4223; }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4225,monty::rc_ptr< ::mosek::fusion::Matrix > _4226){ if (_4226->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _4227 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4226->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4228 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4226->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4229 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4226->numNonzeros()))); _4226->getDataAsTriplets(_4227,_4228,_4229); std::shared_ptr< monty::ndarray< long long,1 > > _4230 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8904; for (int _4231=(int)0, _8905=(int)((_4227)->size(0)); _4231 < _8905;++_4231)_8904.push_back(((((*_4227)(_4231)) * mosek::fusion::p_Matrix::_get_impl(_4226)->dimj) + ((*_4228)(_4231)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8904.size()),_8904.begin(),_8904.end())); })(); return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4225,_4229,_4230,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4226)->dimi,mosek::fusion::p_Matrix::_get_impl(_4226)->dimj})); }else { return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4225,_4226->getDataAsArray(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4226)->dimi,mosek::fusion::p_Matrix::_get_impl(_4226)->dimj})); }}monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4232,std::shared_ptr< monty::ndarray< double,2 > > _4233){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4232,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8906; for (int _4234=(int)0, _8907=(int)((_4233)->size(0)); _4234 < _8907;++_4234) for (int _4235=(int)0, _8908=(int)((_4233)->size(1)); _4235 < _8908;++_4235)_8906.push_back(((*_4233)(_4234,_4235))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8906.size()),_8906.begin(),_8906.end())); })(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4233)->size(0)),(int)((_4233)->size(1))})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4236,std::shared_ptr< monty::ndarray< double,1 > > _4237,std::shared_ptr< monty::ndarray< int,1 > > _4238){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4236,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8909; for (int _4239=(int)0, _8910=(int)((_4237)->size(0)); _4239 < _8910;++_4239)_8909.push_back(((*_4237)(_4239))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8909.size()),_8909.begin(),_8909.end())); })(),nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8911; for (int _4240=(int)0, _8912=(int)((_4238)->size(0)); _4240 < _8912;++_4240)_8911.push_back(((*_4238)(_4240))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8911.size()),_8911.begin(),_8911.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4241,std::shared_ptr< monty::ndarray< double,1 > > _4242){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4241,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8913; for (int _4243=(int)0, _8914=(int)((_4242)->size(0)); _4243 < _8914;++_4243)_8913.push_back(((*_4242)(_4243))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8913.size()),_8913.begin(),_8913.end())); })(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4242)->size(0))})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4244,double _4245,std::shared_ptr< monty::ndarray< int,1 > > _4246){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4244,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8915; for (long long _4247=(int)0, _8916=::mosek::fusion::p_Domain::dimsize(_4246); _4247 < _8916;++_4247)_8915.push_back(_4245); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8915.size()),_8915.begin(),_8915.end())); })(),nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8917; for (int _4248=(int)0, _8918=(int)((_4246)->size(0)); _4248 < _8918;++_4248)_8917.push_back(((*_4246)(_4248))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8917.size()),_8917.begin(),_8917.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4249,double _4250){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4249,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4250}),nullptr,nullptr); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4251,std::shared_ptr< monty::ndarray< double,1 > > _4252,std::shared_ptr< monty::ndarray< int,1 > > _4253){ if (((int)((_4251)->size(0)) != (int)((_4252)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));}else {}int _8919 = (int)0; int _8920 = (int)((_4252)->size(0)); for (int _4254 = _8919;_4254<_8920;++_4254){ if ((((*_4251)(_4254)) > ((*_4252)(_4254)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));}else {}}if ((_4253 && (::mosek::fusion::p_Domain::dimsize(_4253) != (int)((_4251)->size(0))))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));}else {}return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_4251,_4252,_4253,nullptr); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4255) { return mosek::fusion::p_Domain::symmetric(_4255); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4255){ return _4255->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4256) { return mosek::fusion::p_Domain::symmetric(_4256); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4256){ return _4256->symmetric(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4257) { return mosek::fusion::p_Domain::sparse(_4257); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4257){ return _4257->sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4258) { return mosek::fusion::p_Domain::sparse(_4258); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4258){ return _4258->sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4259) { return mosek::fusion::p_Domain::integral(_4259); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4259){ return _4259->integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4260) { return mosek::fusion::p_Domain::integral(_4260); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4260){ return _4260->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4261) { return mosek::fusion::p_Domain::integral(_4261); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4261){ return _4261->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4262,    int _4263) { return mosek::fusion::p_Domain::axis(_4262,_4263); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::axis( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4262,int _4263){ return _4262->axis(_4263); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _4264) { return mosek::fusion::p_Domain::inRotatedQCone(_4264); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( std::shared_ptr< monty::ndarray< int,1 > > _4264){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8921; for (int _4265=(int)0, _8922=(int)((_4264)->size(0)); _4265 < _8922;++_4265)_8921.push_back(((*_4264)(_4265))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8921.size()),_8921.begin(),_8921.end())); })(),((int)((_4264)->size(0)) - (int)1)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _4266,    int _4267) { return mosek::fusion::p_Domain::inRotatedQCone(_4266,_4267); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( int _4266,int _4267){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4266,_4267}),(int)1); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _4268) { return mosek::fusion::p_Domain::inRotatedQCone(_4268); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( int _4268){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4268}),(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( ){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,nullptr,(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _4269) { return mosek::fusion::p_Domain::inQCone(_4269); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( std::shared_ptr< monty::ndarray< int,1 > > _4269){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8923; for (int _4270=(int)0, _8924=(int)((_4269)->size(0)); _4270 < _8924;++_4270)_8923.push_back(((*_4269)(_4270))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8923.size()),_8923.begin(),_8923.end())); })(),((int)((_4269)->size(0)) - (int)1)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( int _4271,    int _4272) { return mosek::fusion::p_Domain::inQCone(_4271,_4272); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( int _4271,int _4272){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4271,_4272}),(int)1); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( int _4273) { return mosek::fusion::p_Domain::inQCone(_4273); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( int _4273){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4273}),(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( ){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,nullptr,(int)0); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _4274,    int _4275) { return mosek::fusion::p_Domain::isLinPSD(_4274,_4275); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( int _4274,int _4275){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4275,((_4274 * (_4274 + (int)1)) / (int)2)))); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _4276) { return mosek::fusion::p_Domain::isLinPSD(_4276); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( int _4276){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(((_4276 * (_4276 + (int)1)) / (int)2)))); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( ){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _4277,    int _4278) { return mosek::fusion::p_Domain::isTrilPSD(_4277,_4278); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( int _4277,int _4278){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4278,_4277,_4277))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _4279) { return mosek::fusion::p_Domain::isTrilPSD(_4279); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( int _4279){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4279,_4279))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( ){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _4280,    int _4281) { return mosek::fusion::p_Domain::inPSDCone(_4280,_4281); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( int _4280,int _4281){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4281,_4280,_4280))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _4282) { return mosek::fusion::p_Domain::inPSDCone(_4282); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( int _4282){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4282,_4282))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( ){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( ){ return ::mosek::fusion::p_Domain::inRange(0.0,1.0)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _4283) { return mosek::fusion::p_Domain::binary(_4283); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( std::shared_ptr< monty::ndarray< int,1 > > _4283){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8925; for (long long _4284=(int)0, _8926=::mosek::fusion::p_Domain::dimsize(_4283); _4284 < _8926;++_4284)_8925.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8925.size()),_8925.begin(),_8925.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8927; for (long long _4285=(int)0, _8928=::mosek::fusion::p_Domain::dimsize(_4283); _4285 < _8928;++_4285)_8927.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8927.size()),_8927.begin(),_8927.end())); })(),_4283)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _4286,    int _4287) { return mosek::fusion::p_Domain::binary(_4286,_4287); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( int _4286,int _4287){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8929; for (int _4288=(int)0, _8930=(_4287 * _4286); _4288 < _8930;++_4288)_8929.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8929.size()),_8929.begin(),_8929.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8931; for (int _4289=(int)0, _8932=(_4287 * _4286); _4289 < _8932;++_4289)_8931.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8931.size()),_8931.begin(),_8931.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4286,_4287}))->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _4290) { return mosek::fusion::p_Domain::binary(_4290); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( int _4290){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8933; for (int _4291=(int)0, _8934=_4290; _4291 < _8934;++_4291)_8933.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8933.size()),_8933.begin(),_8933.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8935; for (int _4292=(int)0, _8936=_4290; _4292 < _8936;++_4292)_8935.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8935.size()),_8935.begin(),_8935.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4290}))->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4293,    monty::rc_ptr< ::mosek::fusion::Matrix > _4294) { return mosek::fusion::p_Domain::inRange(_4293,_4294); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( monty::rc_ptr< ::mosek::fusion::Matrix > _4293,monty::rc_ptr< ::mosek::fusion::Matrix > _4294){ return ::mosek::fusion::p_Domain::inRange(_4293->getDataAsArray(),_4294->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4293)->dimi,mosek::fusion::p_Matrix::_get_impl(_4293)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4295,    double _4296) { return mosek::fusion::p_Domain::inRange(_4295,_4296); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( monty::rc_ptr< ::mosek::fusion::Matrix > _4295,double _4296){ return ::mosek::fusion::p_Domain::inRange(_4295->getDataAsArray(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8937; for (int _4297=(int)0, _8938=(mosek::fusion::p_Matrix::_get_impl(_4295)->dimi * mosek::fusion::p_Matrix::_get_impl(_4295)->dimj); _4297 < _8938;++_4297)_8937.push_back(_4296); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8937.size()),_8937.begin(),_8937.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4295)->dimi,mosek::fusion::p_Matrix::_get_impl(_4295)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4298,    monty::rc_ptr< ::mosek::fusion::Matrix > _4299) { return mosek::fusion::p_Domain::inRange(_4298,_4299); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4298,monty::rc_ptr< ::mosek::fusion::Matrix > _4299){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8939; for (int _4300=(int)0, _8940=(mosek::fusion::p_Matrix::_get_impl(_4299)->dimi * mosek::fusion::p_Matrix::_get_impl(_4299)->dimj); _4300 < _8940;++_4300)_8939.push_back(_4298); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8939.size()),_8939.begin(),_8939.end())); })(),_4299->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4299)->dimi,mosek::fusion::p_Matrix::_get_impl(_4299)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _4301,    std::shared_ptr< monty::ndarray< double,1 > > _4302) { return mosek::fusion::p_Domain::inRange(_4301,_4302); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4301,std::shared_ptr< monty::ndarray< double,1 > > _4302){ return ::mosek::fusion::p_Domain::inRange(_4301,_4302,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4301)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _4303,    double _4304) { return mosek::fusion::p_Domain::inRange(_4303,_4304); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4303,double _4304){ return ::mosek::fusion::p_Domain::inRange(_4303,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8941; for (int _4305=(int)0, _8942=(int)((_4303)->size(0)); _4305 < _8942;++_4305)_8941.push_back(_4304); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8941.size()),_8941.begin(),_8941.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4303)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4306,    std::shared_ptr< monty::ndarray< double,1 > > _4307) { return mosek::fusion::p_Domain::inRange(_4306,_4307); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4306,std::shared_ptr< monty::ndarray< double,1 > > _4307){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8943; for (int _4308=(int)0, _8944=(int)((_4307)->size(0)); _4308 < _8944;++_4308)_8943.push_back(_4306); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8943.size()),_8943.begin(),_8943.end())); })(),_4307,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4307)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4309,    double _4310) { return mosek::fusion::p_Domain::inRange(_4309,_4310); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4309,double _4310){ return ::mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4309}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4310}),nullptr); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4311) { return mosek::fusion::p_Domain::greaterThan(_4311); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( monty::rc_ptr< ::mosek::fusion::Matrix > _4311){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4311); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4312,    std::shared_ptr< monty::ndarray< int,1 > > _4313) { return mosek::fusion::p_Domain::greaterThan(_4312,_4313); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,1 > > _4312,std::shared_ptr< monty::ndarray< int,1 > > _4313){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4312); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _4314) { return mosek::fusion::p_Domain::greaterThan(_4314); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,2 > > _4314){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4314); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4315) { return mosek::fusion::p_Domain::greaterThan(_4315); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,1 > > _4315){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4315); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4316,    std::shared_ptr< monty::ndarray< int,1 > > _4317) { return mosek::fusion::p_Domain::greaterThan(_4316,_4317); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4316,std::shared_ptr< monty::ndarray< int,1 > > _4317){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4316,_4317); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4318,    int _4319,    int _4320) { return mosek::fusion::p_Domain::greaterThan(_4318,_4319,_4320); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4318,int _4319,int _4320){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4318,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4319,_4320})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4321,    int _4322) { return mosek::fusion::p_Domain::greaterThan(_4321,_4322); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4321,int _4322){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4321,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4322})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4323) { return mosek::fusion::p_Domain::greaterThan(_4323); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4323){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4323); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4324) { return mosek::fusion::p_Domain::lessThan(_4324); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( monty::rc_ptr< ::mosek::fusion::Matrix > _4324){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4324); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4325,    std::shared_ptr< monty::ndarray< int,1 > > _4326) { return mosek::fusion::p_Domain::lessThan(_4325,_4326); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,1 > > _4325,std::shared_ptr< monty::ndarray< int,1 > > _4326){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4325,_4326); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _4327) { return mosek::fusion::p_Domain::lessThan(_4327); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,2 > > _4327){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4327); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4328) { return mosek::fusion::p_Domain::lessThan(_4328); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,1 > > _4328){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4328); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4329,    std::shared_ptr< monty::ndarray< int,1 > > _4330) { return mosek::fusion::p_Domain::lessThan(_4329,_4330); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4329,std::shared_ptr< monty::ndarray< int,1 > > _4330){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4329,_4330); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4331,    int _4332,    int _4333) { return mosek::fusion::p_Domain::lessThan(_4331,_4332,_4333); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4331,int _4332,int _4333){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4331,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4332,_4333})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4334,    int _4335) { return mosek::fusion::p_Domain::lessThan(_4334,_4335); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4334,int _4335){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4334,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4335})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4336) { return mosek::fusion::p_Domain::lessThan(_4336); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4336){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4336); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4337) { return mosek::fusion::p_Domain::equalsTo(_4337); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( monty::rc_ptr< ::mosek::fusion::Matrix > _4337){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4337); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _4338,    std::shared_ptr< monty::ndarray< int,1 > > _4339) { return mosek::fusion::p_Domain::equalsTo(_4338,_4339); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,1 > > _4338,std::shared_ptr< monty::ndarray< int,1 > > _4339){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4338,_4339); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _4340) { return mosek::fusion::p_Domain::equalsTo(_4340); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,2 > > _4340){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4340); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _4341) { return mosek::fusion::p_Domain::equalsTo(_4341); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,1 > > _4341){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4341); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4342,    std::shared_ptr< monty::ndarray< int,1 > > _4343) { return mosek::fusion::p_Domain::equalsTo(_4342,_4343); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4342,std::shared_ptr< monty::ndarray< int,1 > > _4343){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4342,_4343); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4344,    int _4345,    int _4346) { return mosek::fusion::p_Domain::equalsTo(_4344,_4345,_4346); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4344,int _4345,int _4346){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4344,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4345,_4346})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4347,    int _4348) { return mosek::fusion::p_Domain::equalsTo(_4347,_4348); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4347,int _4348){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4347,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4348})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4349) { return mosek::fusion::p_Domain::equalsTo(_4349); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4349){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4349); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _4350) { return mosek::fusion::p_Domain::unbounded(_4350); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( std::shared_ptr< monty::ndarray< int,1 > > _4350){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8945; for (int _4351=(int)0, _8946=(int)((_4350)->size(0)); _4351 < _8946;++_4351)_8945.push_back(((*_4350)(_4351))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8945.size()),_8945.begin(),_8945.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _4352,    int _4353) { return mosek::fusion::p_Domain::unbounded(_4352,_4353); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( int _4352,int _4353){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4352,_4353})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _4354) { return mosek::fusion::p_Domain::unbounded(_4354); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( int _4354){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4354})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( ){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,nullptr); }void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _4363,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4364,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4365,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4366){ return new mosek::fusion::SymmetricExpr(_4363,_4364,_4365,_4366); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _4363,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4364,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4365,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4366) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_4363,_4364,_4365,_4366); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _4363,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4364,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4365,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4366){monty::rc_reserve __reserve_this(_pubthis); { { (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->n = _4363); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->Ms = _4364); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->xs = _4365); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->b = _4366); }}}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4367,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4368){ if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4367)->n != _4368->getdim())){ throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));}else {}return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4367)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_4367)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_4367)->xs,([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4367)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4367)->b->add(_4368)); else return (_4368); })()); }monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4369,double _4370){ return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4369)->n,([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > > _8947; for (int _4371=(int)0, _8948=(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4369)->Ms)->size(0)); _4371 < _8948;++_4371)_8947.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_4369)->Ms)(_4371))->mul(_4370)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_8947.size()),_8947.begin(),_8947.end())); })(),mosek::fusion::p_SymmetricExpr::_get_impl(_4369)->xs,([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4369)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4369)->b->mul(_4370)); else return (nullptr); })()); }monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4372,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4373){ if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->n)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4374 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(((int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->Ms)->size(0)) + (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->Ms)->size(0)))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4375 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->xs)->size(0)) + (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->xs)->size(0)))))); int _4376 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->Ms)->size(0)); int _8949 = (int)0; int _8950 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->Ms)->size(0)); for (int _4377 = _8949;_4377<_8950;++_4377){ (((*_4374)(_4377)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->Ms)(_4377))); }int _8951 = (int)0; int _8952 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->Ms)->size(0)); for (int _4378 = _8951;_4378<_8952;++_4378){ (((*_4374)((_4378 + _4376))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->Ms)(_4378))); }int _4379 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->xs)->size(0)); int _8953 = (int)0; int _8954 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->xs)->size(0)); for (int _4380 = _8953;_4380<_8954;++_4380){ (((*_4375)(_4380)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->xs)(_4380))); }int _8955 = (int)0; int _8956 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->xs)->size(0)); for (int _4381 = _8955;_4381<_8956;++_4381){ (((*_4375)((_4381 + _4379))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->xs)(_4381))); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4382 = ([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( (! mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->b && ! mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->b)) return (nullptr); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( (mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->b && mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->b)) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->b->add(mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->b)); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->b); else return (mosek::fusion::p_SymmetricExpr::_get_impl(_4373)->b); })()); })()); })(); return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4372)->n,_4374,_4375,_4382); }std::string mosek::fusion::SymmetricExpr::toString  ( ) { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4383 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4383.get())->a(std::string ("SymmetricExpr( (")).get())->a(n).get())->a(std::string (",")).get())->a(n).get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4383.get())->toString(); }void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : _impl(_impl) { /*std::cout << "Expr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Expr::~Expr() { delete _impl; _impl = nullptr; }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4384,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4385,    std::shared_ptr< monty::ndarray< long long,1 > > _4386,    std::shared_ptr< monty::ndarray< double,1 > > _4387,    std::shared_ptr< monty::ndarray< double,1 > > _4388,    monty::rc_ptr< ::mosek::fusion::Set > _4389,    std::shared_ptr< monty::ndarray< long long,1 > > _4390){ return new mosek::fusion::Expr(_4384,_4385,_4386,_4387,_4388,_4389,_4390); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4384,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4385,    std::shared_ptr< monty::ndarray< long long,1 > > _4386,    std::shared_ptr< monty::ndarray< double,1 > > _4387,    std::shared_ptr< monty::ndarray< double,1 > > _4388,    monty::rc_ptr< ::mosek::fusion::Set > _4389,    std::shared_ptr< monty::ndarray< long long,1 > > _4390) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4384,_4385,_4386,_4387,_4388,_4389,_4390); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4384,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4385,    std::shared_ptr< monty::ndarray< long long,1 > > _4386,    std::shared_ptr< monty::ndarray< double,1 > > _4387,    std::shared_ptr< monty::ndarray< double,1 > > _4388,    monty::rc_ptr< ::mosek::fusion::Set > _4389,    std::shared_ptr< monty::ndarray< long long,1 > > _4390){monty::rc_reserve __reserve_this(_pubthis); { { (model = ::mosek::fusion::p_Expr::extractModel(_4385)); (shape_p = _4389); (x = _4385); (varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8957 = (int)0; int _8958 = (int)((x)->size(0)); for (int _4391 = _8957;_4391<_8958;++_4391){ (((*varsb)((_4391 + (int)1))) = (((*varsb)(_4391)) + mosek::fusion::p_Set::_get_impl(((*x)(_4391))->shape())->size)); }int _4392 = ((int)((_4384)->size(0)) - (int)1); long long _4393 = ((*_4384)(((int)((_4384)->size(0)) - (int)1))); ::mosek::fusion::p_Expr::validateData(_4384,_4385,_4386,_4387,_4388,shape_p,_4390); if (_4390){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_4390)); }else { (inst = nullptr); }(shape_p = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ! _4389) return (::mosek::fusion::p_Set::make(((int)((_4384)->size(0)) - (int)1))); else return (_4389); })()); (subj = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4393)))); (cof_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4393)))); (ptrb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4384)->size(0)))))); (bfix = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _4388) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_4388)->size(0)))))); })()); { ::mosek::fusion::Utils::Tools::arraycopy(_4384,(int)0,ptrb,(int)0,(int)((ptrb)->size(0))); ::mosek::fusion::Utils::Tools::arraycopy(_4386,(long long)((int)0),subj,(long long)((int)0),_4393); ::mosek::fusion::Utils::Tools::arraycopy(_4387,(long long)((int)0),cof_v,(long long)((int)0),_4393); if (bfix){ ::mosek::fusion::Utils::Tools::arraycopy(_4388,(int)0,bfix,(int)0,(int)((bfix)->size(0))); }else {}}}}}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4394,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4395,    std::shared_ptr< monty::ndarray< long long,1 > > _4396,    std::shared_ptr< monty::ndarray< double,1 > > _4397,    std::shared_ptr< monty::ndarray< double,1 > > _4398,    monty::rc_ptr< ::mosek::fusion::Set > _4399,    std::shared_ptr< monty::ndarray< long long,1 > > _4400,    int _4401){ return new mosek::fusion::Expr(_4394,_4395,_4396,_4397,_4398,_4399,_4400,_4401); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4394,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4395,    std::shared_ptr< monty::ndarray< long long,1 > > _4396,    std::shared_ptr< monty::ndarray< double,1 > > _4397,    std::shared_ptr< monty::ndarray< double,1 > > _4398,    monty::rc_ptr< ::mosek::fusion::Set > _4399,    std::shared_ptr< monty::ndarray< long long,1 > > _4400,    int _4401) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4394,_4395,_4396,_4397,_4398,_4399,_4400,_4401); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4394,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4395,    std::shared_ptr< monty::ndarray< long long,1 > > _4396,    std::shared_ptr< monty::ndarray< double,1 > > _4397,    std::shared_ptr< monty::ndarray< double,1 > > _4398,    monty::rc_ptr< ::mosek::fusion::Set > _4399,    std::shared_ptr< monty::ndarray< long long,1 > > _4400,    int _4401){monty::rc_reserve __reserve_this(_pubthis); { { (model = ::mosek::fusion::p_Expr::extractModel(_4395)); (mosek::fusion::p_Expr::_get_impl(_pubthis)->shape_p = _4399); (x = _4395); (ptrb = _4394); (subj = _4396); (cof_v = _4397); if (((int)((subj)->size(0)) != (int)((cof_v)->size(0)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching subj and cof"));}else {}(varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8959 = (int)0; int _8960 = (int)((x)->size(0)); for (int _4402 = _8959;_4402<_8960;++_4402){ (((*varsb)((_4402 + (int)1))) = (((*varsb)(_4402)) + mosek::fusion::p_Set::_get_impl(((*x)(_4402))->shape())->size)); }(bfix = _4398); (shape_p = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ! _4399) return (::mosek::fusion::p_IntSet::_new_IntSet(((int)((_4394)->size(0)) - (int)1))); else return (_4399); })()); (inst = _4400); }}}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4403){ return new mosek::fusion::Expr(_4403); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4403) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4403); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4403){monty::rc_reserve __reserve_this(_pubthis); { { monty::rc_ptr< ::mosek::fusion::Expression > _8961 = _4403; if (nullptr != dynamic_cast< ::mosek::fusion::Expr* >(_8961.get())) {::mosek::fusion::Expr::t _4404(dynamic_cast< ::mosek::fusion::Expr* >(_8961.get()));{ (model = mosek::fusion::p_Expr::_get_impl(_4404)->model); (shape_p = mosek::fusion::p_Expr::_get_impl(_4404)->shape_p); (ptrb = mosek::fusion::p_Expr::_get_impl(_4404)->ptrb); (subj = mosek::fusion::p_Expr::_get_impl(_4404)->subj); (x = mosek::fusion::p_Expr::_get_impl(_4404)->x); (cof_v = mosek::fusion::p_Expr::_get_impl(_4404)->cof_v); (bfix = mosek::fusion::p_Expr::_get_impl(_4404)->bfix); (varsb = mosek::fusion::p_Expr::_get_impl(_4404)->varsb); (inst = mosek::fusion::p_Expr::_get_impl(_4404)->inst); }}else {mosek::fusion::Expression::t _4405 = _8961;{ monty::rc_ptr< ::mosek::fusion::FlatExpr > _4406 = _4405->eval(); (model = _4403->getModel()); (shape_p = mosek::fusion::p_FlatExpr::_get_impl(_4406)->shape); (ptrb = mosek::fusion::p_FlatExpr::_get_impl(_4406)->ptrb); (subj = mosek::fusion::p_FlatExpr::_get_impl(_4406)->subj); (x = mosek::fusion::p_FlatExpr::_get_impl(_4406)->x); (cof_v = mosek::fusion::p_FlatExpr::_get_impl(_4406)->cof); (bfix = mosek::fusion::p_FlatExpr::_get_impl(_4406)->bfix); (varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8962 = (int)0; int _8963 = (int)((x)->size(0)); for (int _4407 = _8962;_4407<_8963;++_4407){ (((*varsb)((_4407 + (int)1))) = (((*varsb)(_4407)) + mosek::fusion::p_Set::_get_impl(((*x)(_4407))->shape())->size)); }(inst = mosek::fusion::p_FlatExpr::_get_impl(_4406)->inst); }}}}}std::string mosek::fusion::Expr::toString  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->toString(); }std::string mosek::fusion::p_Expr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4408 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string ("Expr(ndim=(")).get())->a(shape_p->dim((int)0)); int _8964 = (int)1; int _8965 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _4409 = _8964;_4409<_8965;++_4409){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string (",")).get())->a(shape_p->dim(_4409)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string ("),\n     [ ")); if (((int)((ptrb)->size(0)) > (int)1)){ if (! inst){ tostr(_4408,(int)0); int _8966 = (int)1; int _8967 = ((int)((ptrb)->size(0)) - (int)1); for (int _4410 = _8966;_4410<_8967;++_4410){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string (",\n       ")); tostr(_4408,_4410); }}else { if (((int)((inst)->size(0)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string ("(")).get())->a(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)((int)0)))).get())->a(std::string (") -> ")); tostr(_4408,(int)0); int _8968 = (int)1; int _8969 = ((int)((ptrb)->size(0)) - (int)1); for (int _4411 = _8968;_4411<_8969;++_4411){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string (",\n       (")).get())->a(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_4411)))).get())->a(std::string (") -> ")); tostr(_4408,_4411); }}else {}}}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->a(std::string (" ])")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4408.get())->toString(); }void mosek::fusion::p_Expr::tostr( monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4412,int _4413){ long long _8970 = ((*ptrb)(_4413)); long long _8971 = ((*ptrb)((_4413 + (int)1))); for (long long _4414 = _8970;_4414<_8971;++_4414){ long long _4415 = ((*subj)(_4414)); double _4416 = ((*cof_v)(_4414)); if ((_4416 < (int)0)){ int _4417 = (int)0; while ((((*varsb)((_4417 + (int)1))) <= _4415)) { ( ++ _4417 ); }if (((_4416 < (- 1.0)) || (_4416 > (- 1.0)))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4412.get())->a(std::string (" - ")).get())->a((- _4416)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4412.get())->a(std::string (" - ")).get())->a(std::string (" ")); }((*x)(_4417))->elementName((_4415 - ((*varsb)(_4417))),_4412); }else { int _4418 = (int)0; while ((((*varsb)((_4418 + (int)1))) <= _4415)) { ( ++ _4418 ); }if (((_4416 < 1.0) || (_4416 > 1.0))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4412.get())->a(std::string (" + ")).get())->a(_4416).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4412.get())->a(std::string (" + ")).get())->a(std::string (" ")); }((*x)(_4418))->elementName((_4415 - ((*varsb)(_4418))),_4412); }}if (bfix){ if ((((*bfix)(_4413)) < 0.0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4412.get())->a(std::string (" - ")).get())->a((- ((*bfix)(_4413)))); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4412.get())->a(std::string (" + ")).get())->a(((*bfix)(_4413))); }}else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _4419){ return ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _8972; for (int _4420=(int)0, _8973=(int)((_4419)->size(0)); _4420 < _8973;++_4420) for (int _4421=(int)0, _8974=(int)((((*_4419)(_4420)))->size(0)); _4421 < _8974;++_4421)_8972.push_back(((*((*_4419)(_4420)))(_4421))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_8972.size()),_8972.begin(),_8972.end())); })(); }std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4422,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4423){ if (! _4422){ return _4423; }else if (! _4423){ return _4422; }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4424 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((int)((_4422)->size(0)) + (int)((_4423)->size(0)))))); int _8975 = (int)0; int _8976 = (int)((_4422)->size(0)); for (int _4425 = _8975;_4425<_8976;++_4425){ (((*_4424)(_4425)) = ((*_4422)(_4425))); }int _8977 = (int)0; int _8978 = (int)((_4423)->size(0)); for (int _4426 = _8977;_4426<_8978;++_4426){ (((*_4424)((_4426 + (int)((_4422)->size(0))))) = ((*_4423)(_4426))); }return _4424; }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _4427) { return mosek::fusion::p_Expr::flatten(_4427); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten( monty::rc_ptr< ::mosek::fusion::Expression > _4427){ if (! _4427){ throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4427,(int)mosek::fusion::p_Set::_get_impl(_4427->shape())->size); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4428,    int _4429,    int _4430) { return mosek::fusion::p_Expr::reshape(_4428,_4429,_4430); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4428,int _4429,int _4430){ if (! _4428){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4428,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4429,_4430))); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4431,    int _4432) { return mosek::fusion::p_Expr::reshape(_4431,_4432); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4431,int _4432){ if (! _4431){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4431,::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(_4432))); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4433,    monty::rc_ptr< ::mosek::fusion::Set > _4434) { return mosek::fusion::p_Expr::reshape(_4433,_4434); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4433,monty::rc_ptr< ::mosek::fusion::Set > _4434){ if ((! _4433 || ! _4434)){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}if ((mosek::fusion::p_Set::_get_impl(_4434)->size != mosek::fusion::p_Set::_get_impl(_4433->shape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _8979 = _4433; if (nullptr != dynamic_cast< ::mosek::fusion::Expr* >(_8979.get())) {::mosek::fusion::Expr::t _4435(dynamic_cast< ::mosek::fusion::Expr* >(_8979.get()));{ return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_Expr::_get_impl(_4435)->ptrb,mosek::fusion::p_Expr::_get_impl(_4435)->x,mosek::fusion::p_Expr::_get_impl(_4435)->subj,mosek::fusion::p_Expr::_get_impl(_4435)->cof_v,mosek::fusion::p_Expr::_get_impl(_4435)->bfix,_4434,mosek::fusion::p_Expr::_get_impl(_4435)->inst,(int)1); }}else {mosek::fusion::Expression::t _4436 = _8979;{ monty::rc_ptr< ::mosek::fusion::FlatExpr > _4437 = _4433->eval(); return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4437)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4437)->x,mosek::fusion::p_FlatExpr::_get_impl(_4437)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4437)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4437)->bfix,_4434,mosek::fusion::p_FlatExpr::_get_impl(_4437)->inst,(int)1); }}}long long mosek::fusion::Expr::size  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size( ){ return ((long long)((ptrb)->size(0)) - (int)1); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::eval( ){ std::shared_ptr< monty::ndarray< double,1 > > _4438 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! bfix) return (nullptr); else return (::mosek::fusion::Utils::Tools::arraycopy(bfix)); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4439 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ! inst) return (nullptr); else return (::mosek::fusion::Utils::Tools::arraycopy(inst)); })(); return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4438,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),x,::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape_p,inst); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _4440) { return mosek::fusion::p_Expr::zeros(_4440); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros( int _4440){ std::shared_ptr< monty::ndarray< long long,1 > > _4441 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)1 + _4440)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4442 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4443 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4445 = ::mosek::fusion::Utils::Tools::zeros(_4440); return ::mosek::fusion::p_Expr::_new_Expr(_4441,_4442,_4443,_4444,_4445,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _4446) { return mosek::fusion::p_Expr::ones(_4446); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones( int _4446){ std::shared_ptr< monty::ndarray< long long,1 > > _4447 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)1 + _4446)); std::shared_ptr< monty::ndarray< long long,1 > > _4448 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4449 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4450 = ::mosek::fusion::Utils::Tools::ones(_4446); return ::mosek::fusion::p_Expr::_new_Expr(_4447,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),_4448,_4449,_4450,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4451) { return mosek::fusion::p_Expr::constTerm(_4451); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4451){ monty::rc_ptr< ::mosek::fusion::Set > _4452 = ::mosek::fusion::p_Set::make(mosek::fusion::p_NDSparseArray::_get_impl(_4451)->dims); std::shared_ptr< monty::ndarray< long long,1 > > _4453 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((mosek::fusion::p_NDSparseArray::_get_impl(_4451)->inst)->size(0)) + (int)1)))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4454 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4455 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4456 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4457 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_NDSparseArray::_get_impl(_4451)->cof); std::shared_ptr< monty::ndarray< long long,1 > > _4458 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_NDSparseArray::_get_impl(_4451)->inst); return ::mosek::fusion::p_Expr::_new_Expr(_4453,_4454,_4455,_4456,_4457,_4452,_4458); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4459) { return mosek::fusion::p_Expr::constTerm(_4459); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::Matrix > _4459){ monty::rc_ptr< ::mosek::fusion::Set > _4460 = ::mosek::fusion::p_Set::make(_4459->numRows(),_4459->numColumns()); std::shared_ptr< monty::ndarray< long long,1 > > _4461 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4459->numNonzeros() + (int)1)))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4462 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4463 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4464 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4465 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4466 = nullptr; if (_4459->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _4467 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4459->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4468 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4459->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4469 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4459->numNonzeros()))); _4459->getDataAsTriplets(_4467,_4468,_4469); (_4465 = _4469); (_4466 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8980; for (long long _4470=(int)0, _8981=_4459->numNonzeros(); _4470 < _8981;++_4470)_8980.push_back((((long long)((*_4467)(_4470)) * _4459->numColumns()) + ((*_4468)(_4470)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8980.size()),_8980.begin(),_8980.end())); })()); }else { (_4465 = _4459->getDataAsArray()); }return ::mosek::fusion::p_Expr::_new_Expr(_4461,_4462,_4463,_4464,_4465,_4460,_4466); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _4471) { return mosek::fusion::p_Expr::constTerm(_4471); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( double _4471){ std::shared_ptr< monty::ndarray< long long,1 > > _4472 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4473 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4474 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4475 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4476 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4471}); return ::mosek::fusion::p_Expr::_new_Expr(_4472,_4473,_4474,_4475,_4476,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Set > _4477,    double _4478) { return mosek::fusion::p_Expr::constTerm(_4477,_4478); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::Set > _4477,double _4478){ std::shared_ptr< monty::ndarray< long long,1 > > _4479 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)mosek::fusion::p_Set::_get_impl(_4477)->size + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4480 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4481 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4482 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4483 = ::mosek::fusion::Utils::Tools::makevector(_4478,(int)mosek::fusion::p_Set::_get_impl(_4477)->size); return ::mosek::fusion::p_Expr::_new_Expr(_4479,_4480,_4481,_4482,_4483,_4477,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _4484,    double _4485) { return mosek::fusion::p_Expr::constTerm(_4484,_4485); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( int _4484,double _4485){ std::shared_ptr< monty::ndarray< long long,1 > > _4486 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(_4484 + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4487 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4488 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4489 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4490 = ::mosek::fusion::Utils::Tools::makevector(_4485,_4484); return ::mosek::fusion::p_Expr::_new_Expr(_4486,_4487,_4488,_4489,_4490,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _4491) { return mosek::fusion::p_Expr::constTerm(_4491); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( std::shared_ptr< monty::ndarray< double,2 > > _4491){ if (! _4491){ throw monty::NullPointerException(std::string ("Arguments for constTerm may not be null"));}else {}int _4492 = ((int)((_4491)->size(0)) * (int)((_4491)->size(1))); std::shared_ptr< monty::ndarray< long long,1 > > _4493 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(_4492 + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4494 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4495 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4496 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4497 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4492))); { int _4498 = (int)0; int _8982 = (int)0; int _8983 = (int)((_4491)->size(0)); for (int _4499 = _8982;_4499<_8983;++_4499){ int _8984 = (int)0; int _8985 = (int)((_4491)->size(1)); for (int _4500 = _8984;_4500<_8985;++_4500){ (((*_4497)(_4498)) = ((*_4491)(_4499,_4500))); ( ++ _4498 ); }}}return ::mosek::fusion::p_Expr::_new_Expr(_4493,_4494,_4495,_4496,_4497,::mosek::fusion::p_Set::make((int)((_4491)->size(0)),(int)((_4491)->size(1))),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _4501) { return mosek::fusion::p_Expr::constTerm(_4501); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( std::shared_ptr< monty::ndarray< double,1 > > _4501){ if (! _4501){ throw monty::NullPointerException(std::string ("Arguments for constTerm may not be null"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _4502 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)((_4501)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4503 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4504 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4505 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4506 = ::mosek::fusion::Utils::Tools::arraycopy(_4501); return ::mosek::fusion::p_Expr::_new_Expr(_4502,_4503,_4504,_4505,_4506,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }long long mosek::fusion::Expr::numNonzeros  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros( ){ return (long long)((cof_v)->size(0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum_expr( monty::rc_ptr< ::mosek::fusion::Expression > _4507,int _4508,int _4509){ if (((_4508 < (int)0) || ((_4509 <= _4508) || (mosek::fusion::p_Set::_get_impl(_4507->shape())->nd < _4509)))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4510 = _4507->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape)->size == (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _4511 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape)->nd - (_4509 - _4508))))); long long _4512 = (long long)1; long long _4513 = (long long)1; long long _4514 = (long long)1; int _8986 = (int)0; int _8987 = _4508; for (int _4515 = _8986;_4515<_8987;++_4515){ (_4512 *= mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4515)); (((*_4511)(_4515)) = mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4515)); }int _8988 = _4508; int _8989 = _4509; for (int _4516 = _8988;_4516<_8989;++_4516){ (_4513 *= mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4516)); }int _8990 = _4509; int _8991 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape)->nd; for (int _4517 = _8990;_4517<_8991;++_4517){ (_4514 *= mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4517)); (((*_4511)((_4517 - _4509))) = mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4517)); }if (((_4512 == (int)0) || (_4514 == (int)0))){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),mosek::fusion::p_FlatExpr::_get_impl(_4510)->x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4511),nullptr); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),mosek::fusion::p_FlatExpr::_get_impl(_4510)->x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4511),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)))); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _4518 = mosek::fusion::p_FlatExpr::_get_impl(_4510)->inst; if (! _4518){ (_4518 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4510)->ptrb)->size(0)) - (long long)1))); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _4519 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4518)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _4520 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4518)->size(0))))); { long long _4521 = (long long)1; long long _4522 = (long long)1; long long _4523 = (long long)1; int _8992 = (int)0; int _8993 = _4508; for (int _4524 = _8992;_4524<_8993;++_4524){ (_4521 *= mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4524)); }int _8994 = _4508; int _8995 = _4509; for (int _4525 = _8994;_4525<_8995;++_4525){ (_4522 *= mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4525)); }int _8996 = _4509; int _8997 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape)->nd; for (int _4526 = _8996;_4526<_8997;++_4526){ (_4523 *= mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4526)); }int _8998 = (int)0; int _8999 = (int)((_4518)->size(0)); for (int _4527 = _8998;_4527<_8999;++_4527){ long long _4528 = ((*_4518)(_4527)); (((*_4519)(_4527)) = ((_4528 % _4523) + ((_4528 / (_4523 * _4522)) * _4523))); (((*_4520)(_4527)) = ((_4528 / _4523) % _4522)); }}std::shared_ptr< monty::ndarray< long long,1 > > _4529 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4518)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_4529,_4519,_4520,(long long)0,(long long)((_4518)->size(0))); long long _4530 = (long long)1; int _9000 = (int)1; int _9001 = (int)((_4519)->size(0)); for (int _4531 = _9000;_4531<_9001;++_4531){ if ((((*_4519)(((*_4529)(_4531)))) > ((*_4519)(((*_4529)((_4531 - (int)1))))))){ ( ++ _4530 ); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _4532 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4530 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4533 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_4510)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _4534 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_4510)->cof)->size(0))))); { int _4535 = (int)0; long long _9002 = (long long)0; long long _9003 = _4530; for (long long _4536 = _9002;_4536<_9003;++_4536){ int _4537 = _4535; long long _4538 = ((*_4519)(((*_4529)(_4535)))); while (((_4535 < (int)((_4519)->size(0))) && (_4538 == ((*_4519)(((*_4529)(_4535))))))) { ( ++ _4535 ); }(((*_4532)((_4536 + (int)1))) = ((*_4532)(_4536))); int _9004 = _4537; int _9005 = _4535; for (int _4539 = _9004;_4539<_9005;++_4539){ long long _4540 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4510)->ptrb)((((*_4529)(_4539)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4510)->ptrb)(((*_4529)(_4539))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4510)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4510)->ptrb)(((*_4529)(_4539)))),_4533,((*_4532)((_4536 + (int)1))),_4540); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4510)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_4510)->ptrb)(((*_4529)(_4539)))),_4534,((*_4532)((_4536 + (int)1))),_4540); (((*_4532)((_4536 + (int)1))) = (((*_4532)((_4536 + (int)1))) + _4540)); }}}std::shared_ptr< monty::ndarray< double,1 > > _4541 = nullptr; if (mosek::fusion::p_FlatExpr::_get_impl(_4510)->bfix){ (_4541 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4530)))); int _4542 = (int)0; long long _9006 = (long long)0; long long _9007 = _4530; for (long long _4543 = _9006;_4543<_9007;++_4543){ int _4544 = _4542; long long _4545 = ((*_4519)(((*_4529)(_4542)))); while (((_4542 < (int)((_4519)->size(0))) && (_4545 == ((*_4519)(((*_4529)(_4542))))))) { ( ++ _4542 ); }int _9008 = _4544; int _9009 = _4542; for (int _4546 = _9008;_4546<_9009;++_4546){ (((*_4541)(_4543)) += ((*mosek::fusion::p_FlatExpr::_get_impl(_4510)->bfix)(((*_4529)(_4546))))); }}}else {}monty::rc_ptr< ::mosek::fusion::Set > _4547; { std::shared_ptr< monty::ndarray< int,1 > > _4548 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape)->nd - (_4509 - _4508))))); int _4549 = (int)0; int _9010 = (int)0; int _9011 = _4508; for (int _4550 = _9010;_4550<_9011;++_4550){ (((*_4548)(_4549)) = mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4550)); ( ++ _4549 ); }int _9012 = _4509; int _9013 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape)->nd; for (int _4551 = _9012;_4551<_9013;++_4551){ (((*_4548)(_4549)) = mosek::fusion::p_FlatExpr::_get_impl(_4510)->shape->dim(_4551)); ( ++ _4549 ); }(_4547 = ::mosek::fusion::p_NDSet::_new_NDSet(_4548)); }std::shared_ptr< monty::ndarray< long long,1 > > _4552 = nullptr; if ((_4530 < mosek::fusion::p_Set::_get_impl(_4547)->size)){ (_4552 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4530)))); (((*_4552)((int)0)) = ((*_4519)(((*_4529)((int)0))))); int _4553 = (int)0; long long _9014 = (long long)1; long long _9015 = _4530; for (long long _4554 = _9014;_4554<_9015;++_4554){ while ((((*_4519)(((*_4529)(_4553)))) <= ((*_4552)((_4554 - (int)1))))) { ( ++ _4553 ); }(((*_4552)(_4554)) = ((*_4519)(((*_4529)(_4553))))); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(_4532,mosek::fusion::p_FlatExpr::_get_impl(_4510)->x,_4533,_4534,_4541,_4547,_4552); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum_var( monty::rc_ptr< ::mosek::fusion::Variable > _4555,int _4556,int _4557){ if (((_4556 < (int)0) || ((_4557 <= _4556) || (_4557 > mosek::fusion::p_Set::_get_impl(_4555->shape())->nd)))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}if ((mosek::fusion::p_Set::_get_impl(_4555->shape())->size == (int)0)){ int _4558 = (mosek::fusion::p_Set::_get_impl(_4555->shape())->nd - (_4557 - _4556)); if ((_4558 < (int)1)){ (_4558 = (int)1); }else {}std::shared_ptr< monty::ndarray< int,1 > > _4559 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4558))); long long _4560 = (long long)1; long long _4561 = (long long)1; long long _4562 = (long long)1; int _9016 = (int)0; int _9017 = _4556; for (int _4563 = _9016;_4563<_9017;++_4563){ (_4560 *= _4555->shape()->dim(_4563)); (((*_4559)(_4563)) = _4555->shape()->dim(_4563)); }int _9018 = _4556; int _9019 = _4557; for (int _4564 = _9018;_4564<_9019;++_4564){ (_4561 *= _4555->shape()->dim(_4564)); }int _9020 = _4557; int _9021 = mosek::fusion::p_Set::_get_impl(_4555->shape())->nd; for (int _4565 = _9020;_4565<_9021;++_4565){ (_4562 *= _4555->shape()->dim(_4565)); (((*_4559)((_4565 - _4557))) = _4555->shape()->dim(_4565)); }if (((_4556 == (int)0) && ((_4557 == mosek::fusion::p_Set::_get_impl(_4555->shape())->nd) && (_4561 == (int)0)))){ (((*_4559)((int)0)) = (int)1); }else {}if (((_4560 == (int)0) || (_4562 == (int)0))){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4559),nullptr); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make(_4559),nullptr); }}else { int _4566 = (mosek::fusion::p_Set::_get_impl(_4555->shape())->nd - (_4557 - _4556)); monty::rc_ptr< ::mosek::fusion::Set > _4567; if ((_4566 == (int)0)){ (_4566 = (int)1); (_4567 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else { std::shared_ptr< monty::ndarray< int,1 > > _4568 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4566))); int _4569 = (int)0; int _9022 = (int)0; int _9023 = _4556; for (int _4570 = _9022;_4570<_9023;++_4570){ (((*_4568)(_4569)) = _4555->shape()->dim(_4570)); ( ++ _4569 ); }int _9024 = _4557; int _9025 = mosek::fusion::p_Set::_get_impl(_4555->shape())->nd; for (int _4571 = _9024;_4571<_9025;++_4571){ (((*_4568)(_4569)) = _4555->shape()->dim(_4571)); ( ++ _4569 ); }if ((_4566 > (int)1)){ (_4567 = ::mosek::fusion::p_NDSet::_new_NDSet(_4568)); }else { (_4567 = ::mosek::fusion::p_IntSet::_new_IntSet(((*_4568)((int)0)))); }}long long _4572 = (long long)1; int _9026 = _4556; int _9027 = _4557; for (int _4573 = _9026;_4573<_9027;++_4573){ (_4572 *= _4555->shape()->dim(_4573)); }std::shared_ptr< monty::ndarray< long long,1 > > _4574 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4572 > (int)0)) return (::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(_4555->shape())->size + (int)1),_4572)); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0})); })(); std::shared_ptr< monty::ndarray< double,1 > > _4575 = ::mosek::fusion::Utils::Tools::ones((int)mosek::fusion::p_Set::_get_impl(_4555->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _4576 = nullptr; long long _4577 = (long long)1; long long _4578 = (long long)1; long long _4579 = (long long)1; int _9028 = (int)0; int _9029 = _4556; for (int _4580 = _9028;_4580<_9029;++_4580){ (_4577 *= _4555->shape()->dim(_4580)); }int _9030 = _4556; int _9031 = _4557; for (int _4581 = _9030;_4581<_9031;++_4581){ (_4578 *= _4555->shape()->dim(_4581)); }int _9032 = _4557; int _9033 = mosek::fusion::p_Set::_get_impl(_4555->shape())->nd; for (int _4582 = _9032;_4582<_9033;++_4582){ (_4579 *= _4555->shape()->dim(_4582)); }std::shared_ptr< monty::ndarray< long long,1 > > _4583 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9034; for (long long _4584=(int)0, _9035=_4577; _4584 < _9035;++_4584) for (long long _4585=(int)0, _9036=_4579; _4585 < _9036;++_4585) for (long long _4586=(int)0, _9037=_4578; _4586 < _9037;++_4586)_9034.push_back(((((_4584 * _4578) * _4579) + (_4586 * _4579)) + _4585)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9034.size()),_9034.begin(),_9034.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_4574,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4555}),_4583,_4575,_4576,_4567,nullptr); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4587,    int _4588,    int _4589) { return mosek::fusion::p_Expr::sum(_4587,_4588,_4589); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4587,int _4588,int _4589){ return ::mosek::fusion::p_Expr::sum_expr(_4587,_4588,_4589); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4590,    int _4591) { return mosek::fusion::p_Expr::sum(_4590,_4591); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4590,int _4591){ if (((_4591 < (int)0) || (mosek::fusion::p_Set::_get_impl(_4590->shape())->nd <= _4591))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}return ::mosek::fusion::p_Expr::sum_expr(_4590,_4591,(_4591 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4592,    int _4593,    int _4594) { return mosek::fusion::p_Expr::sum(_4592,_4593,_4594); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4592,int _4593,int _4594){ return ::mosek::fusion::p_Expr::sum_var(_4592,_4593,_4594); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4595,    int _4596) { return mosek::fusion::p_Expr::sum(_4595,_4596); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4595,int _4596){ if (! _4595){ throw monty::NullPointerException(std::string ("Arguments for sum may not be null"));}else {}return ::mosek::fusion::p_Expr::sum_var(_4595,_4596,(_4596 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4597) { return mosek::fusion::p_Expr::sum(_4597); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4597){ if (! _4597){ throw monty::NullPointerException(std::string ("Arguments for sum may not be null"));}else {}return ::mosek::fusion::p_Expr::sum_var(_4597,(int)0,mosek::fusion::p_Set::_get_impl(_4597->shape())->nd); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4598) { return mosek::fusion::p_Expr::sum(_4598); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4598){ if (! _4598){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4599 = _4598->eval(); std::shared_ptr< monty::ndarray< long long,1 > > _4600 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)((mosek::fusion::p_FlatExpr::_get_impl(_4599)->cof)->size(0))}); std::shared_ptr< monty::ndarray< long long,1 > > _4601 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4599)->subj); std::shared_ptr< monty::ndarray< double,1 > > _4602 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4599)->cof); std::shared_ptr< monty::ndarray< double,1 > > _4603; if (mosek::fusion::p_FlatExpr::_get_impl(_4599)->bfix){ double _4604 = 0.0; { int _4605 = (int)0; for (;(_4605 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4599)->bfix)->size(0)));( ++ _4605 )){ (_4604 = (_4604 + ((*mosek::fusion::p_FlatExpr::_get_impl(_4599)->bfix)(_4605)))); }}(_4603 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4604})); }else { (_4603 = nullptr); }return ::mosek::fusion::p_Expr::_new_Expr(_4600,mosek::fusion::p_FlatExpr::_get_impl(_4599)->x,_4601,_4602,_4603,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Variable > _4606) { return mosek::fusion::p_Expr::neg(_4606); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg( monty::rc_ptr< ::mosek::fusion::Variable > _4606){ if (! _4606){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _4607 = ::mosek::fusion::Utils::Tools::range((mosek::fusion::p_Set::_get_impl(_4606->shape())->size + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _4608 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_4606->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _4609 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9038; for (long long _4610=(int)0, _9039=mosek::fusion::p_Set::_get_impl(_4606->shape())->size; _4610 < _9039;++_4610)_9038.push_back((- 1.0)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9038.size()),_9038.begin(),_9038.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_4607,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4606}),_4608,_4609,nullptr,_4606->shape(),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _4611) { return mosek::fusion::p_Expr::neg(_4611); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg( monty::rc_ptr< ::mosek::fusion::Expression > _4611){ if (! _4611){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4612 = _4611->eval(); std::shared_ptr< monty::ndarray< double,1 > > _4613 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9040; for (int _4614=(int)0, _9041=(int)((mosek::fusion::p_FlatExpr::_get_impl(_4612)->cof)->size(0)); _4614 < _9041;++_4614)_9040.push_back((- ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->cof)(_4614)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9040.size()),_9040.begin(),_9040.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4615 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix) return (nullptr); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9042; for (int _4616=(int)0, _9043=(int)((mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix)->size(0)); _4616 < _9043;++_4616)_9042.push_back((- ((*mosek::fusion::p_FlatExpr::_get_impl(_4612)->bfix)(_4616)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9042.size()),_9042.begin(),_9042.end())); })()); })(); return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4612)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4612)->x,mosek::fusion::p_FlatExpr::_get_impl(_4612)->subj,_4613,_4615,mosek::fusion::p_FlatExpr::_get_impl(_4612)->shape,mosek::fusion::p_FlatExpr::_get_impl(_4612)->inst,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul__( monty::rc_ptr< ::mosek::fusion::Matrix > _4617,monty::rc_ptr< ::mosek::fusion::Expression > _4618){ monty::rc_ptr< ::mosek::fusion::Matrix > _4619 = _4617; monty::rc_ptr< ::mosek::fusion::Expression > _4620 = _4618; if ((mosek::fusion::p_Set::_get_impl(_4618->shape())->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 1 or 2 dimensions"));}else {}if ((_4618->shape()->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4619)->dimj)){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4621 = _4618->eval(); monty::rc_ptr< ::mosek::fusion::Set > _4622; int _4623 = mosek::fusion::p_FlatExpr::_get_impl(_4621)->shape->dim((int)0); int _4624 = (int)1; int _4625 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4621)->shape)->nd == (int)2)){ (_4624 = mosek::fusion::p_FlatExpr::_get_impl(_4621)->shape->dim((int)1)); (_4625 = (int)2); (_4622 = ::mosek::fusion::p_NDSet::_new_NDSet(mosek::fusion::p_Matrix::_get_impl(_4619)->dimi,_4624)); }else { (_4622 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_Matrix::_get_impl(_4619)->dimi)); }monty::rc_ptr< ::mosek::fusion::Expression > _4626; monty::rc_ptr< ::mosek::fusion::Matrix > _9044 = _4619; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9044.get())) {::mosek::fusion::DenseMatrix::t _4627(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9044.get()));{ if (! mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst){ int _4629 = (mosek::fusion::p_Matrix::_get_impl(_4627)->dimi * _4624); std::shared_ptr< monty::ndarray< long long,1 > > _4630 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4629 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4631 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4621)->nnz * mosek::fusion::p_Matrix::_get_impl(_4627)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4632 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4621)->nnz * mosek::fusion::p_Matrix::_get_impl(_4627)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4633 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4629)))); })(); int _4634 = (int)1; { int _4635 = (int)0; for (;(_4635 < mosek::fusion::p_Matrix::_get_impl(_4627)->dimi);( ++ _4635 )){ { int _4636 = (int)0; for (;(_4636 < _4624);( ++ _4636 )){ long long _4637 = ((*_4630)((_4634 - (int)1))); { int _4638 = (int)0; for (;(_4638 < _4623);( ++ _4638 )){ int _4639 = ((_4638 * _4624) + _4636); long long _4640 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)((_4639 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4639))); double _4641 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4627)->data)(((_4635 * mosek::fusion::p_Matrix::_get_impl(_4627)->dimj) + _4638))); { int _4642 = (int)0; for (;(_4642 < _4640);( ++ _4642 )){ (((*_4632)((_4637 + _4642))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4639)) + _4642))) * _4641)); (((*_4631)((_4637 + _4642))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4639)) + _4642)))); }}(_4637 = (_4637 + _4640)); if (mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix){ (((*_4633)((_4634 - (int)1))) = (((*_4633)((_4634 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix)(_4639)) * _4641))); }else {}}}(((*_4630)(_4634)) = _4637); ( ++ _4634 ); }}}}(_4626 = ::mosek::fusion::p_Expr::_new_Expr(_4630,mosek::fusion::p_FlatExpr::_get_impl(_4621)->x,_4631,_4632,_4633,_4622,nullptr)); }else { int _4643 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _4644 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4643))); std::shared_ptr< monty::ndarray< int,1 > > _4645 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4643))); std::shared_ptr< monty::ndarray< long long,1 > > _4646 = ::mosek::fusion::Utils::Tools::range((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)->size(0))); { int _4647 = (int)0; for (;(_4647 < _4643);( ++ _4647 )){ (((*_4644)(_4647)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)(_4647)) / _4624)); (((*_4645)(_4647)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)(_4647)) - ((*_4644)(_4647)))); }}::mosek::fusion::Utils::Tools::argsort(_4646,_4645,_4644,(long long)((int)0),(long long)(_4643)); int _4648 = (int)0; if (((int)((_4645)->size(0)) > (int)0)){ (_4648 = (int)1); { int _4649 = (int)1; for (;(_4649 < _4643);( ++ _4649 )){ if ((((*_4645)(((*_4646)(_4649)))) > ((*_4645)(((*_4646)((_4649 - (int)1))))))){ ( ++ _4648 ); }else {}}}}else {}int _4650 = (_4648 * mosek::fusion::p_Matrix::_get_impl(_4627)->dimi); std::shared_ptr< monty::ndarray< long long,1 > > _4651 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4650 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4652 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4621)->nnz * mosek::fusion::p_Matrix::_get_impl(_4627)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4653 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4621)->nnz * mosek::fusion::p_Matrix::_get_impl(_4627)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4654 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4650)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4655 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4648 >= _4624)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4650)))); })(); int _4656 = (int)0; { int _4657 = (int)0; for (;(_4657 < mosek::fusion::p_Matrix::_get_impl(_4627)->dimi);( ++ _4657 )){ long long _4658 = (long long)(mosek::fusion::p_Matrix::_get_impl(_4627)->dimj * _4657); { int _4659 = (int)0; for (;(_4659 < _4643);( ++ _4659 )){ if (((_4659 == (int)0) || (((*_4645)(((*_4646)(_4659)))) > ((*_4645)(((*_4646)((_4659 - (int)1)))))))){ ( ++ _4656 ); (((*_4651)(_4656)) = ((*_4651)((_4656 - (int)1)))); if (_4655){ (((*_4655)((_4656 - (int)1))) = (((long long)_4657 * _4624) + ((*_4645)(((*_4646)(_4659)))))); }else {}}else {}long long _4660 = ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(((*_4646)(_4659)))); long long _4661 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)((((*_4646)(_4659)) + (int)1))) - _4660); double _4662 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4627)->data)((_4658 + ((*_4644)(((*_4646)(_4659))))))); { int _4663 = (int)0; for (;(_4663 < _4661);( ++ _4663 )){ (((*_4652)((((*_4651)(_4656)) + _4663))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->subj)((_4660 + _4663)))); (((*_4653)((((*_4651)(_4656)) + _4663))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->cof)((_4660 + _4663))) * _4662)); }}if (_4654){ (((*_4654)((_4656 - (int)1))) = (((*_4654)((_4656 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix)(((*_4646)(_4659)))) * _4662))); }else {}if (_4655){ (((*_4655)((_4656 - (int)1))) = (long long)((*_4645)(((*_4646)(_4659))))); }else {}(((*_4651)(_4656)) = (((*_4651)(_4656)) + _4661)); }}}}(_4626 = ::mosek::fusion::p_Expr::_new_Expr(_4651,mosek::fusion::p_FlatExpr::_get_impl(_4621)->x,_4652,_4653,_4654,_4622,_4655)); }}}else {mosek::fusion::Matrix::t _4628 = _9044;{ long long _4664 = _4628->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4665 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4664))); std::shared_ptr< monty::ndarray< int,1 > > _4666 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4664))); std::shared_ptr< monty::ndarray< double,1 > > _4667 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4664))); _4628->getDataAsTriplets(_4665,_4666,_4667); if (! mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst){ long long _4668 = (long long)1; long long _9045 = (long long)1; long long _9046 = _4664; for (long long _4669 = _9045;_4669<_9046;++_4669){ if ((((*_4665)(_4669)) > ((*_4665)((_4669 - (int)1))))){ ( ++ _4668 ); }else {}}long long _4670 = (_4668 * _4624); std::shared_ptr< monty::ndarray< long long,1 > > _4671 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4670 + (int)1)))); long long _4672 = (long long)0; { int _4673 = ((*_4665)((int)0)); long long _4674 = (long long)0; long long _9047 = (long long)0; long long _9048 = _4664; for (long long _4675 = _9047;_4675<_9048;++_4675){ if ((_4673 < ((*_4665)(_4675)))){ (_4674 = (_4674 + _4624)); (_4673 = ((*_4665)(_4675))); }else {}int _9049 = (int)0; int _9050 = _4624; for (int _4676 = _9049;_4676<_9050;++_4676){ int _4677 = ((((*_4666)(_4675)) * _4624) + _4676); long long _4678 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)((_4677 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4677))); (_4672 = (_4672 + _4678)); (((*_4671)(((_4674 + _4676) + (int)1))) = (((*_4671)(((_4674 + _4676) + (int)1))) + _4678)); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4679 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4672))); std::shared_ptr< monty::ndarray< double,1 > > _4680 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4672))); std::shared_ptr< monty::ndarray< double,1 > > _4681 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4670)))); })(); { int _4682 = (int)0; for (;(_4682 < _4670);( ++ _4682 )){ (((*_4671)((_4682 + (int)1))) = (((*_4671)(_4682)) + ((*_4671)((_4682 + (int)1))))); }}std::shared_ptr< monty::ndarray< long long,1 > > _4683 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4668 >= mosek::fusion::p_Matrix::_get_impl(_4628)->dimi)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4670)))); })(); { long long _4684 = (long long)0; int _4685 = ((*_4665)((int)0)); { int _4686 = (int)0; for (;(_4686 < _4664);( ++ _4686 )){ double _4687 = ((*_4667)(_4686)); if ((_4685 < ((*_4665)(_4686)))){ (_4684 = (_4684 + _4624)); (_4685 = ((*_4665)(_4686))); }else {}{ int _4688 = (int)0; for (;(_4688 < _4624);( ++ _4688 )){ int _4689 = ((((*_4666)(_4686)) * _4624) + _4688); long long _4690 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)((_4689 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4689))); { int _4691 = (int)0; for (;(_4691 < _4690);( ++ _4691 )){ (((*_4680)((((*_4671)((_4684 + _4688))) + _4691))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4689)) + _4691))) * _4687)); (((*_4679)((((*_4671)((_4684 + _4688))) + _4691))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(_4689)) + _4691)))); }}if (_4681){ (((*_4681)((_4684 + _4688))) = (((*_4681)((_4684 + _4688))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix)(_4689)) * _4687))); }else {}(((*_4671)((_4684 + _4688))) = (((*_4671)((_4684 + _4688))) + _4690)); if (_4683){ (((*_4683)((_4684 + _4688))) = (long long)((((*_4665)(_4686)) * _4624) + _4688)); }else {}}}}}}{ int _4692 = ((int)((_4671)->size(0)) - (int)1); for (;(_4692 > (int)0);( -- _4692 )){ (((*_4671)(_4692)) = ((*_4671)((_4692 - (int)1)))); }}(((*_4671)((int)0)) = (long long)0); (_4626 = ::mosek::fusion::p_Expr::_new_Expr(_4671,mosek::fusion::p_FlatExpr::_get_impl(_4621)->x,_4679,_4680,_4681,_4622,_4683)); }else { long long _4693 = _4619->numNonzeros(); int _4694 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _4695 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4694))); std::shared_ptr< monty::ndarray< int,1 > > _4696 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4694))); std::shared_ptr< monty::ndarray< long long,1 > > _4697 = ::mosek::fusion::Utils::Tools::range((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)->size(0))); { int _4698 = (int)0; for (;(_4698 < _4694);( ++ _4698 )){ (((*_4695)(_4698)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)(_4698)) / _4624)); (((*_4696)(_4698)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->inst)(_4698)) - ((*_4695)(_4698)))); }}::mosek::fusion::Utils::Tools::argsort(_4697,_4696,_4695,(long long)((int)0),(long long)(_4694)); long long _4699 = (long long)0; long long _4700 = (long long)0; { { int _4701 = (int)0; for (;(_4701 < _4693);){ int _4702 = _4701; { for (;((_4702 < _4693) && (((*_4665)(_4702)) == ((*_4665)(_4701))));( ++ _4702 )){ }}int _4703 = ((*_4665)(_4701)); int _4704 = ((*_4696)(((*_4697)((int)0)))); { { int _4705 = (int)0; for (;(_4705 < _4694);){ int _4706; { (_4706 = (_4705 + (int)1)); for (;((_4706 < _4694) && (((*_4696)(((*_4697)(_4706)))) == ((*_4696)(((*_4697)((_4706 - (int)1)))))));( ++ _4706 )){ }}int _4707 = _4701; int _4708 = _4705; long long _4709 = _4700; while (((_4707 < _4702) && (_4708 < _4706))) { if ((((*_4666)(_4707)) < ((*_4695)(((*_4697)(_4708)))))){ ( ++ _4707 ); }else if ((((*_4666)(_4707)) > ((*_4695)(((*_4697)(_4708)))))){ ( ++ _4708 ); }else { (_4700 = (_4700 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)((((*_4697)(_4708)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(((*_4697)(_4708))))))); ( ++ _4708 ); ( ++ _4707 ); }}if ((_4709 < _4700)){ ( ++ _4699 ); }else {}(_4705 = _4706); }}}(_4701 = _4702); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4710 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4699 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4711 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4700))); std::shared_ptr< monty::ndarray< double,1 > > _4712 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4700))); std::shared_ptr< monty::ndarray< long long,1 > > _4713 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4699))); std::shared_ptr< monty::ndarray< double,1 > > _4714 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4699)))); })(); { int _4715 = (int)0; long long _4716 = (long long)0; int _4717 = (int)0; { int _4718 = (int)0; for (;(_4718 < _4693);){ int _4719 = _4718; { for (;((_4719 < _4693) && (((*_4665)(_4719)) == ((*_4665)(_4718))));( ++ _4719 )){ }}int _4720 = ((*_4665)(_4718)); int _4721 = ((*_4696)(((*_4697)((int)0)))); { { int _4722 = (int)0; for (;(_4722 < _4694);){ int _4723; { (_4723 = (_4722 + (int)1)); for (;((_4723 < _4694) && (((*_4696)(((*_4697)(_4723)))) == ((*_4696)(((*_4697)((_4723 - (int)1)))))));( ++ _4723 )){ }}int _4724 = _4718; int _4725 = _4722; long long _4726 = _4716; while (((_4724 < _4719) && (_4725 < _4723))) { if ((((*_4666)(_4724)) < ((*_4695)(((*_4697)(_4725)))))){ ( ++ _4724 ); }else if ((((*_4666)(_4724)) > ((*_4695)(((*_4697)(_4725)))))){ ( ++ _4725 ); }else { long long _4727 = ((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(((*_4697)(_4725)))); long long _4728 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)((((*_4697)(_4725)) + (int)1))) - _4727); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4621)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->ptrb)(((*_4697)(_4725)))),_4711,_4716,_4728); { int _4729 = (int)0; for (;(_4729 < _4728);( ++ _4729 )){ (((*_4712)((_4716 + _4729))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->cof)((_4727 + _4729))) * ((*_4667)(_4724)))); }}if (_4714){ (((*_4714)(_4717)) = (((*_4714)(_4717)) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4621)->bfix)(((*_4697)(_4725)))) * ((*_4667)(_4724))))); }else {}(_4716 = (_4716 + _4728)); ( ++ _4725 ); ( ++ _4724 ); }}if ((_4726 < _4716)){ (((*_4713)(_4717)) = ((long long)(((*_4665)(_4718)) * _4624) + ((*_4696)(((*_4697)(_4722)))))); ( ++ _4717 ); (((*_4710)(_4717)) = _4716); }else {}(_4722 = _4723); }}}(_4718 = _4719); }}}(_4626 = ::mosek::fusion::p_Expr::_new_Expr(_4710,mosek::fusion::p_FlatExpr::_get_impl(_4621)->x,_4711,_4712,_4714,_4622,_4713)); }}}return _4626; }void mosek::fusion::p_Expr::sparseMatrixVector( std::shared_ptr< monty::ndarray< long long,1 > > _4730,std::shared_ptr< monty::ndarray< int,1 > > _4731,std::shared_ptr< monty::ndarray< double,1 > > _4732,std::shared_ptr< monty::ndarray< double,1 > > _4733,std::shared_ptr< monty::ndarray< double,1 > > _4734,int _4735){ { int _4736 = (int)0; for (;(_4736 < _4735);( ++ _4736 )){ (((*_4734)(_4736)) = 0.0); }}{ int _4737 = (int)0; for (;(_4737 < _4735);( ++ _4737 )){ { long long _4738 = ((*_4730)(_4737)); for (;(_4738 < ((*_4730)((_4737 + (int)1))));( ++ _4738 )){ int _4739 = ((*_4731)(_4738)); (((*_4734)(_4737)) = (((*_4734)(_4737)) + (((*_4733)(_4739)) * ((*_4732)(_4739))))); }}}}}void mosek::fusion::p_Expr::sparseMatmul( std::shared_ptr< monty::ndarray< long long,1 > > _4740,std::shared_ptr< monty::ndarray< int,1 > > _4741,std::shared_ptr< monty::ndarray< double,1 > > _4742,std::shared_ptr< monty::ndarray< long long,1 > > _4743,std::shared_ptr< monty::ndarray< int,1 > > _4744,std::shared_ptr< monty::ndarray< double,1 > > _4745,std::shared_ptr< monty::ndarray< long long,1 > > _4746,std::shared_ptr< monty::ndarray< int,1 > > _4747,std::shared_ptr< monty::ndarray< double,1 > > _4748,int _4749,int _4750,std::shared_ptr< monty::ndarray< int,1 > > _4751){ int _4752 = (int)0; int _4753 = (int)0; std::shared_ptr< monty::ndarray< double,1 > > _4754 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4750))); { int _4755 = (int)0; for (;(_4755 < _4750);( ++ _4755 )){ (((*_4751)(_4755)) = (- (int)1)); (((*_4754)(_4755)) = 0.0); }}{ int _4756 = (int)0; for (;(_4756 < _4749);( ++ _4756 )){ (_4753 = _4752); { long long _4757 = ((*_4743)(_4756)); for (;(_4757 < ((*_4743)((_4756 + (int)1))));( ++ _4757 )){ int _4758 = ((*_4744)(_4757)); double _4759 = ((*_4745)(_4757)); { long long _4760 = ((*_4746)(_4758)); for (;(_4760 < ((*_4746)((_4758 + (int)1))));( ++ _4760 )){ int _4761 = ((*_4747)(_4760)); if ((((*_4751)(_4761)) < _4753)){ (((*_4751)(_4761)) = _4752); (((*_4754)(_4761)) = (_4759 * ((*_4748)(_4760)))); (((*_4741)(_4752)) = _4761); ( ++ _4752 ); }else { (((*_4754)(_4761)) = (((*_4754)(_4761)) + (_4759 * ((*_4748)(_4760))))); }}}}}::mosek::fusion::Utils::Tools::sort(_4741,_4753,_4752); { int _4762 = _4753; for (;(_4762 < _4752);( ++ _4762 )){ (((*_4742)(_4762)) = ((*_4754)(((*_4741)(_4762))))); (((*_4754)(((*_4741)(_4762)))) = 0.0); }}}}}long long mosek::fusion::p_Expr::computeNz( std::shared_ptr< monty::ndarray< long long,1 > > _4763,std::shared_ptr< monty::ndarray< int,1 > > _4764,std::shared_ptr< monty::ndarray< long long,1 > > _4765,std::shared_ptr< monty::ndarray< int,1 > > _4766,int _4767,int _4768,std::shared_ptr< monty::ndarray< int,1 > > _4769,std::shared_ptr< monty::ndarray< long long,1 > > _4770){ long long _4771 = (long long)0; int _4772 = (int)0; { int _4773 = (int)0; for (;(_4773 < _4768);( ++ _4773 )){ (((*_4769)(_4773)) = (int)0); }}{ int _4774 = (int)0; for (;(_4774 < _4767);( ++ _4774 )){ ( ++ _4772 ); (((*_4770)(_4774)) = _4771); { long long _4775 = ((*_4763)(_4774)); for (;(_4775 < ((*_4763)((_4774 + (int)1))));( ++ _4775 )){ int _4776 = ((*_4764)(_4775)); { long long _4777 = ((*_4765)(_4776)); for (;(_4777 < ((*_4765)((_4776 + (int)1))));( ++ _4777 )){ int _4778 = ((*_4766)(_4777)); if ((((*_4769)(_4778)) != _4772)){ ( ++ _4771 ); (((*_4769)(_4778)) = _4772); }else {}}}}}}}(((*_4770)(_4767)) = _4771); return _4771; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _4779,    monty::rc_ptr< ::mosek::fusion::Matrix > _4780) { return mosek::fusion::p_Expr::mulDiag(_4779,_4780); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Variable > _4779,monty::rc_ptr< ::mosek::fusion::Matrix > _4780){ if ((! _4779 || ! _4780)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _4781 = _4779; monty::rc_ptr< ::mosek::fusion::Matrix > _4782 = _4780; if (((mosek::fusion::p_Set::_get_impl(_4781->shape())->nd != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_4782)->dimj != _4781->shape()->dim((int)0)) || (mosek::fusion::p_Matrix::_get_impl(_4782)->dimi != _4781->shape()->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}long long _4783 = (long long)mosek::fusion::p_Matrix::_get_impl(_4782)->dimj; monty::rc_ptr< ::mosek::fusion::Matrix > _9051 = _4782; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9051.get())) {::mosek::fusion::DenseMatrix::t _4784(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9051.get()));{ long long _4786 = (_4783 * mosek::fusion::p_Matrix::_get_impl(_4784)->dimi); std::shared_ptr< monty::ndarray< long long,1 > > _4787 = ::mosek::fusion::Utils::Tools::range((long long)0,(_4783 * ((long long)1 + _4783)),_4783); std::shared_ptr< monty::ndarray< long long,1 > > _4788 = ::mosek::fusion::Utils::Tools::range((long long)0,_4786); std::shared_ptr< monty::ndarray< double,1 > > _4789 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4786))); int _4790 = (int)0; { long long _4791 = (long long)0; for (;(_4791 < mosek::fusion::p_Matrix::_get_impl(_4784)->dimj);( ++ _4791 )){ { long long _4792 = (long long)0; for (;(_4792 < mosek::fusion::p_Matrix::_get_impl(_4784)->dimi);( ++ _4792 )){ (((*_4789)(_4790)) = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4784)->data)(((_4792 * _4783) + _4791)))); ( ++ _4790 ); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_4787,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4779}),_4788,_4789,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else {mosek::fusion::Matrix::t _4785 = _9051;{ long long _4793 = _4785->numNonzeros(); std::shared_ptr< monty::ndarray< long long,1 > > _4794 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4783 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4795 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4793))); std::shared_ptr< monty::ndarray< double,1 > > _4796 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4793))); std::shared_ptr< monty::ndarray< int,1 > > _4797 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4793))); std::shared_ptr< monty::ndarray< int,1 > > _4798 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4793))); std::shared_ptr< monty::ndarray< double,1 > > _4799 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4793))); _4785->getDataAsTriplets(_4797,_4798,_4799); { int _4800 = (int)0; for (;(_4800 < _4793);( ++ _4800 )){ ( ++ ((*_4794)((((*_4798)(_4800)) + (int)1))) ); }}{ int _4801 = (int)0; for (;(_4801 < _4783);( ++ _4801 )){ (((*_4794)((_4801 + (int)1))) = (((*_4794)(_4801)) + ((*_4794)((_4801 + (int)1))))); }}{ int _4802 = (int)0; for (;(_4802 < _4793);( ++ _4802 )){ long long _4803 = ((*_4794)(((*_4798)(_4802)))); (((*_4796)(_4803)) = ((*_4799)(_4802))); (((*_4795)(_4803)) = (long long)((((*_4798)(_4802)) * mosek::fusion::p_Matrix::_get_impl(_4785)->dimi) + ((*_4797)(_4802)))); ( ++ ((*_4794)(((*_4798)(_4802)))) ); }}{ long long _4804 = _4783; for (;(_4804 > (int)0);( -- _4804 )){ (((*_4794)(_4804)) = ((*_4794)((_4804 - (int)1)))); }}(((*_4794)((int)0)) = (long long)0); return ::mosek::fusion::p_Expr::_new_Expr(_4794,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4779}),_4795,_4796,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4805,    monty::rc_ptr< ::mosek::fusion::Variable > _4806) { return mosek::fusion::p_Expr::mulDiag(_4805,_4806); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Matrix > _4805,monty::rc_ptr< ::mosek::fusion::Variable > _4806){ if ((! _4806 || ! _4805)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _4807 = _4805; monty::rc_ptr< ::mosek::fusion::Variable > _4808 = _4806; if (((mosek::fusion::p_Set::_get_impl(_4808->shape())->nd != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_4807)->dimj != _4808->shape()->dim((int)0)) || (mosek::fusion::p_Matrix::_get_impl(_4807)->dimi != _4808->shape()->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _9052 = _4807; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9052.get())) {::mosek::fusion::DenseMatrix::t _4809(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9052.get()));{ std::shared_ptr< monty::ndarray< long long,1 > > _4812 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)(mosek::fusion::p_Matrix::_get_impl(_4809)->dimj * ((int)1 + mosek::fusion::p_Matrix::_get_impl(_4809)->dimi)),(long long)mosek::fusion::p_Matrix::_get_impl(_4809)->dimj); std::shared_ptr< monty::ndarray< long long,1 > > _4813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Matrix::_get_impl(_4809)->dimi * mosek::fusion::p_Matrix::_get_impl(_4809)->dimj)))); std::shared_ptr< monty::ndarray< long long,1 > > _4814 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9053; for (int _4815=(int)0, _9054=mosek::fusion::p_Matrix::_get_impl(_4809)->dimi; _4815 < _9054;++_4815) for (int _4816=(int)0, _9055=mosek::fusion::p_Matrix::_get_impl(_4809)->dimj; _4816 < _9055;++_4816)_9053.push_back(((long long)_4815 + (mosek::fusion::p_Matrix::_get_impl(_4809)->dimi * _4816))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9053.size()),_9053.begin(),_9053.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4817 = mosek::fusion::p_DenseMatrix::_get_impl(_4809)->data; return ::mosek::fusion::p_Expr::_new_Expr(_4812,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4806}),_4814,_4817,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9052.get())) {::mosek::fusion::SparseMatrix::t _4810(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9052.get()));{ std::shared_ptr< monty::ndarray< long long,1 > > _4818 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Matrix::_get_impl(_4810)->dimi + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4819 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9056; for (long long _4820=(int)0, _9057=mosek::fusion::p_SparseMatrix::_get_impl(_4810)->nnz; _4820 < _9057;++_4820)_9056.push_back((long long)((((*mosek::fusion::p_SparseMatrix::_get_impl(_4810)->subj)(_4820)) * mosek::fusion::p_Matrix::_get_impl(_4810)->dimi) + ((*mosek::fusion::p_SparseMatrix::_get_impl(_4810)->subi)(_4820)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9056.size()),_9056.begin(),_9056.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4821 = mosek::fusion::p_SparseMatrix::_get_impl(_4810)->val; long long _4822 = mosek::fusion::p_SparseMatrix::_get_impl(_4810)->nnz; int _9058 = (int)0; long long _9059 = _4822; for (long long _4823 = _9058;_4823<_9059;++_4823){ ( ++ ((*_4818)((((*mosek::fusion::p_SparseMatrix::_get_impl(_4810)->subi)(_4823)) + (int)1))) ); }int _9060 = (int)0; int _9061 = mosek::fusion::p_Matrix::_get_impl(_4810)->dimi; for (int _4824 = _9060;_4824<_9061;++_4824){ (((*_4818)((_4824 + (int)1))) = (((*_4818)(_4824)) + ((*_4818)((_4824 + (int)1))))); }return ::mosek::fusion::p_Expr::_new_Expr(_4818,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4806}),_4819,_4821,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else {mosek::fusion::Matrix::t _4811 = _9052;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type used."));}}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _4825,    monty::rc_ptr< ::mosek::fusion::Matrix > _4826) { return mosek::fusion::p_Expr::mulDiag(_4825,_4826); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Expression > _4825,monty::rc_ptr< ::mosek::fusion::Matrix > _4826){ if ((! _4826 || ! _4825)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _4827 = _4825; monty::rc_ptr< ::mosek::fusion::Matrix > _4828 = _4826; monty::rc_ptr< ::mosek::fusion::Expression > _4829; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4830 = _4827->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4830)->shape)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 2 dimensions"));}else {}if (((mosek::fusion::p_FlatExpr::_get_impl(_4830)->shape->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4828)->dimj) || (mosek::fusion::p_FlatExpr::_get_impl(_4830)->shape->dim((int)1) != mosek::fusion::p_Matrix::_get_impl(_4828)->dimi))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}int _4831 = mosek::fusion::p_FlatExpr::_get_impl(_4830)->shape->dim((int)0); int _4832 = mosek::fusion::p_FlatExpr::_get_impl(_4830)->shape->dim((int)1); monty::rc_ptr< ::mosek::fusion::Matrix > _9062 = _4828; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9062.get())) {::mosek::fusion::DenseMatrix::t _4833(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9062.get()));{ if (! mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst){ std::shared_ptr< monty::ndarray< long long,1 > > _4835 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4831 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4836 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4830)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4837 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4830)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4838 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4831)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4839 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _4840 = nullptr; int _4841 = (int)0; int _9063 = (int)0; int _9064 = _4831; for (int _4842 = _9063;_4842<_9064;++_4842){ (((*_4835)((_4842 + (int)1))) = ((*_4835)(_4842))); int _9065 = (int)0; int _9066 = _4832; for (int _4843 = _9065;_4843<_9066;++_4843){ long long _4844 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)((_4841 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4841))); double _4845 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4833)->data)(((_4843 * _4831) + _4842))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4830)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4841)),_4836,((*_4835)((_4842 + (int)1))),_4844); int _9067 = (int)0; long long _9068 = _4844; for (long long _4846 = _9067;_4846<_9068;++_4846){ (((*_4837)((((*_4835)((_4842 + (int)1))) + _4846))) = (_4845 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4841)) + _4846))))); }if (_4838){ (((*_4838)(_4842)) += (_4845 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix)(_4841)))); }else {}(((*_4835)((_4842 + (int)1))) = (((*_4835)((_4842 + (int)1))) + _4844)); ( ++ _4841 ); }}(_4829 = ::mosek::fusion::p_Expr::_new_Expr(_4835,mosek::fusion::p_FlatExpr::_get_impl(_4830)->x,_4836,_4837,_4838,_4840,_4839)); }else { int _4847 = (int)0; { long long _4848 = (- (long long)1); int _9069 = (int)0; int _9070 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)->size(0)); for (int _4849 = _9069;_4849<_9070;++_4849){ long long _4850 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4849)) / (long long)_4832); if ((_4848 < _4850)){ (_4848 = _4850); ( ++ _4847 ); }else {}}}std::shared_ptr< monty::ndarray< long long,1 > > _4851 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4847 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4852 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4830)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4853 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4830)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4854 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4847)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4855 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4847 >= _4831)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4847)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4856 = ::mosek::fusion::p_IntSet::_new_IntSet(_4831); { long long _4857 = (- (long long)1); int _4858 = (int)0; { int _4859 = (int)0; for (;(_4859 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)->size(0)));( ++ _4859 )){ long long _4860 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4859)) / (long long)_4832); long long _4861 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4859)) - (_4860 * (long long)_4832)); if ((_4857 < _4860)){ (_4857 = _4860); if (_4855){ (((*_4855)(_4858)) = _4860); }else {}( ++ _4858 ); (((*_4851)(_4858)) = ((*_4851)((_4858 - (int)1)))); }else {}long long _4862 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)((_4859 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4859))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4830)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4859)),_4852,((*_4851)(_4858)),_4862); double _4863 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4833)->data)(((_4861 * _4831) + _4860))); int _9071 = (int)0; long long _9072 = _4862; for (long long _4864 = _9071;_4864<_9072;++_4864){ (((*_4853)((((*_4851)(_4858)) + _4864))) = (_4863 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4859)) + _4864))))); }if (_4854){ (((*_4854)((_4858 - (int)1))) += (_4863 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix)(_4859)))); }else {}(((*_4851)(_4858)) = (((*_4851)(_4858)) + _4862)); }}}(_4829 = ::mosek::fusion::p_Expr::_new_Expr(_4851,mosek::fusion::p_FlatExpr::_get_impl(_4830)->x,_4852,_4853,_4854,::mosek::fusion::Set::t(_4856),_4855)); }}}else {mosek::fusion::Matrix::t _4834 = _9062;{ long long _4865 = _4834->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4865))); std::shared_ptr< monty::ndarray< int,1 > > _4867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4865))); std::shared_ptr< monty::ndarray< double,1 > > _4868 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4865))); std::shared_ptr< monty::ndarray< long long,1 > > _4869 = ::mosek::fusion::Utils::Tools::range((long long)_4865); _4834->getDataAsTriplets(_4866,_4867,_4868); ::mosek::fusion::Utils::Tools::argsort(_4869,_4867,_4866,(long long)((int)0),_4865); if (! mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst){ int _4870 = (int)0; long long _4871 = (long long)0; { int _4872 = (- (int)1); { int _4873 = (int)0; for (;(_4873 < _4865);( ++ _4873 )){ if ((_4872 < ((*_4867)(((*_4869)(_4873)))))){ ( ++ _4870 ); (_4872 = ((*_4867)(((*_4869)(_4873))))); }else {}int _4874 = ((((*_4867)(((*_4869)(_4873)))) * mosek::fusion::p_Matrix::_get_impl(_4834)->dimi) + ((*_4866)(((*_4869)(_4873))))); (_4871 = (_4871 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)((_4874 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4874))))); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4875 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4870 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4876 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4871))); std::shared_ptr< monty::ndarray< double,1 > > _4877 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4871))); std::shared_ptr< monty::ndarray< double,1 > > _4878 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4870)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4879 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4870 >= mosek::fusion::p_Matrix::_get_impl(_4834)->dimj)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4870)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4880 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_Matrix::_get_impl(_4834)->dimj); { long long _4881 = (- (long long)1); int _4882 = (int)0; int _9073 = (int)0; long long _9074 = _4865; for (long long _4883 = _9073;_4883<_9074;++_4883){ if ((_4881 < ((*_4867)(((*_4869)(_4883)))))){ (_4881 = ((*_4867)(((*_4869)(_4883))))); if (_4879){ (((*_4879)(_4882)) = _4881); }else {}( ++ _4882 ); (((*_4875)(_4882)) = ((*_4875)((_4882 - (int)1)))); }else {}int _4884 = ((((*_4867)(((*_4869)(_4883)))) * mosek::fusion::p_Matrix::_get_impl(_4834)->dimi) + ((*_4866)(((*_4869)(_4883))))); long long _4885 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)((_4884 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4884))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4830)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4884)),_4876,((*_4875)(_4882)),_4885); int _9075 = (int)0; long long _9076 = _4885; for (long long _4886 = _9075;_4886<_9076;++_4886){ (((*_4877)((((*_4875)(_4882)) + _4886))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4884)) + _4886))) * ((*_4868)(((*_4869)(_4883)))))); }if (_4878){ (((*_4878)(_4881)) += (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix)(_4884)) * ((*_4868)(((*_4869)(_4883)))))); }else {}(((*_4875)(_4882)) = (((*_4875)(_4882)) + _4885)); }}(_4829 = ::mosek::fusion::p_Expr::_new_Expr(_4875,mosek::fusion::p_FlatExpr::_get_impl(_4830)->x,_4876,_4877,_4878,::mosek::fusion::Set::t(_4880),_4879)); }else { int _4887 = (int)0; long long _4888 = (long long)0; { int _4889 = (int)0; int _4890 = (int)0; long long _4891 = (- (long long)1); while (((_4889 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)->size(0))) && (_4890 < _4865))) { long long _4892 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4889)) / _4832); long long _4893 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4889)) - (_4892 * _4832)); if ((_4892 < ((*_4867)(((*_4869)(_4890)))))){ ( ++ _4889 ); }else if ((_4892 > ((*_4867)(((*_4869)(_4890)))))){ ( ++ _4890 ); }else if ((_4893 < ((*_4866)(((*_4869)(_4890)))))){ ( ++ _4889 ); }else if ((_4893 > ((*_4866)(((*_4869)(_4890)))))){ ( ++ _4890 ); }else { if ((_4891 < _4892)){ ( ++ _4887 ); (_4891 = _4892); }else {}(_4888 = (_4888 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)((_4889 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4889))))); ( ++ _4889 ); ( ++ _4890 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4894 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4887 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4895 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4888))); std::shared_ptr< monty::ndarray< double,1 > > _4896 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4888))); std::shared_ptr< monty::ndarray< double,1 > > _4897 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4887)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4898 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4887 >= _4831)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4887)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4899 = ::mosek::fusion::p_IntSet::_new_IntSet(_4831); { int _4900 = (int)0; int _4901 = (int)0; long long _4902 = (- (long long)1); int _4903 = (int)0; while (((_4900 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)->size(0))) && (_4901 < _4865))) { long long _4904 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4900)) / (long long)_4832); long long _4905 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->inst)(_4900)) - (_4904 * (long long)_4832)); if ((_4904 < ((*_4867)(((*_4869)(_4901)))))){ ( ++ _4900 ); }else if ((_4904 > ((*_4867)(((*_4869)(_4901)))))){ ( ++ _4901 ); }else if ((_4905 < ((*_4866)(((*_4869)(_4901)))))){ ( ++ _4900 ); }else if ((_4905 > ((*_4866)(((*_4869)(_4901)))))){ ( ++ _4901 ); }else { if ((_4902 < _4904)){ if (_4898){ (((*_4898)(_4903)) = _4904); }else {}( ++ _4903 ); (((*_4894)(_4903)) = ((*_4894)((_4903 - (int)1)))); (_4902 = _4904); }else {}long long _4906 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)((_4900 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4900))); double _4907 = ((*_4868)(((*_4869)(_4901)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4830)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4900)),_4895,((*_4894)(_4903)),_4906); { int _4908 = (int)0; for (;(_4908 < _4906);( ++ _4908 )){ (((*_4896)((((*_4894)(_4903)) + _4908))) = (_4907 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->ptrb)(_4900)) + _4908))))); }}if (_4897){ (((*_4897)((_4903 - (int)1))) = (((*_4897)((_4903 - (int)1))) + (_4907 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4830)->bfix)(_4900))))); }else {}(((*_4894)(_4903)) = (((*_4894)(_4903)) + _4906)); ( ++ _4900 ); ( ++ _4901 ); }}}(_4829 = ::mosek::fusion::p_Expr::_new_Expr(_4894,mosek::fusion::p_FlatExpr::_get_impl(_4830)->x,_4895,_4896,_4897,::mosek::fusion::Set::t(_4899),_4898)); }}}return _4829; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4909,    monty::rc_ptr< ::mosek::fusion::Expression > _4910) { return mosek::fusion::p_Expr::mulDiag(_4909,_4910); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Matrix > _4909,monty::rc_ptr< ::mosek::fusion::Expression > _4910){ if ((! _4909 || ! _4910)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _4911 = _4909; monty::rc_ptr< ::mosek::fusion::Expression > _4912 = _4910; monty::rc_ptr< ::mosek::fusion::Expression > _4913; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4914 = _4912->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4914)->shape)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 2 dimensions"));}else {}if (((mosek::fusion::p_FlatExpr::_get_impl(_4914)->shape->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4911)->dimj) || (mosek::fusion::p_FlatExpr::_get_impl(_4914)->shape->dim((int)1) != mosek::fusion::p_Matrix::_get_impl(_4911)->dimi))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}int _4915 = mosek::fusion::p_FlatExpr::_get_impl(_4914)->shape->dim((int)0); int _4916 = mosek::fusion::p_FlatExpr::_get_impl(_4914)->shape->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _4917; std::shared_ptr< monty::ndarray< long long,1 > > _4918; if (mosek::fusion::p_FlatExpr::_get_impl(_4914)->inst){ (_4917 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)->size(0)) - (int)1))))); (_4918 = ::mosek::fusion::Utils::Tools::range((long long)((_4917)->size(0)))); int _9077 = (int)0; int _9078 = (int)((_4917)->size(0)); for (int _4919 = _9077;_4919<_9078;++_4919){ long long _4920 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->inst)(_4919)) / (long long)_4916); long long _4921 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->inst)(_4919)) % (long long)_4916); (((*_4917)(_4919)) = ((_4921 * _4915) + _4920)); }::mosek::fusion::p_CommonTools::argQsort(_4918,_4917,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_4918)->size(0))); }else { (_4917 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9079; for (int _4922=(int)0, _9080=((int)((mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)->size(0)) - (int)1); _4922 < _9080;++_4922)_9079.push_back((((long long)(_4922 % _4916) * _4915) + (_4922 / _4916))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9079.size()),_9079.begin(),_9079.end())); })()); (_4918 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9081; for (int _4923=(int)0, _9082=((int)((mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)->size(0)) - (int)1); _4923 < _9082;++_4923)_9081.push_back((((long long)(_4923 % _4915) * _4916) + (_4923 / _4915))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9081.size()),_9081.begin(),_9081.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > _9083 = _4911; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9083.get())) {::mosek::fusion::DenseMatrix::t _4924(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9083.get()));{ long long _4926 = (long long)0; if (! mosek::fusion::p_FlatExpr::_get_impl(_4914)->inst){ (_4926 = (long long)_4916); }else { int _4927 = (- (int)1); int _9084 = (int)0; int _9085 = (int)((_4917)->size(0)); for (int _4928 = _9084;_4928<_9085;++_4928){ int _4929 = (int)(((*_4917)(((*_4918)(_4928)))) / (long long)mosek::fusion::p_Matrix::_get_impl(_4924)->dimj); if ((_4929 > _4927)){ ( ++ _4926 ); (_4927 = _4929); }else {}}}long long _4930 = (long long)((mosek::fusion::p_FlatExpr::_get_impl(_4914)->subj)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _4931 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4926 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4932 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4930))); std::shared_ptr< monty::ndarray< double,1 > > _4933 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4930))); std::shared_ptr< monty::ndarray< double,1 > > _4934 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4935 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4926))); { int _4936 = (- (int)1); long long _4937 = (long long)0; int _9086 = (int)0; int _9087 = (int)((_4917)->size(0)); for (int _4938 = _9086;_4938<_9087;++_4938){ int _4939 = (int)(((*_4917)(((*_4918)(_4938)))) / (long long)_4915); if ((_4939 > _4936)){ ( ++ _4937 ); (_4936 = _4939); (((*_4931)(_4937)) = ((*_4931)((_4937 - (long long)1)))); (((*_4935)((_4937 - (long long)1))) = (long long)_4939); }else {}long long _4940 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)((((*_4918)(_4938)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4938))))); long long _9088 = (long long)0; long long _9089 = _4940; for (long long _4941 = _9088;_4941<_9089;++_4941){ (((*_4932)((((*_4931)(_4937)) + _4941))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4938)))) + _4941)))); (((*_4933)((((*_4931)(_4937)) + _4941))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4938)))) + _4941))) * ((*mosek::fusion::p_DenseMatrix::_get_impl(_4924)->data)(((*_4917)(((*_4918)(_4938)))))))); }(((*_4931)(_4937)) = (((*_4931)(_4937)) + _4940)); }}if (mosek::fusion::p_FlatExpr::_get_impl(_4914)->bfix){ int _4942 = (- (int)1); int _4943 = (int)0; (_4934 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4926)))); int _9090 = (int)0; int _9091 = (int)((_4917)->size(0)); for (int _4944 = _9090;_4944<_9091;++_4944){ int _4945 = (int)(((*_4917)(((*_4918)(_4944)))) / (long long)mosek::fusion::p_Matrix::_get_impl(_4924)->dimj); if ((_4945 > _4942)){ ( ++ _4943 ); (_4942 = _4945); }else {}(((*_4934)((_4943 - (int)1))) += (((*mosek::fusion::p_DenseMatrix::_get_impl(_4924)->data)(((*_4917)(((*_4918)(_4944)))))) * ((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->bfix)(((*_4918)(_4944)))))); }}else {}(_4913 = ::mosek::fusion::p_Expr::_new_Expr(_4931,mosek::fusion::p_FlatExpr::_get_impl(_4914)->x,_4932,_4933,_4934,::mosek::fusion::Set::t(nullptr),([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_4935)->size(0)) < mosek::fusion::p_Matrix::_get_impl(_4924)->dimi)) return (_4935); else return (nullptr); })())); }}else {mosek::fusion::Matrix::t _4925 = _9083;{ std::shared_ptr< monty::ndarray< int,1 > > _4946 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4925->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4947 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4925->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4948 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4925->numNonzeros()))); long long _4949 = _4925->numNonzeros(); int _4950 = _4925->numRows(); int _4951 = _4925->numColumns(); _4925->getDataAsTriplets(_4946,_4947,_4948); int _4952 = (int)0; long long _4953 = (long long)0; { int _4954 = (- (int)1); int _4955 = (int)0; int _4956 = (int)0; while (((_4955 < _4949) && (_4956 < (int)((_4917)->size(0))))) { int _4957 = ((((*_4946)(_4955)) * _4951) + ((*_4947)(_4955))); if ((_4957 < ((*_4917)(((*_4918)(_4956)))))){ ( ++ _4955 ); }else if ((_4957 > ((*_4917)(((*_4918)(_4956)))))){ ( ++ _4956 ); }else { if ((_4954 < ((*_4946)(_4955)))){ (_4954 = ((*_4946)(_4955))); ( ++ _4952 ); }else {}(_4953 = (_4953 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)((((*_4918)(_4956)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4956))))))); ( ++ _4956 ); ( ++ _4955 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4958 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4952 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4959 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4953))); std::shared_ptr< monty::ndarray< double,1 > > _4960 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4953))); std::shared_ptr< monty::ndarray< double,1 > > _4961 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4962 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4952))); { int _4963 = (- (int)1); int _4964 = (int)0; int _4965 = (int)0; long long _4966 = (long long)0; while (((_4964 < _4949) && (_4965 < (int)((_4917)->size(0))))) { int _4967 = ((((*_4946)(_4964)) * _4951) + ((*_4947)(_4964))); if ((_4967 < ((*_4917)(((*_4918)(_4965)))))){ ( ++ _4964 ); }else if ((_4967 > ((*_4917)(((*_4918)(_4965)))))){ ( ++ _4965 ); }else { if ((_4963 < ((*_4946)(_4964)))){ (_4963 = ((*_4946)(_4964))); ( ++ _4966 ); (((*_4962)((_4966 - (int)1))) = (long long)_4963); (((*_4958)(_4966)) = ((*_4958)((_4966 - (long long)1)))); }else {}long long _4968 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)((((*_4918)(_4965)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4965))))); long long _9092 = (long long)0; long long _9093 = _4968; for (long long _4969 = _9092;_4969<_9093;++_4969){ (((*_4959)((((*_4958)(_4966)) + _4969))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4965)))) + _4969)))); (((*_4960)(((*_4958)((_4966 + _4969))))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->ptrb)(((*_4918)(_4965)))) + _4969))) * ((*_4948)(_4964)))); }(((*_4958)(_4966)) = (((*_4958)(_4966)) + _4968)); ( ++ _4965 ); ( ++ _4964 ); }}}if (mosek::fusion::p_FlatExpr::_get_impl(_4914)->bfix){ int _4970 = (- (int)1); int _4971 = (int)0; int _4972 = (int)0; long long _4973 = (long long)0; (_4961 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4952)))); while (((_4971 < _4949) && (_4972 < (int)((_4917)->size(0))))) { int _4974 = ((((*_4946)(_4971)) * _4951) + ((*_4947)(_4971))); if ((_4974 < ((*_4917)(((*_4918)(_4972)))))){ ( ++ _4971 ); }else if ((_4974 > ((*_4917)(((*_4918)(_4972)))))){ ( ++ _4972 ); }else { if ((_4970 < ((*_4946)(_4971)))){ (_4970 = ((*_4946)(_4971))); ( ++ _4973 ); }else {}(((*_4961)((_4973 - (int)1))) = (((*_4961)((_4973 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4914)->bfix)(((*_4918)(_4972)))) * ((*_4948)(_4971))))); ( ++ _4972 ); ( ++ _4971 ); }}}else {}if (((int)((_4962)->size(0)) == mosek::fusion::p_Matrix::_get_impl(_4925)->dimi)){ (_4962 = nullptr); }else {}(_4913 = ::mosek::fusion::p_Expr::_new_Expr(_4958,mosek::fusion::p_FlatExpr::_get_impl(_4914)->x,_4959,_4960,_4961,::mosek::fusion::p_Set::make(mosek::fusion::p_Matrix::_get_impl(_4925)->dimi),_4962)); }}return _4913; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _4975,    std::shared_ptr< monty::ndarray< double,2 > > _4976) { return mosek::fusion::p_Expr::mulDiag(_4975,_4976); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Variable > _4975,std::shared_ptr< monty::ndarray< double,2 > > _4976){ return ::mosek::fusion::p_Expr::mulDiag(_4975,::mosek::fusion::p_Matrix::dense(_4976)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _4977,    monty::rc_ptr< ::mosek::fusion::Variable > _4978) { return mosek::fusion::p_Expr::mulDiag(_4977,_4978); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( std::shared_ptr< monty::ndarray< double,2 > > _4977,monty::rc_ptr< ::mosek::fusion::Variable > _4978){ return ::mosek::fusion::p_Expr::mulDiag(::mosek::fusion::p_Matrix::dense(_4977),_4978); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _4979,    std::shared_ptr< monty::ndarray< double,2 > > _4980) { return mosek::fusion::p_Expr::mulDiag(_4979,_4980); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Expression > _4979,std::shared_ptr< monty::ndarray< double,2 > > _4980){ return ::mosek::fusion::p_Expr::mulDiag(_4979,::mosek::fusion::p_Matrix::dense(_4980)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _4981,    monty::rc_ptr< ::mosek::fusion::Expression > _4982) { return mosek::fusion::p_Expr::mulDiag(_4981,_4982); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( std::shared_ptr< monty::ndarray< double,2 > > _4981,monty::rc_ptr< ::mosek::fusion::Expression > _4982){ return ::mosek::fusion::p_Expr::mulDiag(::mosek::fusion::p_Matrix::dense(_4981),_4982); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::Matrix > _4983,monty::rc_ptr< ::mosek::fusion::Expression > _4984){ if (((_4983->numRows() != _4984->shape()->dim((int)0)) || ((_4983->numColumns() != _4984->shape()->dim((int)1)) || ((_4983->numRows() * _4983->numColumns()) != _4984->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _4985 = _4983->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4986 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4985))); std::shared_ptr< monty::ndarray< int,1 > > _4987 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4985))); std::shared_ptr< monty::ndarray< double,1 > > _4988 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4985))); _4983->getDataAsTriplets(_4986,_4987,_4988); std::shared_ptr< monty::ndarray< long long,1 > > _4989 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9094; for (long long _4990=(int)0, _9095=_4985; _4990 < _9095;++_4990)_9094.push_back(((((*_4986)(_4990)) * _4983->numColumns()) + ((*_4987)(_4990)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9094.size()),_9094.begin(),_9094.end())); })(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _4991 = _4984->eval(); return ::mosek::fusion::p_Expr::dotmul_(_4989,_4988,mosek::fusion::p_FlatExpr::_get_impl(_4991)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4991)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4991)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4991)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4991)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4991)->x,mosek::fusion::p_FlatExpr::_get_impl(_4991)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::Matrix > _4992,monty::rc_ptr< ::mosek::fusion::Variable > _4993){ if (((_4992->numRows() != _4993->shape()->dim((int)0)) || ((_4992->numColumns() != _4993->shape()->dim((int)1)) || ((_4992->numRows() * _4992->numColumns()) != _4993->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _4994 = _4992->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4995 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4994))); std::shared_ptr< monty::ndarray< int,1 > > _4996 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4994))); std::shared_ptr< monty::ndarray< double,1 > > _4997 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4994))); _4992->getDataAsTriplets(_4995,_4996,_4997); std::shared_ptr< monty::ndarray< long long,1 > > _4998 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9096; for (long long _4999=(int)0, _9097=_4994; _4999 < _9097;++_4999)_9096.push_back(((((*_4995)(_4999)) * _4992->numColumns()) + ((*_4996)(_4999)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9096.size()),_9096.begin(),_9096.end())); })(); return ::mosek::fusion::p_Expr::dotmul_(_4998,_4997,_4993,_4993->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( std::shared_ptr< monty::ndarray< double,1 > > _5000,monty::rc_ptr< ::mosek::fusion::Variable > _5001){ if ((! _5001 || ! _5000)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}if (((_5001->shape()->dim((int)0) != (int)((_5000)->size(0))) || (_5001->shape()->getSize() != (long long)((_5000)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}return ::mosek::fusion::p_Expr::dotmul_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5000)->size(0))),_5000,_5001,_5001->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( std::shared_ptr< monty::ndarray< double,1 > > _5002,monty::rc_ptr< ::mosek::fusion::Expression > _5003){ if ((! _5002 || ! _5003)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}if (((_5003->shape()->dim((int)0) != (int)((_5002)->size(0))) || (_5003->shape()->getSize() != (long long)((_5002)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5004 = _5003->eval(); return ::mosek::fusion::p_Expr::dotmul_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5002)->size(0))),_5002,mosek::fusion::p_FlatExpr::_get_impl(_5004)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5004)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5004)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5004)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5004)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5004)->x,mosek::fusion::p_FlatExpr::_get_impl(_5004)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5005,monty::rc_ptr< ::mosek::fusion::Expression > _5006){ if ((! _5005 || ! _5006)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}int _9098 = (int)0; int _9099 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5005)->dims)->size(0)); for (int _5007 = _9098;_5007<_9099;++_5007){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5005)->dims)(_5007)) != _5006->shape()->dim(_5007))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9100 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5005)->dims)->size(0)); int _9101 = mosek::fusion::p_Set::_get_impl(_5006->shape())->nd; for (int _5008 = _9100;_5008<_9101;++_5008){ if (((int)1 != _5006->shape()->dim(_5008))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9102 = (int)0; int _9103 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5005)->dims)->size(0)); for (int _5009 = _9102;_5009<_9103;++_5009){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5005)->dims)(_5009)) != _5006->shape()->dim(_5009))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5010 = _5006->eval(); return ::mosek::fusion::p_Expr::dotmul_(mosek::fusion::p_NDSparseArray::_get_impl(_5005)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5005)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5010)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5010)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5010)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5010)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5010)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5010)->x,mosek::fusion::p_FlatExpr::_get_impl(_5010)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5011,monty::rc_ptr< ::mosek::fusion::Variable > _5012){ if ((mosek::fusion::p_Set::_get_impl(_5012->shape())->nd != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5011)->dims)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}int _9104 = (int)0; int _9105 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5011)->dims)->size(0)); for (int _5013 = _9104;_5013<_9105;++_5013){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5011)->dims)(_5013)) != _5012->shape()->dim(_5013))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}return ::mosek::fusion::p_Expr::dotmul_(mosek::fusion::p_NDSparseArray::_get_impl(_5011)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5011)->cof,_5012,_5012->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dotmul_( std::shared_ptr< monty::ndarray< long long,1 > > _5014,std::shared_ptr< monty::ndarray< double,1 > > _5015,monty::rc_ptr< ::mosek::fusion::Variable > _5016,monty::rc_ptr< ::mosek::fusion::Set > _5017){ int _5018 = (int)((_5014)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5019 = ::mosek::fusion::Utils::Tools::range(((long long)((_5014)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _5020 = ::mosek::fusion::Utils::Tools::arraycopy(_5014); std::shared_ptr< monty::ndarray< double,1 > > _5021 = ::mosek::fusion::Utils::Tools::arraycopy(_5015); std::shared_ptr< monty::ndarray< double,1 > > _5022 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5019,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5016}),_5020,_5021,_5022,_5017,_5014); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dotmul_( std::shared_ptr< monty::ndarray< long long,1 > > _5023,std::shared_ptr< monty::ndarray< double,1 > > _5024,std::shared_ptr< monty::ndarray< long long,1 > > _5025,std::shared_ptr< monty::ndarray< long long,1 > > _5026,std::shared_ptr< monty::ndarray< double,1 > > _5027,std::shared_ptr< monty::ndarray< double,1 > > _5028,std::shared_ptr< monty::ndarray< long long,1 > > _5029,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5030,monty::rc_ptr< ::mosek::fusion::Set > _5031){ int _5032 = (int)((_5023)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5033 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5029) return (_5029); else return (::mosek::fusion::Utils::Tools::range((long long)((int)0),((long long)((_5025)->size(0)) - (int)1))); })(); int _5034 = (int)((_5033)->size(0)); long long _5035 = (long long)0; int _5036 = (int)0; { int _5037 = (int)0; int _5038 = (int)0; while (((_5037 < _5032) && (_5038 < _5034))) { if ((((*_5023)(_5037)) < ((*_5033)(_5038)))){ ( ++ _5037 ); }else if ((((*_5023)(_5037)) > ((*_5033)(_5038)))){ ( ++ _5038 ); }else { (_5035 += (((*_5025)((_5038 + (int)1))) - ((*_5025)(_5038)))); ( ++ _5036 ); ( ++ _5037 ); ( ++ _5038 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5039 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5035))); std::shared_ptr< monty::ndarray< double,1 > > _5040 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5035))); std::shared_ptr< monty::ndarray< long long,1 > > _5041 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5036 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5042 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5036))); std::shared_ptr< monty::ndarray< double,1 > > _5043 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _5028) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5036)))); })(); { { int _5044 = (int)0; int _5045 = (int)0; int _5046 = (int)0; int _5047 = (int)0; while (((_5044 < _5032) && (_5045 < _5034))) { if ((((*_5023)(_5044)) < ((*_5033)(_5045)))){ ( ++ _5044 ); }else if ((((*_5023)(_5044)) > ((*_5033)(_5045)))){ ( ++ _5045 ); }else { long long _9106 = ((*_5025)(_5045)); long long _9107 = ((*_5025)((_5045 + (int)1))); for (long long _5048 = _9106;_5048<_9107;++_5048){ (((*_5039)(_5046)) = ((*_5026)(_5048))); (((*_5040)(_5046)) = (((*_5027)(_5048)) * ((*_5024)(_5044)))); ( ++ _5046 ); }(((*_5041)((_5047 + (int)1))) = ((((*_5041)(_5047)) + ((*_5025)((_5045 + (int)1)))) - ((*_5025)(_5045)))); (((*_5042)(_5047)) = ((*_5033)(_5045))); ( ++ _5047 ); ( ++ _5044 ); ( ++ _5045 ); }}}if (_5028){ int _5049 = (int)0; int _5050 = (int)0; int _5051 = (int)0; while (((_5049 < _5032) && (_5050 < _5034))) { if ((((*_5023)(_5049)) < ((*_5033)(_5050)))){ ( ++ _5049 ); }else if ((((*_5023)(_5049)) > ((*_5033)(_5050)))){ ( ++ _5050 ); }else { (((*_5043)(_5051)) += (((*_5024)(_5049)) * ((*_5028)(_5050)))); ( ++ _5049 ); ( ++ _5050 ); ( ++ _5051 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_5041,_5030,_5039,_5040,_5043,_5031,([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_5042)->size(0)) < mosek::fusion::p_Set::_get_impl(_5031)->size)) return (_5042); else return (nullptr); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5052,    monty::rc_ptr< ::mosek::fusion::Expression > _5053) { return mosek::fusion::p_Expr::mul(_5052,_5053); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Matrix > _5052,monty::rc_ptr< ::mosek::fusion::Expression > _5053){ if ((! _5052 || ! _5053)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _5054 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5055 = _5053->eval(); int _5056 = _5052->numRows(); int _5057 = _5052->numColumns(); monty::rc_ptr< ::mosek::fusion::Set > _5058 = nullptr; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape->dim((int)0) == (int)1))){ (_5054 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5055)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5055)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5055)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5055)->x,_5052)); }else { int _5059; int _5060; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape->dim((int)0) == _5057))){ (_5060 = (int)1); (_5059 = mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape->dim((int)0)); (_5058 = ::mosek::fusion::p_IntSet::_new_IntSet(_5056)); }else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape->dim((int)0) == _5057))){ (_5059 = mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape->dim((int)0)); (_5060 = mosek::fusion::p_FlatExpr::_get_impl(_5055)->shape->dim((int)1)); (_5058 = ::mosek::fusion::p_NDSet::_new_NDSet(_5056,_5060)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional, and dimensions must match for multiplication"));}if ((! mosek::fusion::p_FlatExpr::_get_impl(_5055)->inst && (! _5052->isSparse()))){ (_5054 = ::mosek::fusion::p_Expr::mul_DMatrix_2DDExpr(mosek::fusion::p_FlatExpr::_get_impl(_5055)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5055)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5055)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5055)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5055)->x,_5058,_5059,_5060,_5052->getDataAsArray(),_5056,_5057)); }else { long long _5061 = _5052->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5062 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5061))); std::shared_ptr< monty::ndarray< int,1 > > _5063 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5061))); std::shared_ptr< monty::ndarray< double,1 > > _5064 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5061))); _5052->getDataAsTriplets(_5062,_5063,_5064); std::shared_ptr< monty::ndarray< long long,1 > > _5065 = mosek::fusion::p_FlatExpr::_get_impl(_5055)->inst; if (! _5065){ (_5065 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_5055)->ptrb)->size(0)) - (int)1))); }else {}(_5054 = ::mosek::fusion::p_Expr::mul_SMatrix_2DSExpr(mosek::fusion::p_FlatExpr::_get_impl(_5055)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5055)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5055)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5055)->bfix,_5065,mosek::fusion::p_FlatExpr::_get_impl(_5055)->x,_5058,_5059,_5060,_5062,_5063,_5064,_5056,_5057)); }}return _5054; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5066,    monty::rc_ptr< ::mosek::fusion::Matrix > _5067) { return mosek::fusion::p_Expr::mul(_5066,_5067); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _5066,monty::rc_ptr< ::mosek::fusion::Matrix > _5067){ if ((! _5067 || ! _5066)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _5068 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5069 = _5066->eval(); int _5070 = _5067->numRows(); int _5071 = _5067->numColumns(); if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape->dim((int)0) == (int)1))){ (_5068 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5069)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5069)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5069)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5069)->x,_5067)); }else { monty::rc_ptr< ::mosek::fusion::Set > _5072 = nullptr; int _5073; int _5074; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape->dim((int)0) == _5070))){ (_5073 = (int)1); (_5074 = mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape->dim((int)0)); (_5072 = ::mosek::fusion::p_IntSet::_new_IntSet(_5071)); }else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape->dim((int)1) == _5070))){ (_5073 = mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape->dim((int)0)); (_5074 = mosek::fusion::p_FlatExpr::_get_impl(_5069)->shape->dim((int)1)); (_5072 = ::mosek::fusion::p_NDSet::_new_NDSet(_5073,_5071)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional, and dimensions must match for multiplication"));}if ((! mosek::fusion::p_FlatExpr::_get_impl(_5069)->inst && (! _5067->isSparse()))){ (_5068 = ::mosek::fusion::p_Expr::mul_2DDExpr_DMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5069)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5069)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5069)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5069)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5069)->x,_5072,_5073,_5074,_5067->getDataAsArray(),_5070,_5071)); }else { long long _5075 = _5067->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5076 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5075))); std::shared_ptr< monty::ndarray< int,1 > > _5077 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5075))); std::shared_ptr< monty::ndarray< double,1 > > _5078 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5075))); _5067->getDataAsTriplets(_5076,_5077,_5078); std::shared_ptr< monty::ndarray< long long,1 > > _5079 = mosek::fusion::p_FlatExpr::_get_impl(_5069)->inst; if (! _5079){ (_5079 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_5069)->ptrb)->size(0)) - (int)1))); }else {}(_5068 = ::mosek::fusion::p_Expr::mul_2DSExpr_SMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5069)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5069)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5069)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5069)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5069)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5069)->x,_5072,_5073,_5074,_5076,_5077,_5078,_5070,_5071)); }}return _5068; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5080,    std::shared_ptr< monty::ndarray< double,1 > > _5081) { return mosek::fusion::p_Expr::mul(_5080,_5081); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _5080,std::shared_ptr< monty::ndarray< double,1 > > _5081){ if ((! _5081 || ! _5080)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _5082 = nullptr; int _5083 = (int)((_5081)->size(0)); int _5084 = (int)1; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5085 = _5080->eval(); int _5086; int _5087; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0) == (int)1))){ (_5082 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5085)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5085)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5085)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5085)->x,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix((int)((_5081)->size(0)),(int)1,_5081)))); }else { monty::rc_ptr< ::mosek::fusion::Set > _5088 = nullptr; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape)->nd == (int)1)){ (_5088 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); (_5087 = mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0)); (_5086 = (int)1); }else if ((mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->realnd() == (int)2)){ (_5088 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0))); (_5086 = mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)0)); (_5087 = mosek::fusion::p_FlatExpr::_get_impl(_5085)->shape->dim((int)1)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional"));}if ((_5087 != _5083)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_5085)->inst){ (_5082 = ::mosek::fusion::p_Expr::mul_2DDExpr_DMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5085)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5085)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5085)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5085)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5085)->x,_5088,_5086,_5087,_5081,_5083,_5084)); }else { (_5082 = ::mosek::fusion::p_Expr::mul_2DSExpr_SMatrix(mosek::fusion::p_FlatExpr::_get_impl(_5085)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5085)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5085)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5085)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5085)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5085)->x,_5088,_5086,_5087,::mosek::fusion::Utils::Tools::range((int)0,_5083),::mosek::fusion::Utils::Tools::makevector((int)0,_5083),_5081,_5083,_5084)); }}return _5082; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5089,    monty::rc_ptr< ::mosek::fusion::Expression > _5090) { return mosek::fusion::p_Expr::mul(_5089,_5090); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,1 > > _5089,monty::rc_ptr< ::mosek::fusion::Expression > _5090){ if ((! _5089 || ! _5090)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}int _5091 = (int)1; int _5092 = (int)((_5089)->size(0)); monty::rc_ptr< ::mosek::fusion::Expression > _5093 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _5094 = _5090->eval(); int _5095; int _5096; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape->dim((int)0) == (int)1))){ (_5093 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_5094)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5094)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5094)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5094)->x,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix((int)1,(int)((_5089)->size(0)),_5089)))); }else { monty::rc_ptr< ::mosek::fusion::Set > _5097 = nullptr; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape)->nd == (int)1)){ (_5096 = (int)1); (_5095 = mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape->dim((int)0)); (_5097 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape)->nd == (int)2)){ (_5097 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape->dim((int)1))); (_5095 = mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape->dim((int)0)); (_5096 = mosek::fusion::p_FlatExpr::_get_impl(_5094)->shape->dim((int)1)); }else { throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}if ((_5095 != _5092)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_5094)->inst){ (_5093 = ::mosek::fusion::p_Expr::mul_DMatrix_2DDExpr(mosek::fusion::p_FlatExpr::_get_impl(_5094)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5094)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5094)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5094)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5094)->x,_5097,_5095,_5096,_5089,_5091,_5092)); }else { (_5093 = ::mosek::fusion::p_Expr::mul_SMatrix_2DSExpr(mosek::fusion::p_FlatExpr::_get_impl(_5094)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5094)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5094)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5094)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5094)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5094)->x,_5097,_5095,_5096,::mosek::fusion::Utils::Tools::makevector((int)0,_5092),::mosek::fusion::Utils::Tools::range((int)0,_5092),_5089,_5091,_5092)); }}return _5093; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5098,    monty::rc_ptr< ::mosek::fusion::Expression > _5099) { return mosek::fusion::p_Expr::mul(_5098,_5099); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( double _5098,monty::rc_ptr< ::mosek::fusion::Expression > _5099){ if (! _5099){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5100 = _5099->eval(); int _9108 = (int)0; int _9109 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5100)->cof)->size(0)); for (int _5101 = _9108;_5101<_9109;++_5101){ (((*mosek::fusion::p_FlatExpr::_get_impl(_5100)->cof)(_5101)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5100)->cof)(_5101)) * _5098)); }if (mosek::fusion::p_FlatExpr::_get_impl(_5100)->bfix){ int _9110 = (int)0; int _9111 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5100)->bfix)->size(0)); for (int _5102 = _9110;_5102<_9111;++_5102){ (((*mosek::fusion::p_FlatExpr::_get_impl(_5100)->bfix)(_5102)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5100)->bfix)(_5102)) * _5098)); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_5100)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5100)->x,mosek::fusion::p_FlatExpr::_get_impl(_5100)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5100)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5100)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5100)->shape,mosek::fusion::p_FlatExpr::_get_impl(_5100)->inst,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5103,    double _5104) { return mosek::fusion::p_Expr::mul(_5103,_5104); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _5103,double _5104){ if (! _5103){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(_5104,_5103); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_SMatrix_2DSExpr( std::shared_ptr< monty::ndarray< long long,1 > > _5105,std::shared_ptr< monty::ndarray< long long,1 > > _5106,std::shared_ptr< monty::ndarray< double,1 > > _5107,std::shared_ptr< monty::ndarray< double,1 > > _5108,std::shared_ptr< monty::ndarray< long long,1 > > _5109,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5110,monty::rc_ptr< ::mosek::fusion::Set > _5111,int _5112,int _5113,std::shared_ptr< monty::ndarray< int,1 > > _5114,std::shared_ptr< monty::ndarray< int,1 > > _5115,std::shared_ptr< monty::ndarray< double,1 > > _5116,int _5117,int _5118){ monty::rc_ptr< ::mosek::fusion::Expression > _5119 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _5120 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9112; for (int _5123=(int)0, _9113=(int)((_5109)->size(0)); _5123 < _9113;++_5123)_9112.push_back((int)(((*_5109)(_5123)) / _5113)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9112.size()),_9112.begin(),_9112.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _5121 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9114; for (int _5124=(int)0, _9115=(int)((_5109)->size(0)); _5124 < _9115;++_5124)_9114.push_back((int)(((*_5109)(_5124)) % _5113)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9114.size()),_9114.begin(),_9114.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5122 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5109)->size(0))); int _5125 = (int)((_5114)->size(0)); int _5126 = (int)((_5109)->size(0)); int _5127 = _5117; int _5128 = _5113; ::mosek::fusion::p_CommonTools::argQsort(_5122,_5121,_5120,(long long)0,(long long)((_5109)->size(0))); int _5129 = (int)0; long long _5130 = (long long)0; { { int _5131 = (int)0; for (;(_5131 < _5125);){ int _5132 = ((*_5114)(_5131)); int _5133 = (_5131 + (int)1); while (((_5133 < _5125) && (_5132 == ((*_5114)(_5133))))) { ( ++ _5133 ); }{ int _5134 = (int)0; for (;(_5134 < _5126);){ int _5135 = ((*_5121)(((*_5122)(_5134)))); int _5136 = (_5134 + (int)1); while (((_5136 < _5126) && (((*_5121)(((*_5122)(_5136)))) == _5135))) { ( ++ _5136 ); }long long _5137 = _5130; int _5138 = (int)0; int _5139 = _5131; int _5140 = _5134; while (((_5139 < _5133) && (_5140 < _5136))) { if ((((*_5115)(_5139)) < ((*_5120)(((*_5122)(_5140)))))){ ( ++ _5139 ); }else if ((((*_5115)(_5139)) > ((*_5120)(((*_5122)(_5140)))))){ ( ++ _5140 ); }else { (_5137 = (_5137 + (((*_5105)((((*_5122)(_5140)) + (int)1))) - ((*_5105)(((*_5122)(_5140))))))); ( ++ _5139 ); ( ++ _5140 ); ( ++ _5138 ); }}if ((_5138 > (int)0)){ ( ++ _5129 ); (_5130 = _5137); }else {}(_5134 = _5136); }}(_5131 = _5133); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5141 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5129))); std::shared_ptr< monty::ndarray< long long,1 > > _5142 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5129 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5143 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5130))); std::shared_ptr< monty::ndarray< double,1 > > _5144 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5130))); std::shared_ptr< monty::ndarray< double,1 > > _5145 = nullptr; { int _5146 = (int)0; long long _5147 = (long long)0; { int _5148 = (int)0; for (;(_5148 < _5125);){ int _5149 = ((*_5114)(_5148)); int _5150 = (_5148 + (int)1); while (((_5150 < _5125) && (_5149 == ((*_5114)(_5150))))) { ( ++ _5150 ); }{ int _5151 = (int)0; for (;(_5151 < _5126);){ int _5152 = ((*_5121)(((*_5122)(_5151)))); int _5153 = (_5151 + (int)1); while (((_5153 < _5126) && (((*_5121)(((*_5122)(_5153)))) == _5152))) { ( ++ _5153 ); }long long _5154 = _5147; int _5155 = (int)0; int _5156 = _5148; int _5157 = _5151; while (((_5156 < _5150) && (_5157 < _5153))) { if ((((*_5115)(_5156)) < ((*_5120)(((*_5122)(_5157)))))){ ( ++ _5156 ); }else if ((((*_5115)(_5156)) > ((*_5120)(((*_5122)(_5157)))))){ ( ++ _5157 ); }else { ( ++ _5155 ); long long _9116 = ((*_5105)(((*_5122)(_5157)))); long long _9117 = ((*_5105)((((*_5122)(_5157)) + (int)1))); for (long long _5158 = _9116;_5158<_9117;++_5158){ (((*_5143)(_5154)) = ((*_5106)(_5158))); (((*_5144)(_5154)) = (((*_5107)(_5158)) * ((*_5116)(_5156)))); ( ++ _5154 ); }( ++ _5156 ); ( ++ _5157 ); }}if ((_5155 > (int)0)){ (((*_5141)(_5146)) = (((long long)_5149 * _5113) + (long long)_5152)); (((*_5142)((_5146 + (int)1))) = _5154); ( ++ _5146 ); (_5147 = _5154); }else {}(_5151 = _5153); }}(_5148 = _5150); }}}if (_5108){ (_5145 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5129)))); int _5159 = (int)0; { int _5160 = (int)0; for (;(_5160 < _5125);){ int _5161 = ((*_5114)(_5160)); int _5162 = (_5160 + (int)1); while (((_5162 < _5125) && (_5161 == ((*_5114)(_5162))))) { ( ++ _5162 ); }{ int _5163 = (int)0; for (;(_5163 < _5126);){ int _5164 = ((*_5121)(((*_5122)(_5163)))); int _5165 = (_5163 + (int)1); while (((_5165 < _5126) && (((*_5121)(((*_5122)(_5165)))) == _5164))) { ( ++ _5165 ); }int _5166 = (int)0; double _5167 = 0.0; int _5168 = _5160; int _5169 = _5163; while (((_5168 < _5162) && (_5169 < _5165))) { if ((((*_5115)(_5168)) < ((*_5120)(((*_5122)(_5169)))))){ ( ++ _5168 ); }else if ((((*_5115)(_5168)) > ((*_5120)(((*_5122)(_5169)))))){ ( ++ _5169 ); }else { (_5167 = (_5167 + (((*_5108)(((*_5122)(_5169)))) * ((*_5116)(_5168))))); ( ++ _5166 ); ( ++ _5168 ); ( ++ _5169 ); }}if ((_5166 > (int)0)){ (((*_5145)(_5159)) = _5167); ( ++ _5159 ); }else {}(_5163 = _5165); }}(_5160 = _5162); }}}else {}if (((int)((_5141)->size(0)) == (_5127 * _5128))){ (_5141 = nullptr); }else {}(_5119 = ::mosek::fusion::p_Expr::_new_Expr(_5142,_5110,_5143,_5144,_5145,_5111,_5141)); return _5119; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_2DSExpr_SMatrix( std::shared_ptr< monty::ndarray< long long,1 > > _5170,std::shared_ptr< monty::ndarray< long long,1 > > _5171,std::shared_ptr< monty::ndarray< double,1 > > _5172,std::shared_ptr< monty::ndarray< double,1 > > _5173,std::shared_ptr< monty::ndarray< long long,1 > > _5174,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5175,monty::rc_ptr< ::mosek::fusion::Set > _5176,int _5177,int _5178,std::shared_ptr< monty::ndarray< int,1 > > _5179,std::shared_ptr< monty::ndarray< int,1 > > _5180,std::shared_ptr< monty::ndarray< double,1 > > _5181,int _5182,int _5183){ monty::rc_ptr< ::mosek::fusion::Expression > _5184 = nullptr; int _5185 = _5177; int _5186 = _5183; long long _5187 = (long long)((_5181)->size(0)); long long _5188 = (long long)((_5174)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5189 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5179)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_5189,_5180,_5179,(long long)0,(long long)((_5179)->size(0))); int _5190 = (int)0; long long _5191 = (long long)0; { { int _5192 = (int)0; for (;(_5192 < _5188);){ int _5193 = _5192; long long _5194 = (((*_5174)(_5192)) / _5178); while (((_5193 < (int)((_5174)->size(0))) && (_5194 == (((*_5174)(_5193)) / _5178)))) { ( ++ _5193 ); }{ int _5195 = (int)0; for (;(_5195 < _5187);){ int _5196 = _5195; int _5197 = ((*_5180)(((*_5189)(_5195)))); while (((_5196 < _5187) && (((*_5180)(((*_5189)(_5196)))) == _5197))) { ( ++ _5196 ); }int _5198 = _5192; int _5199 = _5195; long long _5200 = _5191; while (((_5198 < _5193) && (_5199 < _5196))) { if (((((*_5174)(_5198)) % _5178) < ((*_5179)(((*_5189)(_5199)))))){ ( ++ _5198 ); }else if (((((*_5174)(_5198)) % _5178) > ((*_5179)(((*_5189)(_5199)))))){ ( ++ _5199 ); }else { (_5200 = (_5200 + (((*_5170)((_5198 + (int)1))) - ((*_5170)(_5198))))); ( ++ _5198 ); ( ++ _5199 ); }}if ((_5200 > _5191)){ (_5191 = _5200); ( ++ _5190 ); }else {}(_5195 = _5196); }}(_5192 = _5193); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5201 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5190 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5202 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5190))); std::shared_ptr< monty::ndarray< long long,1 > > _5203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5191))); std::shared_ptr< monty::ndarray< double,1 > > _5204 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5191))); std::shared_ptr< monty::ndarray< double,1 > > _5205 = nullptr; { int _5206 = (int)0; long long _5207 = (long long)0; { int _5208 = (int)0; for (;(_5208 < _5188);){ int _5209 = _5208; long long _5210 = (((*_5174)(_5208)) / _5178); while (((_5209 < (int)((_5174)->size(0))) && (_5210 == (((*_5174)(_5209)) / _5178)))) { ( ++ _5209 ); }{ int _5211 = (int)0; for (;(_5211 < _5187);){ int _5212 = _5211; int _5213 = ((*_5180)(((*_5189)(_5211)))); while (((_5212 < _5187) && (((*_5180)(((*_5189)(_5212)))) == _5213))) { ( ++ _5212 ); }int _5214 = _5208; int _5215 = _5211; long long _5216 = _5207; int _5217 = (int)0; while (((_5214 < _5209) && (_5215 < _5212))) { if (((((*_5174)(_5214)) % _5178) < ((*_5179)(((*_5189)(_5215)))))){ ( ++ _5214 ); }else if (((((*_5174)(_5214)) % _5178) > ((*_5179)(((*_5189)(_5215)))))){ ( ++ _5215 ); }else { double _5218 = ((*_5181)(((*_5189)(_5215)))); long long _9118 = ((*_5170)(_5214)); long long _9119 = ((*_5170)((_5214 + (int)1))); for (long long _5219 = _9118;_5219<_9119;++_5219){ (((*_5203)(_5216)) = ((*_5171)(_5219))); (((*_5204)(_5216)) = (_5218 * ((*_5172)(_5219)))); ( ++ _5216 ); ( ++ _5217 ); }( ++ _5214 ); ( ++ _5215 ); }}if ((_5217 > (int)0)){ (_5207 = _5216); (((*_5201)((_5206 + (int)1))) = _5216); (((*_5202)(_5206)) = (((long long)_5210 * _5186) + _5213)); ( ++ _5206 ); }else {}(_5211 = _5212); }}(_5208 = _5209); }}}if (_5173){ (_5205 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5190)))); int _5220 = (int)0; { int _5221 = (int)0; for (;(_5221 < _5188);){ int _5222 = _5221; long long _5223 = (((*_5174)(_5221)) / _5178); while (((_5222 < (int)((_5174)->size(0))) && (_5223 == (((*_5174)(_5222)) / _5178)))) { ( ++ _5222 ); }{ int _5224 = (int)0; for (;(_5224 < _5187);){ int _5225 = _5224; int _5226 = ((*_5180)(((*_5189)(_5224)))); while (((_5225 < _5187) && (((*_5180)(((*_5189)(_5225)))) == _5226))) { ( ++ _5225 ); }int _5227 = _5221; int _5228 = _5224; int _5229 = (int)0; double _5230 = 0.0; while (((_5227 < _5222) && (_5228 < _5225))) { if (((((*_5174)(_5227)) % _5178) < ((*_5179)(((*_5189)(_5228)))))){ ( ++ _5227 ); }else if (((((*_5174)(_5227)) % _5178) > ((*_5179)(((*_5189)(_5228)))))){ ( ++ _5228 ); }else { (_5230 = (_5230 + (((*_5173)(_5227)) * ((*_5181)(((*_5189)(_5228))))))); ( ++ _5229 ); ( ++ _5227 ); ( ++ _5228 ); }}if ((_5229 > (int)0)){ (((*_5205)(_5220)) = _5230); ( ++ _5220 ); }else {}(_5224 = _5225); }}(_5221 = _5222); }}}else {}if (((int)((_5202)->size(0)) == (_5185 * _5186))){ (_5202 = nullptr); }else {}(_5184 = ::mosek::fusion::p_Expr::_new_Expr(_5201,_5175,_5203,_5204,_5205,_5176,_5202)); return _5184; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_DMatrix_2DDExpr( std::shared_ptr< monty::ndarray< long long,1 > > _5231,std::shared_ptr< monty::ndarray< long long,1 > > _5232,std::shared_ptr< monty::ndarray< double,1 > > _5233,std::shared_ptr< monty::ndarray< double,1 > > _5234,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5235,monty::rc_ptr< ::mosek::fusion::Set > _5236,int _5237,int _5238,std::shared_ptr< monty::ndarray< double,1 > > _5239,int _5240,int _5241){ monty::rc_ptr< ::mosek::fusion::Expression > _5242; int _5243 = _5240; int _5244 = _5238; long long _5245 = ((long long)_5243 * (long long)_5244); std::shared_ptr< monty::ndarray< long long,1 > > _5246 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5245 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5247 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5232)->size(0)) * _5240)))); std::shared_ptr< monty::ndarray< double,1 > > _5248 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5232)->size(0)) * _5240)))); std::shared_ptr< monty::ndarray< double,1 > > _5249 = nullptr; { long long _5250 = (long long)0; int _5251 = (int)0; int _9120 = (int)0; int _9121 = _5240; for (int _5252 = _9120;_5252<_9121;++_5252){ int _9122 = (int)0; int _9123 = _5238; for (int _5253 = _9122;_5253<_9123;++_5253){ int _9124 = (int)0; int _9125 = _5237; for (int _5254 = _9124;_5254<_9125;++_5254){ double _5255 = ((*_5239)(((_5241 * _5252) + _5254))); long long _9126 = ((*_5231)(((_5254 * _5238) + _5253))); long long _9127 = ((*_5231)((((_5254 * _5238) + _5253) + (int)1))); for (long long _5256 = _9126;_5256<_9127;++_5256){ (((*_5248)(_5250)) = (_5255 * ((*_5233)(_5256)))); (((*_5247)(_5250)) = ((*_5232)(_5256))); ( ++ _5250 ); }}(((*_5246)((_5251 + (int)1))) = _5250); ( ++ _5251 ); }}}if (_5234){ int _5257 = (int)0; (_5249 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5245)))); int _9128 = (int)0; int _9129 = _5240; for (int _5258 = _9128;_5258<_9129;++_5258){ int _9130 = (int)0; int _9131 = _5238; for (int _5259 = _9130;_5259<_9131;++_5259){ int _9132 = (int)0; int _9133 = _5237; for (int _5260 = _9132;_5260<_9133;++_5260){ (((*_5249)(_5257)) = (((*_5249)(_5257)) + (((*_5234)(((_5260 * _5238) + _5259))) * ((*_5239)(((_5241 * _5258) + _5260)))))); }( ++ _5257 ); }}}else {}(_5242 = ::mosek::fusion::p_Expr::_new_Expr(_5246,_5235,_5247,_5248,_5249,_5236,nullptr)); return _5242; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_2DDExpr_DMatrix( std::shared_ptr< monty::ndarray< long long,1 > > _5261,std::shared_ptr< monty::ndarray< long long,1 > > _5262,std::shared_ptr< monty::ndarray< double,1 > > _5263,std::shared_ptr< monty::ndarray< double,1 > > _5264,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5265,monty::rc_ptr< ::mosek::fusion::Set > _5266,int _5267,int _5268,std::shared_ptr< monty::ndarray< double,1 > > _5269,int _5270,int _5271){ monty::rc_ptr< ::mosek::fusion::Expression > _5272; int _5273 = _5267; int _5274 = _5271; std::shared_ptr< monty::ndarray< long long,1 > > _5275 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((_5267 * _5271) + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5276 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5277 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5262)->size(0)) * _5271)))); std::shared_ptr< monty::ndarray< double,1 > > _5278 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5262)->size(0)) * _5271)))); std::shared_ptr< monty::ndarray< double,1 > > _5279 = nullptr; { int _5280 = (int)0; int _5281 = (int)0; int _9134 = (int)0; int _9135 = _5273; for (int _5282 = _9134;_5282<_9135;++_5282){ int _9136 = (int)0; int _9137 = _5274; for (int _5283 = _9136;_5283<_9137;++_5283){ int _5284 = (_5282 * _5268); (((*_5275)((_5281 + (int)1))) = ((*_5275)(_5281))); int _9138 = (int)0; int _9139 = _5270; for (int _5285 = _9138;_5285<_9139;++_5285){ (((*_5275)((_5281 + (int)1))) = (((*_5275)((_5281 + (int)1))) + (((*_5261)(((_5284 + _5285) + (int)1))) - ((*_5261)((_5284 + _5285)))))); double _5286 = ((*_5269)(((_5271 * _5285) + _5283))); long long _9140 = ((*_5261)((_5284 + _5285))); long long _9141 = ((*_5261)(((_5284 + _5285) + (int)1))); for (long long _5287 = _9140;_5287<_9141;++_5287){ (((*_5277)(_5280)) = ((*_5262)(_5287))); (((*_5278)(_5280)) = (((*_5263)(_5287)) * _5286)); ( ++ _5280 ); }}( ++ _5281 ); }}}if (_5264){ (_5279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5273 * _5274))))); int _5288 = (int)0; int _9142 = (int)0; int _9143 = _5273; for (int _5289 = _9142;_5289<_9143;++_5289){ int _9144 = (int)0; int _9145 = _5274; for (int _5290 = _9144;_5290<_9145;++_5290){ int _5291 = (_5289 * _5268); int _9146 = (int)0; int _9147 = _5270; for (int _5292 = _9146;_5292<_9147;++_5292){ (((*_5279)(_5288)) += (((*_5264)((_5291 + _5292))) * ((*_5269)(((_5271 * _5292) + _5290))))); }( ++ _5288 ); }}}else {}(_5272 = ::mosek::fusion::p_Expr::_new_Expr(_5275,_5265,_5277,_5278,_5279,_5266,_5276)); return _5272; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_0DExpr_Matrix( std::shared_ptr< monty::ndarray< long long,1 > > _5293,std::shared_ptr< monty::ndarray< double,1 > > _5294,std::shared_ptr< monty::ndarray< double,1 > > _5295,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5296,monty::rc_ptr< ::mosek::fusion::Matrix > _5297){ monty::rc_ptr< ::mosek::fusion::Expression > _5298 = nullptr; int _5299 = _5297->numRows(); int _5300 = _5297->numColumns(); long long _5301 = _5297->numNonzeros(); std::shared_ptr< monty::ndarray< double,1 > > _5302; std::shared_ptr< monty::ndarray< int,1 > > _5303 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _5304 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5305 = ::mosek::fusion::Utils::Tools::range((long long)0,((_5301 * (long long)((_5293)->size(0))) + (int)1),(long long)((_5293)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5306 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5301 * (int)((_5293)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _5307 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5301 * (int)((_5293)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _5308 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5309 = nullptr; if ((! _5297->isSparse())){ (_5302 = _5297->getDataAsArray()); }else { (_5303 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5301)))); (_5304 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5301)))); (_5302 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5301)))); (_5309 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5301)))); _5297->getDataAsTriplets(_5303,_5304,_5302); int _9148 = (int)0; int _9149 = (int)((_5303)->size(0)); for (int _5310 = _9148;_5310<_9149;++_5310){ (((*_5309)(_5310)) = (((long long)((*_5303)(_5310)) * _5300) + ((*_5304)(_5310)))); }}{ int _5311 = (int)0; long long _9150 = (long long)0; long long _9151 = _5301; for (long long _5312 = _9150;_5312<_9151;++_5312){ int _9152 = (int)0; int _9153 = (int)((_5293)->size(0)); for (int _5313 = _9152;_5313<_9153;++_5313){ (((*_5306)(_5311)) = ((*_5293)(_5313))); (((*_5307)(_5311)) = (((*_5302)(_5312)) * ((*_5302)(_5312)))); ( ++ _5311 ); }}}if (_5295){ (_5308 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5301)))); long long _9154 = (long long)0; long long _9155 = _5301; for (long long _5314 = _9154;_5314<_9155;++_5314){ (((*_5308)(_5314)) = (((*_5302)(_5314)) * ((*_5295)((int)0)))); }}else {}(_5298 = ::mosek::fusion::p_Expr::_new_Expr(_5305,_5296,_5306,_5307,_5308,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_5299,_5300)),nullptr)); return _5298; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5315,    std::shared_ptr< monty::ndarray< double,2 > > _5316) { return mosek::fusion::p_Expr::mul(_5315,_5316); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5315,std::shared_ptr< monty::ndarray< double,2 > > _5316){ if ((! _5316 || ! _5315)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}if (((int)((_5316)->size(0)) == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5317 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< long long,1 > > _5318 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _5319 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); return ::mosek::fusion::p_Expr::_new_Expr(_5317,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5315}),_5318,_5319,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { return ::mosek::fusion::p_Expr::mul(_5315,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5316))); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5320,    monty::rc_ptr< ::mosek::fusion::Variable > _5321) { return mosek::fusion::p_Expr::mul(_5320,_5321); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,2 > > _5320,monty::rc_ptr< ::mosek::fusion::Variable > _5321){ if ((! _5320 || ! _5321)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5320)),_5321); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5322,    double _5323) { return mosek::fusion::p_Expr::mul(_5322,_5323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5322,double _5323){ if (! _5322){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(_5323,_5322); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5324,    monty::rc_ptr< ::mosek::fusion::Variable > _5325) { return mosek::fusion::p_Expr::mul(_5324,_5325); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( double _5324,monty::rc_ptr< ::mosek::fusion::Variable > _5325){ if (! _5325){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}double _5326 = _5324; monty::rc_ptr< ::mosek::fusion::Variable > _5327 = _5325; std::shared_ptr< monty::ndarray< long long,1 > > _5328 = ::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(_5327->shape())->size + (long long)1)); std::shared_ptr< monty::ndarray< double,1 > > _5329 = ::mosek::fusion::Utils::Tools::makevector(_5326,(int)mosek::fusion::p_Set::_get_impl(_5327->shape())->size); std::shared_ptr< monty::ndarray< long long,1 > > _5330 = ::mosek::fusion::Utils::Tools::range((long long)0,mosek::fusion::p_Set::_get_impl(_5327->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _5331 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5328,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5325}),_5330,_5329,_5331,_5327->shape(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5332,    monty::rc_ptr< ::mosek::fusion::Variable > _5333) { return mosek::fusion::p_Expr::mul(_5332,_5333); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,1 > > _5332,monty::rc_ptr< ::mosek::fusion::Variable > _5333){ if ((! _5333 || ! _5332)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _5334 = _5332; monty::rc_ptr< ::mosek::fusion::Variable > _5335 = _5333; if (((mosek::fusion::p_Set::_get_impl(_5335->shape())->size == (int)1) || (mosek::fusion::p_Set::_get_impl(_5335->shape())->nd == (int)1))){ return ::mosek::fusion::p_Expr::mul(_5335,_5334); }else if (((mosek::fusion::p_Set::_get_impl(_5333->shape())->nd == (int)1) && (_5333->shape()->dim((int)0) == (int)((_5332)->size(0))))){ return ::mosek::fusion::p_Expr::dot(_5333,_5332); }else if ((mosek::fusion::p_Set::_get_impl(_5335->shape())->nd == (int)2)){ if ((_5335->shape()->dim((int)0) != (int)((_5334)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5336 = _5335->shape()->dim((int)0); long long _5337 = _5335->shape()->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _5338 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9156; for (long long _5339=(long long)0, _9157=((_5337 + (int)1) * _5336), _9158=_5336; _5339 < _9157;_5339 += _9158)_9156.push_back(_5339); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9156.size()),_9156.begin(),_9156.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5340 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5335->shape())->size))); long long _9159 = (long long)0; long long _9160 = _5337; for (long long _5341 = _9159;_5341<_9160;++_5341){ ::mosek::fusion::Utils::Tools::arraycopy(_5334,(long long)0,_5340,(_5341 * _5336),_5336); }std::shared_ptr< monty::ndarray< long long,1 > > _5342 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9161; for (long long _5343=(int)0, _9162=_5337; _5343 < _9162;++_5343) for (long long _5344=(int)0, _9163=_5336; _5344 < _9163;++_5344)_9161.push_back(((_5344 * _5337) + _5343)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9161.size()),_9161.begin(),_9161.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5338,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5335}),_5342,_5340,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5345,    std::shared_ptr< monty::ndarray< double,1 > > _5346) { return mosek::fusion::p_Expr::mul(_5345,_5346); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5345,std::shared_ptr< monty::ndarray< double,1 > > _5346){ if ((! _5345 || ! _5346)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _5347 = _5345; std::shared_ptr< monty::ndarray< double,1 > > _5348 = _5346; if ((mosek::fusion::p_Set::_get_impl(_5347->shape())->size == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< long long,1 > > _5350 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _5351 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); return ::mosek::fusion::p_Expr::_new_Expr(_5349,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5345}),_5350,_5351,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else if ((mosek::fusion::p_Set::_get_impl(_5347->shape())->size == (int)1)){ std::shared_ptr< monty::ndarray< long long,1 > > _5352 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((_5348)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _5353 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(int)((_5348)->size(0))); std::shared_ptr< monty::ndarray< double,1 > > _5354 = ::mosek::fusion::Utils::Tools::arraycopy(_5348); std::shared_ptr< monty::ndarray< double,1 > > _5355 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5352,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5345}),_5353,_5354,_5355,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else if (((mosek::fusion::p_Set::_get_impl(_5345->shape())->nd == (int)1) && (_5345->shape()->dim((int)0) == (int)((_5346)->size(0))))){ return ::mosek::fusion::p_Expr::dot(_5345,_5346); }else if ((mosek::fusion::p_Set::_get_impl(_5347->shape())->nd == (int)2)){ if ((_5347->shape()->dim((int)1) != (int)((_5348)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _5356 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9164; for (long long _5357=(int)0, _9165=(mosek::fusion::p_Set::_get_impl(_5347->shape())->size + _5347->shape()->dim((int)1)), _9166=_5347->shape()->dim((int)1); _5357 < _9165;_5357 += _9166)_9164.push_back(_5357); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9164.size()),_9164.begin(),_9164.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5358 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9167; for (long long _5359=(int)0, _9168=mosek::fusion::p_Set::_get_impl(_5347->shape())->size; _5359 < _9168;++_5359)_9167.push_back(_5359); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9167.size()),_9167.begin(),_9167.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5360 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5347->shape())->size))); long long _5361 = (long long)_5347->shape()->dim((int)1); long long _9169 = (long long)0; int _9170 = _5347->shape()->dim((int)0); for (long long _5362 = _9169;_5362<_9170;++_5362){ ::mosek::fusion::Utils::Tools::arraycopy(_5348,(long long)0,_5360,(_5362 * _5361),_5361); }std::shared_ptr< monty::ndarray< double,1 > > _5363 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5356,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5345}),_5358,_5360,_5363,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5364,    monty::rc_ptr< ::mosek::fusion::Matrix > _5365) { return mosek::fusion::p_Expr::mul(_5364,_5365); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5364,monty::rc_ptr< ::mosek::fusion::Matrix > _5365){ if ((! _5364 || ! _5365)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _5366 = _5364; monty::rc_ptr< ::mosek::fusion::Matrix > _5367 = _5365; int _5368 = _5365->numRows(); int _5369 = _5365->numColumns(); int _5370; int _5371; long long _5372 = _5365->numNonzeros(); if (((mosek::fusion::p_Set::_get_impl(_5364->shape())->nd == (int)1) && (_5364->shape()->dim((int)0) == (int)1))){ return ::mosek::fusion::p_Expr::mul(_5365,_5364); }else { if ((mosek::fusion::p_Set::_get_impl(_5366->shape())->nd == (int)1)){ if ((mosek::fusion::p_Matrix::_get_impl(_5367)->dimi != mosek::fusion::p_Set::_get_impl(_5366->shape())->size)){ throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}else {}(_5371 = (int)1); (_5370 = _5366->shape()->dim((int)0)); }else if ((mosek::fusion::p_Set::_get_impl(_5366->shape())->nd == (int)2)){ if ((mosek::fusion::p_Matrix::_get_impl(_5365)->dimi != _5364->shape()->dim((int)1))){ throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}else {}(_5371 = _5366->shape()->dim((int)0)); (_5370 = _5366->shape()->dim((int)1)); }else { throw ::mosek::fusion::LengthError(std::string ("Variable must be one- or two-dimensional."));}int _5373 = _5371; int _5374 = _5369; monty::rc_ptr< ::mosek::fusion::Set > _5375 = nullptr; if ((mosek::fusion::p_Set::_get_impl(_5364->shape())->nd == (int)1)){ (_5375 = ::mosek::fusion::p_IntSet::_new_IntSet(_5374)); }else { (_5375 = ::mosek::fusion::p_NDSet::_new_NDSet(_5373,_5374)); }if ((! _5365->isSparse())){ long long _5376 = ((long long)_5373 * (long long)_5374); std::shared_ptr< monty::ndarray< double,1 > > _5377 = _5365->getDataAsArray(); std::shared_ptr< monty::ndarray< long long,1 > > _5378 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9171; for (long long _5379=(long long)0, _9172=((((long long)_5373 * _5374) * _5370) + (int)1), _9173=_5370; _5379 < _9172;_5379 += _9173)_9171.push_back(_5379); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9171.size()),_9171.begin(),_9171.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5380 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9174; for (int _5381=(int)0, _9175=_5373; _5381 < _9175;++_5381) for (int _5382=(int)0, _9176=_5374; _5382 < _9176;++_5382) for (int _5383=(int)0, _9177=_5370; _5383 < _9177;++_5383)_9174.push_back((((long long)_5381 * _5370) + _5383)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9174.size()),_9174.begin(),_9174.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5384 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9178; for (int _5385=(int)0, _9179=_5373; _5385 < _9179;++_5385) for (int _5386=(int)0, _9180=_5374; _5386 < _9180;++_5386) for (int _5387=(int)0, _9181=_5370; _5387 < _9181;++_5387)_9178.push_back(((*_5377)(((_5387 * _5369) + _5386)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9178.size()),_9178.begin(),_9178.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5378,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5364}),_5380,_5384,nullptr,_5375,nullptr); }else if ((_5372 > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _5388 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5372))); std::shared_ptr< monty::ndarray< int,1 > > _5389 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5372))); std::shared_ptr< monty::ndarray< double,1 > > _5390 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5372))); std::shared_ptr< monty::ndarray< long long,1 > > _5391 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9182; for (long long _5392=(long long)0, _9183=_5372; _5392 < _9183;++_5392)_9182.push_back(_5392); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9182.size()),_9182.begin(),_9182.end())); })(); _5365->getDataAsTriplets(_5388,_5389,_5390); if ((_5372 > _5369)){ ::mosek::fusion::p_Sort::argbucketsort(_5391,_5389,(long long)((int)0),_5372,(int)0,_5369); }else { ::mosek::fusion::p_Sort::argsort(_5391,_5389,(long long)0,_5372,false); }long long _5393 = (long long)0; if ((_5372 > (int)0)){ (_5393 = (long long)1); { long long _5394 = (long long)1; for (;(_5394 < _5372);( ++ _5394 )){ if ((((*_5389)(((*_5391)(_5394)))) > ((*_5389)(((*_5391)((_5394 - (int)1))))))){ ( ++ _5393 ); }else {}}}}else {}long long _5395 = (_5393 * (long long)_5371); std::shared_ptr< monty::ndarray< long long,1 > > _5396 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5395 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5397 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5395))); std::shared_ptr< monty::ndarray< long long,1 > > _5398 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5372 * _5371)))); std::shared_ptr< monty::ndarray< double,1 > > _5399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5372 * _5371)))); { int _5400 = (int)0; long long _5401 = (long long)0; int _9184 = (int)0; int _9185 = _5373; for (int _5402 = _9184;_5402<_9185;++_5402){ { long long _5403 = (long long)0; for (;(_5403 < _5372);){ int _5404 = ((*_5389)(((*_5391)(_5403)))); long long _5405 = _5403; long long _5406 = _5403; while (((_5406 < _5372) && (((*_5389)(((*_5391)(_5406)))) == ((*_5389)(((*_5391)(_5403))))))) { ( ++ _5406 ); }long long _9186 = _5405; long long _9187 = _5406; for (long long _5407 = _9186;_5407<_9187;++_5407){ (((*_5398)(_5401)) = (((long long)_5402 * _5370) + ((*_5388)(((*_5391)(_5407)))))); (((*_5399)(_5401)) = ((*_5390)(((*_5391)(_5407))))); ( ++ _5401 ); }(((*_5396)((_5400 + (int)1))) = _5401); (((*_5397)(_5400)) = (((long long)_5402 * _5374) + _5404)); ( ++ _5400 ); (_5403 = _5406); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_5396,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5364}),_5398,_5399,nullptr,_5375,_5397); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5364}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,_5375,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)))); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5408,    monty::rc_ptr< ::mosek::fusion::Variable > _5409) { return mosek::fusion::p_Expr::mul(_5408,_5409); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Matrix > _5408,monty::rc_ptr< ::mosek::fusion::Variable > _5409){ if ((! _5409 || ! _5408)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5410 = _5409->shape(); int _5411 = _5408->numRows(); int _5412 = _5408->numColumns(); int _5413; int _5414; if ((mosek::fusion::p_Set::_get_impl(_5410)->nd == (int)1)){ (_5413 = _5410->dim((int)0)); (_5414 = (int)1); }else if ((mosek::fusion::p_Set::_get_impl(_5410)->nd == (int)2)){ (_5413 = _5410->dim((int)0)); (_5414 = _5410->dim((int)1)); }else { throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}int _5415 = _5411; int _5416 = _5414; monty::rc_ptr< ::mosek::fusion::Expression > _5417; monty::rc_ptr< ::mosek::fusion::Set > _5418 = nullptr; if (((mosek::fusion::p_Set::_get_impl(_5409->shape())->nd == (int)1) && (_5409->shape()->dim((int)0) == (int)1))){ (_5418 = ::mosek::fusion::p_NDSet::_new_NDSet(_5411,_5412)); }else if ((mosek::fusion::p_Set::_get_impl(_5409->shape())->nd == (int)1)){ (_5418 = ::mosek::fusion::p_IntSet::_new_IntSet(_5415)); }else { (_5418 = ::mosek::fusion::p_NDSet::_new_NDSet(_5415,_5416)); }if (((mosek::fusion::p_Set::_get_impl(_5410)->nd == (int)1) && (_5410->dim((int)0) == (int)1))){ if (_5408->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _5419 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5408->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5408->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5421 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5408->numNonzeros()))); _5408->getDataAsTriplets(_5419,_5420,_5421); std::shared_ptr< monty::ndarray< long long,1 > > _5422 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9188; for (int _5423=(int)0, _9189=(int)((_5420)->size(0)); _5423 < _9189;++_5423)_9188.push_back((((long long)((*_5419)(_5423)) * _5412) + ((*_5420)(_5423)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9188.size()),_9188.begin(),_9188.end())); })(); (_5417 = ::mosek::fusion::p_Expr::_new_Expr(::mosek::fusion::Utils::Tools::range((long long)0,(_5408->numNonzeros() + (int)1)),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5409}),::mosek::fusion::Utils::Tools::makevector((long long)0,(int)_5408->numNonzeros()),_5421,nullptr,_5418,_5422)); }else { (_5417 = ::mosek::fusion::p_Expr::_new_Expr(::mosek::fusion::Utils::Tools::range((long long)0,(_5408->numNonzeros() + (int)1)),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5409}),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9190; for (long long _5424=(int)0, _9191=_5408->numNonzeros(); _5424 < _9191;++_5424)_9190.push_back((long long)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9190.size()),_9190.begin(),_9190.end())); })(),_5408->getDataAsArray(),nullptr,_5418,nullptr)); }}else if ((_5412 == _5413)){ if (_5408->isSparse()){ if ((_5408->numNonzeros() > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _5425 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5408->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5426 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5408->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5427 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5408->numNonzeros()))); int _5428 = (int)((_5427)->size(0)); _5408->getDataAsTriplets(_5425,_5426,_5427); int _5429 = ((int)((_5427)->size(0)) * _5414); int _5430 = (int)0; { int _5431 = (int)0; for (;(_5431 < _5428);){ int _5432 = ((*_5425)(_5431)); int _5433 = (_5431 + (int)1); while (((_5433 < _5428) && (_5432 == ((*_5425)(_5433))))) { ( ++ _5433 ); }( ++ _5430 ); (_5431 = _5433); }}int _5434 = (_5430 * _5414); std::shared_ptr< monty::ndarray< long long,1 > > _5435 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5434 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5436 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5434))); std::shared_ptr< monty::ndarray< long long,1 > > _5437 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5429))); std::shared_ptr< monty::ndarray< double,1 > > _5438 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5429))); if ((_5430 > (int)0)){ int _5439 = (int)0; int _5440 = (int)0; { int _5441 = (int)0; for (;(_5441 < _5428);){ int _5442 = ((*_5425)(_5441)); int _5443 = (_5441 + (int)1); while (((_5443 < _5428) && (_5442 == ((*_5425)(_5443))))) { ( ++ _5443 ); }int _9192 = (int)0; int _9193 = _5414; for (int _5444 = _9192;_5444<_9193;++_5444){ (((*_5435)((_5439 + (int)1))) = (((*_5435)(_5439)) + (_5443 - _5441))); (((*_5436)(_5439)) = (((long long)_5442 * _5414) + _5444)); int _9194 = _5441; int _9195 = _5443; for (int _5445 = _9194;_5445<_9195;++_5445){ (((*_5437)(_5440)) = (((long long)((*_5426)(_5445)) * _5414) + _5444)); (((*_5438)(_5440)) = ((*_5427)(_5445))); ( ++ _5440 ); }( ++ _5439 ); }(_5441 = _5443); }}}else {}if (((int)((_5436)->size(0)) == (_5415 * _5416))){ (_5436 = nullptr); }else {}(_5417 = ::mosek::fusion::p_Expr::_new_Expr(_5435,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5409}),_5437,_5438,nullptr,_5418,_5436)); }else { (_5417 = ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5409}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,_5418,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))))); }}else { int _5446 = ((_5411 * _5412) * _5414); std::shared_ptr< monty::ndarray< double,1 > > _5447 = _5408->getDataAsArray(); std::shared_ptr< monty::ndarray< long long,1 > > _5448 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5446 + (int)1)),(long long)(([&]() -> int { if ( (_5412 > (int)0)) return (_5412); else return ((int)1); })())); std::shared_ptr< monty::ndarray< long long,1 > > _5449 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5446))); std::shared_ptr< monty::ndarray< double,1 > > _5450 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5446))); { int _5451 = (int)0; int _9196 = (int)0; int _9197 = _5415; for (int _5452 = _9196;_5452<_9197;++_5452){ int _9198 = (int)0; int _9199 = _5416; for (int _5453 = _9198;_5453<_9199;++_5453){ int _9200 = (int)0; int _9201 = _5412; for (int _5454 = _9200;_5454<_9201;++_5454){ (((*_5449)(_5451)) = (long long)((_5454 * _5414) + _5453)); (((*_5450)(_5451)) = ((*_5447)(((_5452 * _5412) + _5454)))); ( ++ _5451 ); }}}}(_5417 = ::mosek::fusion::p_Expr::_new_Expr(_5448,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5409}),_5449,_5450,nullptr,_5418,nullptr)); }}else { throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}return _5417; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::Matrix > _5455,monty::rc_ptr< ::mosek::fusion::Expression > _5456){ if (((_5455->numRows() != _5456->shape()->dim((int)0)) || ((_5455->numColumns() != _5456->shape()->dim((int)1)) || ((_5455->numRows() * _5455->numColumns()) != _5456->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5457 = _5455->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5458 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5457))); std::shared_ptr< monty::ndarray< int,1 > > _5459 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5457))); std::shared_ptr< monty::ndarray< double,1 > > _5460 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5457))); _5455->getDataAsTriplets(_5458,_5459,_5460); std::shared_ptr< monty::ndarray< long long,1 > > _5461 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9202; for (long long _5462=(int)0, _9203=_5457; _5462 < _9203;++_5462)_9202.push_back(((((*_5458)(_5462)) * _5455->numColumns()) + ((*_5459)(_5462)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9202.size()),_9202.begin(),_9202.end())); })(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _5463 = _5456->eval(); return ::mosek::fusion::p_Expr::inner_(_5461,_5460,mosek::fusion::p_FlatExpr::_get_impl(_5463)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5463)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5463)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5463)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5463)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5463)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::Matrix > _5464,monty::rc_ptr< ::mosek::fusion::Variable > _5465){ if (((_5464->numRows() != _5465->shape()->dim((int)0)) || ((_5464->numColumns() != _5465->shape()->dim((int)1)) || ((_5464->numRows() * _5464->numColumns()) != _5465->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5466 = _5464->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5467 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5466))); std::shared_ptr< monty::ndarray< int,1 > > _5468 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5466))); std::shared_ptr< monty::ndarray< double,1 > > _5469 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5466))); _5464->getDataAsTriplets(_5467,_5468,_5469); std::shared_ptr< monty::ndarray< long long,1 > > _5470 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9204; for (long long _5471=(int)0, _9205=_5466; _5471 < _9205;++_5471)_9204.push_back(((((*_5467)(_5471)) * _5464->numColumns()) + ((*_5468)(_5471)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9204.size()),_9204.begin(),_9204.end())); })(); return ::mosek::fusion::p_Expr::inner_(_5470,_5469,_5465); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( std::shared_ptr< monty::ndarray< double,1 > > _5472,monty::rc_ptr< ::mosek::fusion::Variable > _5473){ if ((! _5473 || ! _5472)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}if (((_5473->shape()->dim((int)0) != (int)((_5472)->size(0))) || (mosek::fusion::p_Set::_get_impl(_5473->shape())->size != (long long)((_5472)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}return ::mosek::fusion::p_Expr::inner_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5472)->size(0))),_5472,_5473); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( std::shared_ptr< monty::ndarray< double,1 > > _5474,monty::rc_ptr< ::mosek::fusion::Expression > _5475){ if ((! _5474 || ! _5475)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}if (((_5475->shape()->dim((int)0) != (int)((_5474)->size(0))) || (mosek::fusion::p_Set::_get_impl(_5475->shape())->size != (long long)((_5474)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5476 = _5475->eval(); return ::mosek::fusion::p_Expr::inner_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5474)->size(0))),_5474,mosek::fusion::p_FlatExpr::_get_impl(_5476)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5476)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5476)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5476)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5476)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5476)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5477,monty::rc_ptr< ::mosek::fusion::Expression > _5478){ if ((! _5477 || ! _5478)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}int _9206 = (int)0; int _9207 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5477)->dims)->size(0)); for (int _5479 = _9206;_5479<_9207;++_5479){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5477)->dims)(_5479)) != _5478->shape()->dim(_5479))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9208 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5477)->dims)->size(0)); int _9209 = mosek::fusion::p_Set::_get_impl(_5478->shape())->nd; for (int _5480 = _9208;_5480<_9209;++_5480){ if (((int)1 != _5478->shape()->dim(_5480))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9210 = (int)0; int _9211 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5477)->dims)->size(0)); for (int _5481 = _9210;_5481<_9211;++_5481){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5477)->dims)(_5481)) != _5478->shape()->dim(_5481))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5482 = _5478->eval(); return ::mosek::fusion::p_Expr::inner_(mosek::fusion::p_NDSparseArray::_get_impl(_5477)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5477)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5482)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5482)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5482)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5482)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5482)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5482)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5483,monty::rc_ptr< ::mosek::fusion::Variable > _5484){ if ((mosek::fusion::p_Set::_get_impl(_5484->shape())->nd != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5483)->dims)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}int _9212 = (int)0; int _9213 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5483)->dims)->size(0)); for (int _5485 = _9212;_5485<_9213;++_5485){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5483)->dims)(_5485)) != _5484->shape()->dim(_5485))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}return ::mosek::fusion::p_Expr::inner_(mosek::fusion::p_NDSparseArray::_get_impl(_5483)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5483)->cof,_5484); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::inner_( std::shared_ptr< monty::ndarray< long long,1 > > _5486,std::shared_ptr< monty::ndarray< double,1 > > _5487,monty::rc_ptr< ::mosek::fusion::Variable > _5488){ int _5489 = (int)((_5486)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5490 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0,(long long)((_5487)->size(0))}); std::shared_ptr< monty::ndarray< long long,1 > > _5491 = ::mosek::fusion::Utils::Tools::arraycopy(_5486); std::shared_ptr< monty::ndarray< double,1 > > _5492 = ::mosek::fusion::Utils::Tools::arraycopy(_5487); std::shared_ptr< monty::ndarray< double,1 > > _5493 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5490,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5488}),_5491,_5492,_5493,::mosek::fusion::p_Set::scalar(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::inner_( std::shared_ptr< monty::ndarray< long long,1 > > _5494,std::shared_ptr< monty::ndarray< double,1 > > _5495,std::shared_ptr< monty::ndarray< long long,1 > > _5496,std::shared_ptr< monty::ndarray< long long,1 > > _5497,std::shared_ptr< monty::ndarray< double,1 > > _5498,std::shared_ptr< monty::ndarray< double,1 > > _5499,std::shared_ptr< monty::ndarray< long long,1 > > _5500,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5501){ int _5502 = (int)((_5494)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5503 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5500) return (_5500); else return (::mosek::fusion::Utils::Tools::range((long long)((int)0),((long long)((_5496)->size(0)) - (int)1))); })(); int _5504 = (int)((_5503)->size(0)); long long _5505 = (long long)0; { int _5506 = (int)0; int _5507 = (int)0; while (((_5506 < _5502) && (_5507 < _5504))) { if ((((*_5494)(_5506)) < ((*_5503)(_5507)))){ ( ++ _5506 ); }else if ((((*_5494)(_5506)) > ((*_5503)(_5507)))){ ( ++ _5507 ); }else { (_5505 += (((*_5496)((_5507 + (int)1))) - ((*_5496)(_5507)))); ( ++ _5506 ); ( ++ _5507 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5508 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5505))); std::shared_ptr< monty::ndarray< double,1 > > _5509 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5505))); std::shared_ptr< monty::ndarray< double,1 > > _5510 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< long long,1 > > _5511 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,_5505}); { int _5512 = (int)0; int _5513 = (int)0; int _5514 = (int)0; while (((_5512 < _5502) && (_5513 < _5504))) { if ((((*_5494)(_5512)) < ((*_5503)(_5513)))){ ( ++ _5512 ); }else if ((((*_5494)(_5512)) > ((*_5503)(_5513)))){ ( ++ _5513 ); }else { long long _9214 = ((*_5496)(_5513)); long long _9215 = ((*_5496)((_5513 + (int)1))); for (long long _5515 = _9214;_5515<_9215;++_5515){ (((*_5508)(_5514)) = ((*_5497)(_5515))); (((*_5509)(_5514)) = (((*_5498)(_5515)) * ((*_5495)(_5512)))); ( ++ _5514 ); }( ++ _5512 ); ( ++ _5513 ); }}}if (_5499){ int _5516 = (int)0; int _5517 = (int)0; while (((_5516 < _5502) && (_5517 < _5504))) { if ((((*_5494)(_5516)) < ((*_5503)(_5517)))){ ( ++ _5516 ); }else if ((((*_5494)(_5516)) > ((*_5503)(_5517)))){ ( ++ _5517 ); }else { (((*_5510)((int)0)) += (((*_5495)(_5516)) * ((*_5499)(_5517)))); ( ++ _5516 ); ( ++ _5517 ); }}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_5511,_5501,_5508,_5509,_5510,::mosek::fusion::p_Set::scalar(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5518,    monty::rc_ptr< ::mosek::fusion::Expression > _5519) { return mosek::fusion::p_Expr::outer(_5518,_5519); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( std::shared_ptr< monty::ndarray< double,1 > > _5518,monty::rc_ptr< ::mosek::fusion::Expression > _5519){ if (((mosek::fusion::p_Set::_get_impl(_5519->shape())->nd != (int)1) || (mosek::fusion::p_Set::_get_impl(_5519->shape())->nd != (int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));}else {}if ((_5519->shape()->dim((int)0) != (int)((_5518)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Argument lengths do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5520 = _5519->eval(); return ::mosek::fusion::p_Expr::outer_(mosek::fusion::p_FlatExpr::_get_impl(_5520)->shape->dim((int)0),mosek::fusion::p_FlatExpr::_get_impl(_5520)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5520)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5520)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5520)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5520)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5520)->x,_5518,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9216; for (int _5521=(int)0, _9217=(int)((_5518)->size(0)); _5521 < _9217;++_5521)_9216.push_back(_5521); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9216.size()),_9216.begin(),_9216.end())); })(),(int)((_5518)->size(0)),true); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5522,    std::shared_ptr< monty::ndarray< double,1 > > _5523) { return mosek::fusion::p_Expr::outer(_5522,_5523); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Expression > _5522,std::shared_ptr< monty::ndarray< double,1 > > _5523){ if (((mosek::fusion::p_Set::_get_impl(_5522->shape())->nd != (int)1) || (mosek::fusion::p_Set::_get_impl(_5522->shape())->nd != (int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5524 = _5522->eval(); return ::mosek::fusion::p_Expr::outer_(mosek::fusion::p_FlatExpr::_get_impl(_5524)->shape->dim((int)0),mosek::fusion::p_FlatExpr::_get_impl(_5524)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5524)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5524)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5524)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5524)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5524)->x,_5523,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9218; for (int _5525=(int)0, _9219=(int)((_5523)->size(0)); _5525 < _9219;++_5525)_9218.push_back(_5525); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9218.size()),_9218.begin(),_9218.end())); })(),(int)((_5523)->size(0)),false); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5526,    monty::rc_ptr< ::mosek::fusion::Variable > _5527) { return mosek::fusion::p_Expr::outer(_5526,_5527); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Matrix > _5526,monty::rc_ptr< ::mosek::fusion::Variable > _5527){ if ((! ((mosek::fusion::p_Set::_get_impl(_5527->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5527->shape())->nd == (int)2) && (_5527->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}if ((mosek::fusion::p_Matrix::_get_impl(_5526)->dimj != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _9220 = _5526; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9220.get())) {::mosek::fusion::DenseMatrix::t _5528(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9220.get()));{ return ::mosek::fusion::p_Expr::outer_(_5527,_5527->shape()->dim((int)0),mosek::fusion::p_DenseMatrix::_get_impl(_5528)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5528)->data)->size(0)),true); }}else {mosek::fusion::Matrix::t _5529 = _9220;{ std::shared_ptr< monty::ndarray< int,1 > > _5530 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5529->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5531 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5529->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5532 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5529->numNonzeros()))); _5529->getDataAsTriplets(_5530,_5531,_5532); return ::mosek::fusion::p_Expr::outer_(_5527,_5527->shape()->dim((int)0),_5532,_5530,mosek::fusion::p_Matrix::_get_impl(_5529)->dimi,true); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5533,    monty::rc_ptr< ::mosek::fusion::Matrix > _5534) { return mosek::fusion::p_Expr::outer(_5533,_5534); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Variable > _5533,monty::rc_ptr< ::mosek::fusion::Matrix > _5534){ if ((! ((mosek::fusion::p_Set::_get_impl(_5533->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5533->shape())->nd == (int)2) && (_5533->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}if ((mosek::fusion::p_Matrix::_get_impl(_5534)->dimj != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _9221 = _5534; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9221.get())) {::mosek::fusion::DenseMatrix::t _5535(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9221.get()));{ return ::mosek::fusion::p_Expr::outer_(_5533,_5533->shape()->dim((int)0),mosek::fusion::p_DenseMatrix::_get_impl(_5535)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5535)->data)->size(0)),false); }}else {mosek::fusion::Matrix::t _5536 = _9221;{ std::shared_ptr< monty::ndarray< int,1 > > _5537 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5534->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5538 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5536->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5539 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5536->numNonzeros()))); _5536->getDataAsTriplets(_5537,_5538,_5539); return ::mosek::fusion::p_Expr::outer_(_5533,_5533->shape()->dim((int)0),_5539,_5537,mosek::fusion::p_Matrix::_get_impl(_5536)->dimi,false); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5540,    monty::rc_ptr< ::mosek::fusion::Variable > _5541) { return mosek::fusion::p_Expr::outer(_5540,_5541); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( std::shared_ptr< monty::ndarray< double,1 > > _5540,monty::rc_ptr< ::mosek::fusion::Variable > _5541){ if ((! ((mosek::fusion::p_Set::_get_impl(_5541->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5541->shape())->nd == (int)2) && (_5541->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}return ::mosek::fusion::p_Expr::outer_(_5541,_5541->shape()->dim((int)0),_5540,nullptr,(int)((_5540)->size(0)),true); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5542,    std::shared_ptr< monty::ndarray< double,1 > > _5543) { return mosek::fusion::p_Expr::outer(_5542,_5543); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Variable > _5542,std::shared_ptr< monty::ndarray< double,1 > > _5543){ if ((! ((mosek::fusion::p_Set::_get_impl(_5542->shape())->nd == (int)1) || ((mosek::fusion::p_Set::_get_impl(_5542->shape())->nd == (int)2) && (_5542->shape()->dim((int)1) == (int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}return ::mosek::fusion::p_Expr::outer_(_5542,_5542->shape()->dim((int)0),_5543,nullptr,(int)((_5543)->size(0)),false); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_( int _5544,std::shared_ptr< monty::ndarray< long long,1 > > _5545,std::shared_ptr< monty::ndarray< long long,1 > > _5546,std::shared_ptr< monty::ndarray< double,1 > > _5547,std::shared_ptr< monty::ndarray< double,1 > > _5548,std::shared_ptr< monty::ndarray< long long,1 > > _5549,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5550,std::shared_ptr< monty::ndarray< double,1 > > _5551,std::shared_ptr< monty::ndarray< int,1 > > _5552,int _5553,bool _5554){ monty::rc_ptr< ::mosek::fusion::Set > _5555 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( (! _5554)) return (::mosek::fusion::p_Set::make(_5544,_5553)); else return (::mosek::fusion::p_Set::make(_5553,_5544)); })(); int _5556 = ((int)((_5551)->size(0)) * (int)((_5549)->size(0))); int _5557 = ((int)((_5551)->size(0)) * (int)((_5546)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5558 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5556 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5559 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5557))); std::shared_ptr< monty::ndarray< double,1 > > _5560 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5557))); std::shared_ptr< monty::ndarray< double,1 > > _5561 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _5548) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5556)))); else return (nullptr); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5562 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5556))); int _5563 = (int)((*_5558)(((int)((_5558)->size(0)) - (int)1))); if ((! _5554)){ long long _5564 = (long long)0; long long _5565 = (long long)0; int _9222 = (int)0; int _9223 = (int)((_5549)->size(0)); for (int _5566 = _9222;_5566<_9223;++_5566){ long long _5567 = (((*_5545)((_5566 + (int)1))) - ((*_5545)(_5566))); int _9224 = (int)0; int _9225 = (int)((_5551)->size(0)); for (int _5568 = _9224;_5568<_9225;++_5568){ (((*_5549)(_5564)) = ((((*_5549)(_5566)) * _5553) + ((*_5552)(_5568)))); (((*_5558)((_5564 + (int)1))) = (((*_5558)(_5564)) + _5567)); ( ++ _5564 ); long long _9226 = ((*_5545)(_5566)); long long _9227 = ((*_5545)((_5566 + (int)1))); for (long long _5569 = _9226;_5569<_9227;++_5569){ (((*_5559)(_5565)) = ((*_5546)(_5569))); (((*_5560)(_5565)) = (((*_5547)(_5569)) * ((*_5551)(_5568)))); ( ++ _5565 ); }}}if (_5561){ int _5570 = (int)0; int _9228 = (int)0; int _9229 = (int)((_5549)->size(0)); for (int _5571 = _9228;_5571<_9229;++_5571){ int _9230 = (int)0; int _9231 = (int)((_5551)->size(0)); for (int _5572 = _9230;_5572<_9231;++_5572){ (((*_5561)(_5570)) = (((*_5551)(_5572)) * ((*_5548)(_5571)))); ( ++ _5570 ); }}}else {}}else { long long _5573 = (long long)0; long long _5574 = (long long)0; int _9232 = (int)0; int _9233 = (int)((_5551)->size(0)); for (int _5575 = _9232;_5575<_9233;++_5575){ double _5576 = ((*_5551)(_5575)); ::mosek::fusion::Utils::Tools::arraycopy(_5546,(long long)((int)0),_5559,_5574,(long long)(_5563)); int _9234 = (int)0; int _9235 = _5563; for (int _5577 = _9234;_5577<_9235;++_5577){ (((*_5560)((_5574 + _5577))) = (((*_5547)(_5577)) * ((*_5551)(_5575)))); }int _9236 = (int)0; int _9237 = (int)((_5549)->size(0)); for (int _5578 = _9236;_5578<_9237;++_5578){ long long _5579 = (((*_5545)((_5578 + (int)1))) - ((*_5545)(_5578))); (((*_5549)(_5573)) = ((((*_5549)(_5578)) * _5553) + ((*_5552)(_5575)))); (((*_5558)((_5573 + (int)1))) = (((*_5558)(_5573)) + _5579)); ( ++ _5573 ); }(_5574 += _5563); }if (_5561){ int _5580 = (int)0; int _9238 = (int)0; int _9239 = (int)((_5551)->size(0)); for (int _5581 = _9238;_5581<_9239;++_5581){ double _5582 = ((*_5551)(_5581)); int _9240 = (int)0; int _9241 = (int)((_5549)->size(0)); for (int _5583 = _9240;_5583<_9241;++_5583){ (((*_5561)(_5580)) = (((*_5548)(_5583)) * _5582)); ( ++ _5580 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_5558,_5550,_5559,_5560,_5561,_5555,_5562); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_( monty::rc_ptr< ::mosek::fusion::Variable > _5584,int _5585,std::shared_ptr< monty::ndarray< double,1 > > _5586,std::shared_ptr< monty::ndarray< int,1 > > _5587,int _5588,bool _5589){ monty::rc_ptr< ::mosek::fusion::Set > _5590 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( (! _5589)) return (::mosek::fusion::p_Set::make(_5585,_5588)); else return (::mosek::fusion::p_Set::make(_5588,_5585)); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5591 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((((int)((_5586)->size(0)) * _5585) + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5592 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5586)->size(0)) * _5585)))); std::shared_ptr< monty::ndarray< double,1 > > _5593 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5586)->size(0)) * _5585)))); std::shared_ptr< monty::ndarray< double,1 > > _5594 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5595 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_5588 == (int)((_5586)->size(0)))) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5586)->size(0)) * _5585))))); })(); if ((_5588 == (int)((_5586)->size(0)))){ long long _5596 = (long long)0; if ((! _5589)){ int _9242 = (int)0; int _9243 = _5585; for (int _5597 = _9242;_5597<_9243;++_5597){ int _9244 = (int)0; int _9245 = _5588; for (int _5598 = _9244;_5598<_9245;++_5598){ (((*_5591)((_5596 + (int)1))) = (_5596 + (int)1)); (((*_5592)(_5596)) = (long long)_5597); (((*_5593)(_5596)) = ((*_5586)(_5598))); ( ++ _5596 ); }}}else { int _9246 = (int)0; int _9247 = _5588; for (int _5599 = _9246;_5599<_9247;++_5599){ int _9248 = (int)0; int _9249 = _5585; for (int _5600 = _9248;_5600<_9249;++_5600){ (((*_5591)((_5596 + (int)1))) = (_5596 + (int)1)); (((*_5592)(_5596)) = (long long)_5600); (((*_5593)(_5596)) = ((*_5586)(_5599))); ( ++ _5596 ); }}}}else { long long _5601 = (long long)0; if ((! _5589)){ int _9250 = (int)0; int _9251 = _5585; for (int _5602 = _9250;_5602<_9251;++_5602){ int _9252 = (int)0; int _9253 = (int)((_5586)->size(0)); for (int _5603 = _9252;_5603<_9253;++_5603){ (((*_5591)((_5601 + (int)1))) = (_5601 + (int)1)); (((*_5592)(_5601)) = (long long)_5602); (((*_5593)(_5601)) = ((*_5586)(_5603))); (((*_5595)(_5601)) = ((_5602 * _5588) + ((*_5587)(_5603)))); ( ++ _5601 ); }}}else { int _9254 = (int)0; int _9255 = (int)((_5586)->size(0)); for (int _5604 = _9254;_5604<_9255;++_5604){ int _9256 = (int)0; int _9257 = _5585; for (int _5605 = _9256;_5605<_9257;++_5605){ (((*_5591)((_5601 + (int)1))) = (_5601 + (int)1)); (((*_5592)(_5601)) = (long long)_5605); (((*_5593)(_5601)) = ((*_5586)(_5604))); (((*_5595)(_5601)) = ((((*_5587)(_5604)) * _5585) + _5605)); ( ++ _5601 ); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_5591,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5584}),_5592,_5593,_5594,_5590,_5595); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::pick  ( std::shared_ptr< monty::ndarray< int,2 > > _5606) { return mosek::fusion::p_Expr::_get_impl(this)->pick(_5606); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick( std::shared_ptr< monty::ndarray< int,2 > > _5606){ std::shared_ptr< monty::ndarray< int,2 > > _5607 = _5606; if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_5607)->size(1)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid index size"));}else {}int _9258 = (int)0; int _9259 = (int)((_5607)->size(0)); for (int _5608 = _9258;_5608<_9259;++_5608){ int _9260 = (int)0; int _9261 = (int)((_5607)->size(1)); for (int _5609 = _9260;_5609<_9261;++_5609){ if (((((*_5607)(_5608,_5609)) < (int)0) || (((*_5607)(_5608,_5609)) >= shape_p->dim(_5609)))){ throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));}else {}}}return pick_(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9262; for (int _5610=(int)0, _9263=(int)((_5607)->size(0)); _5610 < _9263;++_5610)_9262.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9264; for (int _5611=(int)0, _9265=(int)((_5607)->size(1)); _5611 < _9265;++_5611)_9264.push_back(((*_5607)(_5610,_5611))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9264.size()),_9264.begin(),_9264.end())); })())); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9262.size()),_9262.begin(),_9262.end())); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _5612) { return mosek::fusion::p_Expr::_get_impl(this)->pick(_5612); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick( std::shared_ptr< monty::ndarray< int,1 > > _5612){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Method is only valid for one-dimensional expressions"));}else {}int _9266 = (int)0; int _9267 = (int)((_5612)->size(0)); for (int _5613 = _9266;_5613<_9267;++_5613){ if (((((*_5612)(_5613)) < (int)0) || (((*_5612)(_5613)) >= shape_p->dim((int)0)))){ throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));}else {}}return pick_(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9268; for (int _5614=(int)0, _9269=(int)((_5612)->size(0)); _5614 < _9269;++_5614)_9268.push_back(((*_5612)(_5614))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9268.size()),_9268.begin(),_9268.end())); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick_( std::shared_ptr< monty::ndarray< long long,1 > > _5615){ if (((int)((_5615)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),nullptr); }else {}if (! inst){ long long _5616 = (long long)0; std::shared_ptr< monty::ndarray< long long,1 > > _5617 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5615)->size(0)) + (int)1)))); int _9270 = (int)0; int _9271 = (int)((_5615)->size(0)); for (int _5618 = _9270;_5618<_9271;++_5618){ (_5616 += (((*ptrb)((((*_5615)(_5618)) + (int)1))) - ((*ptrb)(((*_5615)(_5618)))))); (((*_5617)((_5618 + (int)1))) = (((*_5617)(_5618)) + (((*ptrb)((((*_5615)(_5618)) + (int)1))) - ((*ptrb)(((*_5615)(_5618))))))); }std::shared_ptr< monty::ndarray< long long,1 > > _5619 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5616))); std::shared_ptr< monty::ndarray< double,1 > > _5620 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5616))); std::shared_ptr< monty::ndarray< double,1 > > _5621 = nullptr; int _9272 = (int)0; int _9273 = (int)((_5615)->size(0)); for (int _5622 = _9272;_5622<_9273;++_5622){ long long _5623 = ((*_5617)(_5622)); long long _5624 = (((*_5617)((_5622 + (int)1))) - _5623); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(((*_5615)(_5622)))),_5619,_5623,_5624); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(((*_5615)(_5622)))),_5620,_5623,_5624); }if (bfix){ (_5621 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9274; for (int _5625=(int)0, _9275=(int)((_5615)->size(0)); _5625 < _9275;++_5625)_9274.push_back(((*bfix)(((*_5615)(_5625))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9274.size()),_9274.begin(),_9274.end())); })()); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _5626 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _5627 = ::mosek::fusion::p_Set::make((int)((_5615)->size(0))); return ::mosek::fusion::p_Expr::_new_Expr(_5617,x,_5619,_5620,_5621,_5627,_5626); }else { std::shared_ptr< monty::ndarray< long long,1 > > _5628 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9276; for (int _5629=(int)0, _9277=(int)((_5615)->size(0)); _5629 < _9277;++_5629)_9276.push_back(_5629); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9276.size()),_9276.begin(),_9276.end())); })(); ::mosek::fusion::p_Sort::argsort(_5628,_5615); int _5630 = (int)0; long long _5631 = (long long)0; { int _5632 = (int)0; int _5633 = (int)0; int _5634 = (int)((_5615)->size(0)); int _5635 = (int)((inst)->size(0)); while (((_5632 < _5634) && (_5633 < _5635))) { if ((((*_5615)(((*_5628)(_5632)))) < ((*inst)(_5633)))){ ( ++ _5632 ); }else if ((((*_5615)(((*_5628)(_5632)))) > ((*inst)(_5633)))){ ( ++ _5633 ); }else { ( ++ _5630 ); (_5631 += (((*ptrb)((_5633 + (int)1))) - ((*ptrb)(_5633)))); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5636 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5630))); std::shared_ptr< monty::ndarray< long long,1 > > _5637 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5630 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5638 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5631))); std::shared_ptr< monty::ndarray< double,1 > > _5639 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5631))); std::shared_ptr< monty::ndarray< double,1 > > _5640 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _5641 = ::mosek::fusion::p_Set::make((int)((_5615)->size(0))); std::shared_ptr< monty::ndarray< int,1 > > _5642 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9278; for (int _5643=(int)0, _9279=(int)((_5615)->size(0)); _5643 < _9279;++_5643)_9278.push_back((- (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9278.size()),_9278.begin(),_9278.end())); })(); { int _5644 = (int)0; int _5645 = (int)0; int _5646 = (int)((_5615)->size(0)); int _5647 = (int)((inst)->size(0)); while (((_5644 < _5646) && (_5645 < _5647))) { if ((((*_5615)(((*_5628)(_5644)))) < ((*inst)(_5645)))){ ( ++ _5644 ); }else if ((((*_5615)(((*_5628)(_5644)))) > ((*inst)(_5645)))){ ( ++ _5645 ); }else { (((*_5642)(((*_5628)(_5644)))) = _5645); }}}{ int _5648 = (int)0; int _9280 = (int)0; int _9281 = (int)((_5642)->size(0)); for (int _5649 = _9280;_5649<_9281;++_5649){ if ((((*_5642)(_5648)) >= (int)0)){ long long _5650 = (((*ptrb)((((*_5642)(_5648)) + (int)1))) - ((*ptrb)(((*_5642)(_5649))))); (((*_5637)((_5648 + (int)1))) += (((*_5637)(_5648)) + _5650)); (((*_5636)(_5648)) = _5649); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(((*_5642)(_5649)))),_5638,((*_5637)(_5648)),_5650); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(((*_5642)(_5649)))),_5639,((*_5637)(_5648)),_5650); ( ++ _5648 ); }else {}}}if (bfix){ (_5640 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5630)))); int _5651 = (int)0; int _9282 = (int)0; int _9283 = (int)((_5642)->size(0)); for (int _5652 = _9282;_5652<_9283;++_5652){ if ((((*_5642)(_5651)) >= (int)0)){ (((*_5640)(_5651)) = ((*bfix)(((*_5642)(_5652))))); ( ++ _5651 ); }else {}}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_5637,x,_5638,_5639,_5640,_5641,_5636); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5653) { return mosek::fusion::p_Expr::stack(_5653); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5653){ if (! _5653){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9284 = (int)0; int _9285 = (int)((_5653)->size(0)); for (int _5654 = _9284;_5654<_9285;++_5654){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5655 = ((*_5653)(_5654)); if (! _5655){ throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));}else {}int _9286 = (int)0; int _9287 = (int)((_5655)->size(0)); for (int _5656 = _9286;_5656<_9287;++_5656){ if (! ((*_5655)(_5656))){ throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));}else {}}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5657 = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Expression > > _9288; for (int _5658=(int)0, _9289=(int)((_5653)->size(0)); _5658 < _9289;++_5658)_9288.push_back(::mosek::fusion::p_Expr::stack_(((*_5653)(_5658)),(int)1)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9288.size()),_9288.begin(),_9288.end())); })(); return ::mosek::fusion::p_Expr::stack_(_5657,(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5659,    double _5660,    double _5661) { return mosek::fusion::p_Expr::vstack(_5659,_5660,_5661); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5659,double _5660,double _5661){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5659),::mosek::fusion::p_Expr::constTerm(_5660),::mosek::fusion::p_Expr::constTerm(_5661)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5662,    double _5663,    monty::rc_ptr< ::mosek::fusion::Variable > _5664) { return mosek::fusion::p_Expr::vstack(_5662,_5663,_5664); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5662,double _5663,monty::rc_ptr< ::mosek::fusion::Variable > _5664){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5662),::mosek::fusion::p_Expr::constTerm(_5663),_5664->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5665,    double _5666,    monty::rc_ptr< ::mosek::fusion::Expression > _5667) { return mosek::fusion::p_Expr::vstack(_5665,_5666,_5667); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5665,double _5666,monty::rc_ptr< ::mosek::fusion::Expression > _5667){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5665),::mosek::fusion::p_Expr::constTerm(_5666),_5667}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5668,    monty::rc_ptr< ::mosek::fusion::Variable > _5669,    double _5670) { return mosek::fusion::p_Expr::vstack(_5668,_5669,_5670); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5668,monty::rc_ptr< ::mosek::fusion::Variable > _5669,double _5670){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5668),_5669->asExpr(),::mosek::fusion::p_Expr::constTerm(_5670)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5671,    monty::rc_ptr< ::mosek::fusion::Variable > _5672,    monty::rc_ptr< ::mosek::fusion::Variable > _5673) { return mosek::fusion::p_Expr::vstack(_5671,_5672,_5673); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5671,monty::rc_ptr< ::mosek::fusion::Variable > _5672,monty::rc_ptr< ::mosek::fusion::Variable > _5673){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5671),_5672->asExpr(),_5673->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5674,    monty::rc_ptr< ::mosek::fusion::Variable > _5675,    monty::rc_ptr< ::mosek::fusion::Expression > _5676) { return mosek::fusion::p_Expr::vstack(_5674,_5675,_5676); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5674,monty::rc_ptr< ::mosek::fusion::Variable > _5675,monty::rc_ptr< ::mosek::fusion::Expression > _5676){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5674),_5675->asExpr(),_5676}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5677,    monty::rc_ptr< ::mosek::fusion::Expression > _5678,    double _5679) { return mosek::fusion::p_Expr::vstack(_5677,_5678,_5679); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5677,monty::rc_ptr< ::mosek::fusion::Expression > _5678,double _5679){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5677),_5678,::mosek::fusion::p_Expr::constTerm(_5679)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5680,    monty::rc_ptr< ::mosek::fusion::Expression > _5681,    monty::rc_ptr< ::mosek::fusion::Variable > _5682) { return mosek::fusion::p_Expr::vstack(_5680,_5681,_5682); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5680,monty::rc_ptr< ::mosek::fusion::Expression > _5681,monty::rc_ptr< ::mosek::fusion::Variable > _5682){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5680),_5681,_5682->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5683,    monty::rc_ptr< ::mosek::fusion::Expression > _5684,    monty::rc_ptr< ::mosek::fusion::Expression > _5685) { return mosek::fusion::p_Expr::vstack(_5683,_5684,_5685); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5683,monty::rc_ptr< ::mosek::fusion::Expression > _5684,monty::rc_ptr< ::mosek::fusion::Expression > _5685){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5683),_5684,_5685}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5686,    double _5687,    double _5688) { return mosek::fusion::p_Expr::vstack(_5686,_5687,_5688); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5686,double _5687,double _5688){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5686->asExpr(),::mosek::fusion::p_Expr::constTerm(_5687),::mosek::fusion::p_Expr::constTerm(_5688)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5689,    double _5690,    monty::rc_ptr< ::mosek::fusion::Variable > _5691) { return mosek::fusion::p_Expr::vstack(_5689,_5690,_5691); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5689,double _5690,monty::rc_ptr< ::mosek::fusion::Variable > _5691){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5689->asExpr(),::mosek::fusion::p_Expr::constTerm(_5690),_5691->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5692,    double _5693,    monty::rc_ptr< ::mosek::fusion::Expression > _5694) { return mosek::fusion::p_Expr::vstack(_5692,_5693,_5694); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5692,double _5693,monty::rc_ptr< ::mosek::fusion::Expression > _5694){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5692->asExpr(),::mosek::fusion::p_Expr::constTerm(_5693),_5694}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5695,    monty::rc_ptr< ::mosek::fusion::Variable > _5696,    double _5697) { return mosek::fusion::p_Expr::vstack(_5695,_5696,_5697); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5695,monty::rc_ptr< ::mosek::fusion::Variable > _5696,double _5697){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5695->asExpr(),_5696->asExpr(),::mosek::fusion::p_Expr::constTerm(_5697)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5698,    monty::rc_ptr< ::mosek::fusion::Variable > _5699,    monty::rc_ptr< ::mosek::fusion::Variable > _5700) { return mosek::fusion::p_Expr::vstack(_5698,_5699,_5700); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5698,monty::rc_ptr< ::mosek::fusion::Variable > _5699,monty::rc_ptr< ::mosek::fusion::Variable > _5700){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5698->asExpr(),_5699->asExpr(),_5700->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5701,    monty::rc_ptr< ::mosek::fusion::Variable > _5702,    monty::rc_ptr< ::mosek::fusion::Expression > _5703) { return mosek::fusion::p_Expr::vstack(_5701,_5702,_5703); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5701,monty::rc_ptr< ::mosek::fusion::Variable > _5702,monty::rc_ptr< ::mosek::fusion::Expression > _5703){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5701->asExpr(),_5702->asExpr(),_5703}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5704,    monty::rc_ptr< ::mosek::fusion::Expression > _5705,    double _5706) { return mosek::fusion::p_Expr::vstack(_5704,_5705,_5706); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5704,monty::rc_ptr< ::mosek::fusion::Expression > _5705,double _5706){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5704->asExpr(),_5705,::mosek::fusion::p_Expr::constTerm(_5706)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5707,    monty::rc_ptr< ::mosek::fusion::Expression > _5708,    monty::rc_ptr< ::mosek::fusion::Variable > _5709) { return mosek::fusion::p_Expr::vstack(_5707,_5708,_5709); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5707,monty::rc_ptr< ::mosek::fusion::Expression > _5708,monty::rc_ptr< ::mosek::fusion::Variable > _5709){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5707->asExpr(),_5708,_5709->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5710,    monty::rc_ptr< ::mosek::fusion::Expression > _5711,    monty::rc_ptr< ::mosek::fusion::Expression > _5712) { return mosek::fusion::p_Expr::vstack(_5710,_5711,_5712); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5710,monty::rc_ptr< ::mosek::fusion::Expression > _5711,monty::rc_ptr< ::mosek::fusion::Expression > _5712){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5710->asExpr(),_5711,_5712}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5713,    double _5714,    double _5715) { return mosek::fusion::p_Expr::vstack(_5713,_5714,_5715); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5713,double _5714,double _5715){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5713,::mosek::fusion::p_Expr::constTerm(_5714),::mosek::fusion::p_Expr::constTerm(_5715)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5716,    double _5717,    monty::rc_ptr< ::mosek::fusion::Variable > _5718) { return mosek::fusion::p_Expr::vstack(_5716,_5717,_5718); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5716,double _5717,monty::rc_ptr< ::mosek::fusion::Variable > _5718){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5716,::mosek::fusion::p_Expr::constTerm(_5717),_5718->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5719,    double _5720,    monty::rc_ptr< ::mosek::fusion::Expression > _5721) { return mosek::fusion::p_Expr::vstack(_5719,_5720,_5721); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5719,double _5720,monty::rc_ptr< ::mosek::fusion::Expression > _5721){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5719,::mosek::fusion::p_Expr::constTerm(_5720),_5721}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5722,    monty::rc_ptr< ::mosek::fusion::Variable > _5723,    double _5724) { return mosek::fusion::p_Expr::vstack(_5722,_5723,_5724); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5722,monty::rc_ptr< ::mosek::fusion::Variable > _5723,double _5724){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5722,_5723->asExpr(),::mosek::fusion::p_Expr::constTerm(_5724)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5725,    monty::rc_ptr< ::mosek::fusion::Variable > _5726,    monty::rc_ptr< ::mosek::fusion::Variable > _5727) { return mosek::fusion::p_Expr::vstack(_5725,_5726,_5727); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5725,monty::rc_ptr< ::mosek::fusion::Variable > _5726,monty::rc_ptr< ::mosek::fusion::Variable > _5727){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5725,_5726->asExpr(),_5727->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5728,    monty::rc_ptr< ::mosek::fusion::Variable > _5729,    monty::rc_ptr< ::mosek::fusion::Expression > _5730) { return mosek::fusion::p_Expr::vstack(_5728,_5729,_5730); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5728,monty::rc_ptr< ::mosek::fusion::Variable > _5729,monty::rc_ptr< ::mosek::fusion::Expression > _5730){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5728,_5729->asExpr(),_5730}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5731,    monty::rc_ptr< ::mosek::fusion::Expression > _5732,    double _5733) { return mosek::fusion::p_Expr::vstack(_5731,_5732,_5733); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5731,monty::rc_ptr< ::mosek::fusion::Expression > _5732,double _5733){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5731,_5732,::mosek::fusion::p_Expr::constTerm(_5733)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5734,    monty::rc_ptr< ::mosek::fusion::Expression > _5735,    monty::rc_ptr< ::mosek::fusion::Variable > _5736) { return mosek::fusion::p_Expr::vstack(_5734,_5735,_5736); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5734,monty::rc_ptr< ::mosek::fusion::Expression > _5735,monty::rc_ptr< ::mosek::fusion::Variable > _5736){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5734,_5735,_5736->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5737,    monty::rc_ptr< ::mosek::fusion::Expression > _5738,    monty::rc_ptr< ::mosek::fusion::Expression > _5739) { return mosek::fusion::p_Expr::vstack(_5737,_5738,_5739); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5737,monty::rc_ptr< ::mosek::fusion::Expression > _5738,monty::rc_ptr< ::mosek::fusion::Expression > _5739){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5737,_5738,_5739}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5740,    monty::rc_ptr< ::mosek::fusion::Variable > _5741) { return mosek::fusion::p_Expr::vstack(_5740,_5741); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5740,monty::rc_ptr< ::mosek::fusion::Variable > _5741){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5740),_5741->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5742,    monty::rc_ptr< ::mosek::fusion::Expression > _5743) { return mosek::fusion::p_Expr::vstack(_5742,_5743); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5742,monty::rc_ptr< ::mosek::fusion::Expression > _5743){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5742),_5743}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5744,    double _5745) { return mosek::fusion::p_Expr::vstack(_5744,_5745); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5744,double _5745){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5744->asExpr(),::mosek::fusion::p_Expr::constTerm(_5745)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5746,    monty::rc_ptr< ::mosek::fusion::Variable > _5747) { return mosek::fusion::p_Expr::vstack(_5746,_5747); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5746,monty::rc_ptr< ::mosek::fusion::Variable > _5747){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5746->asExpr(),_5747->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5748,    monty::rc_ptr< ::mosek::fusion::Expression > _5749) { return mosek::fusion::p_Expr::vstack(_5748,_5749); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5748,monty::rc_ptr< ::mosek::fusion::Expression > _5749){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5748->asExpr(),_5749}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5750,    double _5751) { return mosek::fusion::p_Expr::vstack(_5750,_5751); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5750,double _5751){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5750,::mosek::fusion::p_Expr::constTerm(_5751)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5752,    monty::rc_ptr< ::mosek::fusion::Variable > _5753) { return mosek::fusion::p_Expr::vstack(_5752,_5753); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5752,monty::rc_ptr< ::mosek::fusion::Variable > _5753){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5752,_5753->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5754,    monty::rc_ptr< ::mosek::fusion::Expression > _5755) { return mosek::fusion::p_Expr::vstack(_5754,_5755); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5754,monty::rc_ptr< ::mosek::fusion::Expression > _5755){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5754,_5755}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5756) { return mosek::fusion::p_Expr::vstack(_5756); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5756){ if (! _5756){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9290 = (int)0; int _9291 = (int)((_5756)->size(0)); for (int _5757 = _9290;_5757<_9291;++_5757){ if (! ((*_5756)(_5757))){ throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));}else {}}return ::mosek::fusion::p_Expr::stack_(_5756,(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5758,    monty::rc_ptr< ::mosek::fusion::Expression > _5759,    monty::rc_ptr< ::mosek::fusion::Expression > _5760) { return mosek::fusion::p_Expr::hstack(_5758,_5759,_5760); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5758,monty::rc_ptr< ::mosek::fusion::Expression > _5759,monty::rc_ptr< ::mosek::fusion::Expression > _5760){ if ((! _5758 || (! _5759 || ! _5760))){ throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));}else {}return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5758,_5759,_5760}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5761,    monty::rc_ptr< ::mosek::fusion::Expression > _5762,    monty::rc_ptr< ::mosek::fusion::Variable > _5763) { return mosek::fusion::p_Expr::hstack(_5761,_5762,_5763); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5761,monty::rc_ptr< ::mosek::fusion::Expression > _5762,monty::rc_ptr< ::mosek::fusion::Variable > _5763){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5761,_5762,_5763->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5764,    monty::rc_ptr< ::mosek::fusion::Expression > _5765,    double _5766) { return mosek::fusion::p_Expr::hstack(_5764,_5765,_5766); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5764,monty::rc_ptr< ::mosek::fusion::Expression > _5765,double _5766){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5764,_5765,::mosek::fusion::p_Expr::constTerm(_5766)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5767,    monty::rc_ptr< ::mosek::fusion::Variable > _5768,    monty::rc_ptr< ::mosek::fusion::Expression > _5769) { return mosek::fusion::p_Expr::hstack(_5767,_5768,_5769); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5767,monty::rc_ptr< ::mosek::fusion::Variable > _5768,monty::rc_ptr< ::mosek::fusion::Expression > _5769){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5767,_5768->asExpr(),_5769}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5770,    monty::rc_ptr< ::mosek::fusion::Variable > _5771,    monty::rc_ptr< ::mosek::fusion::Variable > _5772) { return mosek::fusion::p_Expr::hstack(_5770,_5771,_5772); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5770,monty::rc_ptr< ::mosek::fusion::Variable > _5771,monty::rc_ptr< ::mosek::fusion::Variable > _5772){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5770,_5771->asExpr(),_5772->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5773,    monty::rc_ptr< ::mosek::fusion::Variable > _5774,    double _5775) { return mosek::fusion::p_Expr::hstack(_5773,_5774,_5775); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5773,monty::rc_ptr< ::mosek::fusion::Variable > _5774,double _5775){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5773,_5774->asExpr(),::mosek::fusion::p_Expr::constTerm(_5775)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5776,    double _5777,    monty::rc_ptr< ::mosek::fusion::Expression > _5778) { return mosek::fusion::p_Expr::hstack(_5776,_5777,_5778); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5776,double _5777,monty::rc_ptr< ::mosek::fusion::Expression > _5778){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5776,::mosek::fusion::p_Expr::constTerm(_5777),_5778}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5779,    double _5780,    monty::rc_ptr< ::mosek::fusion::Variable > _5781) { return mosek::fusion::p_Expr::hstack(_5779,_5780,_5781); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5779,double _5780,monty::rc_ptr< ::mosek::fusion::Variable > _5781){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5779,::mosek::fusion::p_Expr::constTerm(_5780),_5781->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5782,    double _5783,    double _5784) { return mosek::fusion::p_Expr::hstack(_5782,_5783,_5784); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5782,double _5783,double _5784){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5782,::mosek::fusion::p_Expr::constTerm(_5783),::mosek::fusion::p_Expr::constTerm(_5784)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5785,    monty::rc_ptr< ::mosek::fusion::Expression > _5786,    monty::rc_ptr< ::mosek::fusion::Expression > _5787) { return mosek::fusion::p_Expr::hstack(_5785,_5786,_5787); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5785,monty::rc_ptr< ::mosek::fusion::Expression > _5786,monty::rc_ptr< ::mosek::fusion::Expression > _5787){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5785->asExpr(),_5786,_5787}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5788,    monty::rc_ptr< ::mosek::fusion::Expression > _5789,    monty::rc_ptr< ::mosek::fusion::Variable > _5790) { return mosek::fusion::p_Expr::hstack(_5788,_5789,_5790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5788,monty::rc_ptr< ::mosek::fusion::Expression > _5789,monty::rc_ptr< ::mosek::fusion::Variable > _5790){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5788->asExpr(),_5789,_5790->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5791,    monty::rc_ptr< ::mosek::fusion::Expression > _5792,    double _5793) { return mosek::fusion::p_Expr::hstack(_5791,_5792,_5793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5791,monty::rc_ptr< ::mosek::fusion::Expression > _5792,double _5793){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5791->asExpr(),_5792,::mosek::fusion::p_Expr::constTerm(_5793)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5794,    monty::rc_ptr< ::mosek::fusion::Variable > _5795,    monty::rc_ptr< ::mosek::fusion::Expression > _5796) { return mosek::fusion::p_Expr::hstack(_5794,_5795,_5796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5794,monty::rc_ptr< ::mosek::fusion::Variable > _5795,monty::rc_ptr< ::mosek::fusion::Expression > _5796){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5794->asExpr(),_5795->asExpr(),_5796}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5797,    monty::rc_ptr< ::mosek::fusion::Variable > _5798,    monty::rc_ptr< ::mosek::fusion::Variable > _5799) { return mosek::fusion::p_Expr::hstack(_5797,_5798,_5799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5797,monty::rc_ptr< ::mosek::fusion::Variable > _5798,monty::rc_ptr< ::mosek::fusion::Variable > _5799){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5797->asExpr(),_5798->asExpr(),_5799->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5800,    monty::rc_ptr< ::mosek::fusion::Variable > _5801,    double _5802) { return mosek::fusion::p_Expr::hstack(_5800,_5801,_5802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5800,monty::rc_ptr< ::mosek::fusion::Variable > _5801,double _5802){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5800->asExpr(),_5801->asExpr(),::mosek::fusion::p_Expr::constTerm(_5802)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5803,    double _5804,    monty::rc_ptr< ::mosek::fusion::Expression > _5805) { return mosek::fusion::p_Expr::hstack(_5803,_5804,_5805); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5803,double _5804,monty::rc_ptr< ::mosek::fusion::Expression > _5805){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5803->asExpr(),::mosek::fusion::p_Expr::constTerm(_5804),_5805}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5806,    double _5807,    monty::rc_ptr< ::mosek::fusion::Variable > _5808) { return mosek::fusion::p_Expr::hstack(_5806,_5807,_5808); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5806,double _5807,monty::rc_ptr< ::mosek::fusion::Variable > _5808){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5806->asExpr(),::mosek::fusion::p_Expr::constTerm(_5807),_5808->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5809,    double _5810,    double _5811) { return mosek::fusion::p_Expr::hstack(_5809,_5810,_5811); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5809,double _5810,double _5811){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5809->asExpr(),::mosek::fusion::p_Expr::constTerm(_5810),::mosek::fusion::p_Expr::constTerm(_5811)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5812,    monty::rc_ptr< ::mosek::fusion::Expression > _5813,    monty::rc_ptr< ::mosek::fusion::Expression > _5814) { return mosek::fusion::p_Expr::hstack(_5812,_5813,_5814); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5812,monty::rc_ptr< ::mosek::fusion::Expression > _5813,monty::rc_ptr< ::mosek::fusion::Expression > _5814){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5812),_5813,_5814}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5815,    monty::rc_ptr< ::mosek::fusion::Expression > _5816,    monty::rc_ptr< ::mosek::fusion::Variable > _5817) { return mosek::fusion::p_Expr::hstack(_5815,_5816,_5817); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5815,monty::rc_ptr< ::mosek::fusion::Expression > _5816,monty::rc_ptr< ::mosek::fusion::Variable > _5817){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5815),_5816,_5817->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5818,    monty::rc_ptr< ::mosek::fusion::Expression > _5819,    double _5820) { return mosek::fusion::p_Expr::hstack(_5818,_5819,_5820); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5818,monty::rc_ptr< ::mosek::fusion::Expression > _5819,double _5820){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5818),_5819,::mosek::fusion::p_Expr::constTerm(_5820)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5821,    monty::rc_ptr< ::mosek::fusion::Variable > _5822,    monty::rc_ptr< ::mosek::fusion::Expression > _5823) { return mosek::fusion::p_Expr::hstack(_5821,_5822,_5823); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5821,monty::rc_ptr< ::mosek::fusion::Variable > _5822,monty::rc_ptr< ::mosek::fusion::Expression > _5823){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5821),_5822->asExpr(),_5823}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5824,    monty::rc_ptr< ::mosek::fusion::Variable > _5825,    monty::rc_ptr< ::mosek::fusion::Variable > _5826) { return mosek::fusion::p_Expr::hstack(_5824,_5825,_5826); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5824,monty::rc_ptr< ::mosek::fusion::Variable > _5825,monty::rc_ptr< ::mosek::fusion::Variable > _5826){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5824),_5825->asExpr(),_5826->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5827,    monty::rc_ptr< ::mosek::fusion::Variable > _5828,    double _5829) { return mosek::fusion::p_Expr::hstack(_5827,_5828,_5829); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5827,monty::rc_ptr< ::mosek::fusion::Variable > _5828,double _5829){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5827),_5828->asExpr(),::mosek::fusion::p_Expr::constTerm(_5829)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5830,    double _5831,    monty::rc_ptr< ::mosek::fusion::Expression > _5832) { return mosek::fusion::p_Expr::hstack(_5830,_5831,_5832); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5830,double _5831,monty::rc_ptr< ::mosek::fusion::Expression > _5832){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5830),::mosek::fusion::p_Expr::constTerm(_5831),_5832}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5833,    double _5834,    monty::rc_ptr< ::mosek::fusion::Variable > _5835) { return mosek::fusion::p_Expr::hstack(_5833,_5834,_5835); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5833,double _5834,monty::rc_ptr< ::mosek::fusion::Variable > _5835){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5833),::mosek::fusion::p_Expr::constTerm(_5834),_5835->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5836,    monty::rc_ptr< ::mosek::fusion::Expression > _5837) { return mosek::fusion::p_Expr::hstack(_5836,_5837); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5836,monty::rc_ptr< ::mosek::fusion::Expression > _5837){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5836->asExpr(),_5837}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5838,    monty::rc_ptr< ::mosek::fusion::Variable > _5839) { return mosek::fusion::p_Expr::hstack(_5838,_5839); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5838,monty::rc_ptr< ::mosek::fusion::Variable > _5839){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5838->asExpr(),_5839->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5840,    double _5841) { return mosek::fusion::p_Expr::hstack(_5840,_5841); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5840,double _5841){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5840->asExpr(),::mosek::fusion::p_Expr::constTerm(_5841)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5842,    monty::rc_ptr< ::mosek::fusion::Expression > _5843) { return mosek::fusion::p_Expr::hstack(_5842,_5843); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5842,monty::rc_ptr< ::mosek::fusion::Expression > _5843){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5842),_5843}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5844,    monty::rc_ptr< ::mosek::fusion::Variable > _5845) { return mosek::fusion::p_Expr::hstack(_5844,_5845); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5844,monty::rc_ptr< ::mosek::fusion::Variable > _5845){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5844),_5845->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5846,    monty::rc_ptr< ::mosek::fusion::Variable > _5847) { return mosek::fusion::p_Expr::hstack(_5846,_5847); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5846,monty::rc_ptr< ::mosek::fusion::Variable > _5847){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5846,_5847->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5848,    double _5849) { return mosek::fusion::p_Expr::hstack(_5848,_5849); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5848,double _5849){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5848,::mosek::fusion::p_Expr::constTerm(_5849)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5850,    monty::rc_ptr< ::mosek::fusion::Expression > _5851) { return mosek::fusion::p_Expr::hstack(_5850,_5851); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5850,monty::rc_ptr< ::mosek::fusion::Expression > _5851){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5850,_5851}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5852) { return mosek::fusion::p_Expr::hstack(_5852); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5852){ if (! _5852){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9292 = (int)0; int _9293 = (int)((_5852)->size(0)); for (int _5853 = _9292;_5853<_9293;++_5853){ if (! ((*_5852)(_5853))){ throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));}else {}}return ::mosek::fusion::p_Expr::stack_(_5852,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5854,    monty::rc_ptr< ::mosek::fusion::Expression > _5855,    monty::rc_ptr< ::mosek::fusion::Expression > _5856,    monty::rc_ptr< ::mosek::fusion::Expression > _5857) { return mosek::fusion::p_Expr::stack(_5854,_5855,_5856,_5857); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5854,monty::rc_ptr< ::mosek::fusion::Expression > _5855,monty::rc_ptr< ::mosek::fusion::Expression > _5856,monty::rc_ptr< ::mosek::fusion::Expression > _5857){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5855,_5856,_5857}),_5854); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5858,    monty::rc_ptr< ::mosek::fusion::Expression > _5859,    monty::rc_ptr< ::mosek::fusion::Expression > _5860,    monty::rc_ptr< ::mosek::fusion::Variable > _5861) { return mosek::fusion::p_Expr::stack(_5858,_5859,_5860,_5861); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5858,monty::rc_ptr< ::mosek::fusion::Expression > _5859,monty::rc_ptr< ::mosek::fusion::Expression > _5860,monty::rc_ptr< ::mosek::fusion::Variable > _5861){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5859,_5860,_5861->asExpr()}),_5858); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5862,    monty::rc_ptr< ::mosek::fusion::Expression > _5863,    monty::rc_ptr< ::mosek::fusion::Expression > _5864,    double _5865) { return mosek::fusion::p_Expr::stack(_5862,_5863,_5864,_5865); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5862,monty::rc_ptr< ::mosek::fusion::Expression > _5863,monty::rc_ptr< ::mosek::fusion::Expression > _5864,double _5865){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5863,_5864,::mosek::fusion::p_Expr::constTerm(_5865)}),_5862); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5866,    monty::rc_ptr< ::mosek::fusion::Expression > _5867,    monty::rc_ptr< ::mosek::fusion::Variable > _5868,    monty::rc_ptr< ::mosek::fusion::Expression > _5869) { return mosek::fusion::p_Expr::stack(_5866,_5867,_5868,_5869); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5866,monty::rc_ptr< ::mosek::fusion::Expression > _5867,monty::rc_ptr< ::mosek::fusion::Variable > _5868,monty::rc_ptr< ::mosek::fusion::Expression > _5869){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5867,_5868->asExpr(),_5869}),_5866); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5870,    monty::rc_ptr< ::mosek::fusion::Expression > _5871,    monty::rc_ptr< ::mosek::fusion::Variable > _5872,    monty::rc_ptr< ::mosek::fusion::Variable > _5873) { return mosek::fusion::p_Expr::stack(_5870,_5871,_5872,_5873); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5870,monty::rc_ptr< ::mosek::fusion::Expression > _5871,monty::rc_ptr< ::mosek::fusion::Variable > _5872,monty::rc_ptr< ::mosek::fusion::Variable > _5873){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5871,_5872->asExpr(),_5873->asExpr()}),_5870); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5874,    monty::rc_ptr< ::mosek::fusion::Expression > _5875,    monty::rc_ptr< ::mosek::fusion::Variable > _5876,    double _5877) { return mosek::fusion::p_Expr::stack(_5874,_5875,_5876,_5877); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5874,monty::rc_ptr< ::mosek::fusion::Expression > _5875,monty::rc_ptr< ::mosek::fusion::Variable > _5876,double _5877){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5875,_5876->asExpr(),::mosek::fusion::p_Expr::constTerm(_5877)}),_5874); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5878,    monty::rc_ptr< ::mosek::fusion::Expression > _5879,    double _5880,    monty::rc_ptr< ::mosek::fusion::Expression > _5881) { return mosek::fusion::p_Expr::stack(_5878,_5879,_5880,_5881); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5878,monty::rc_ptr< ::mosek::fusion::Expression > _5879,double _5880,monty::rc_ptr< ::mosek::fusion::Expression > _5881){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5879,::mosek::fusion::p_Expr::constTerm(_5880),_5881}),_5878); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5882,    monty::rc_ptr< ::mosek::fusion::Expression > _5883,    double _5884,    monty::rc_ptr< ::mosek::fusion::Variable > _5885) { return mosek::fusion::p_Expr::stack(_5882,_5883,_5884,_5885); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5882,monty::rc_ptr< ::mosek::fusion::Expression > _5883,double _5884,monty::rc_ptr< ::mosek::fusion::Variable > _5885){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5883,::mosek::fusion::p_Expr::constTerm(_5884),_5885->asExpr()}),_5882); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5886,    monty::rc_ptr< ::mosek::fusion::Expression > _5887,    double _5888,    double _5889) { return mosek::fusion::p_Expr::stack(_5886,_5887,_5888,_5889); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5886,monty::rc_ptr< ::mosek::fusion::Expression > _5887,double _5888,double _5889){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5887,::mosek::fusion::p_Expr::constTerm(_5888),::mosek::fusion::p_Expr::constTerm(_5889)}),_5886); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5890,    monty::rc_ptr< ::mosek::fusion::Variable > _5891,    monty::rc_ptr< ::mosek::fusion::Expression > _5892,    monty::rc_ptr< ::mosek::fusion::Expression > _5893) { return mosek::fusion::p_Expr::stack(_5890,_5891,_5892,_5893); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5890,monty::rc_ptr< ::mosek::fusion::Variable > _5891,monty::rc_ptr< ::mosek::fusion::Expression > _5892,monty::rc_ptr< ::mosek::fusion::Expression > _5893){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5891->asExpr(),_5892,_5893}),_5890); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5894,    monty::rc_ptr< ::mosek::fusion::Variable > _5895,    monty::rc_ptr< ::mosek::fusion::Expression > _5896,    monty::rc_ptr< ::mosek::fusion::Variable > _5897) { return mosek::fusion::p_Expr::stack(_5894,_5895,_5896,_5897); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5894,monty::rc_ptr< ::mosek::fusion::Variable > _5895,monty::rc_ptr< ::mosek::fusion::Expression > _5896,monty::rc_ptr< ::mosek::fusion::Variable > _5897){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5895->asExpr(),_5896,_5897->asExpr()}),_5894); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5898,    monty::rc_ptr< ::mosek::fusion::Variable > _5899,    monty::rc_ptr< ::mosek::fusion::Expression > _5900,    double _5901) { return mosek::fusion::p_Expr::stack(_5898,_5899,_5900,_5901); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5898,monty::rc_ptr< ::mosek::fusion::Variable > _5899,monty::rc_ptr< ::mosek::fusion::Expression > _5900,double _5901){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5899->asExpr(),_5900,::mosek::fusion::p_Expr::constTerm(_5901)}),_5898); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5902,    monty::rc_ptr< ::mosek::fusion::Variable > _5903,    monty::rc_ptr< ::mosek::fusion::Variable > _5904,    monty::rc_ptr< ::mosek::fusion::Expression > _5905) { return mosek::fusion::p_Expr::stack(_5902,_5903,_5904,_5905); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5902,monty::rc_ptr< ::mosek::fusion::Variable > _5903,monty::rc_ptr< ::mosek::fusion::Variable > _5904,monty::rc_ptr< ::mosek::fusion::Expression > _5905){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5903->asExpr(),_5904->asExpr(),_5905}),_5902); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5906,    monty::rc_ptr< ::mosek::fusion::Variable > _5907,    monty::rc_ptr< ::mosek::fusion::Variable > _5908,    monty::rc_ptr< ::mosek::fusion::Variable > _5909) { return mosek::fusion::p_Expr::stack(_5906,_5907,_5908,_5909); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5906,monty::rc_ptr< ::mosek::fusion::Variable > _5907,monty::rc_ptr< ::mosek::fusion::Variable > _5908,monty::rc_ptr< ::mosek::fusion::Variable > _5909){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5907->asExpr(),_5908->asExpr(),_5909->asExpr()}),_5906); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5910,    monty::rc_ptr< ::mosek::fusion::Variable > _5911,    monty::rc_ptr< ::mosek::fusion::Variable > _5912,    double _5913) { return mosek::fusion::p_Expr::stack(_5910,_5911,_5912,_5913); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5910,monty::rc_ptr< ::mosek::fusion::Variable > _5911,monty::rc_ptr< ::mosek::fusion::Variable > _5912,double _5913){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5911->asExpr(),_5912->asExpr(),::mosek::fusion::p_Expr::constTerm(_5913)}),_5910); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5914,    monty::rc_ptr< ::mosek::fusion::Variable > _5915,    double _5916,    monty::rc_ptr< ::mosek::fusion::Expression > _5917) { return mosek::fusion::p_Expr::stack(_5914,_5915,_5916,_5917); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5914,monty::rc_ptr< ::mosek::fusion::Variable > _5915,double _5916,monty::rc_ptr< ::mosek::fusion::Expression > _5917){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5915->asExpr(),::mosek::fusion::p_Expr::constTerm(_5916),_5917}),_5914); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5918,    monty::rc_ptr< ::mosek::fusion::Variable > _5919,    double _5920,    monty::rc_ptr< ::mosek::fusion::Variable > _5921) { return mosek::fusion::p_Expr::stack(_5918,_5919,_5920,_5921); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5918,monty::rc_ptr< ::mosek::fusion::Variable > _5919,double _5920,monty::rc_ptr< ::mosek::fusion::Variable > _5921){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5919->asExpr(),::mosek::fusion::p_Expr::constTerm(_5920),_5921->asExpr()}),_5918); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5922,    monty::rc_ptr< ::mosek::fusion::Variable > _5923,    double _5924,    double _5925) { return mosek::fusion::p_Expr::stack(_5922,_5923,_5924,_5925); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5922,monty::rc_ptr< ::mosek::fusion::Variable > _5923,double _5924,double _5925){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5923->asExpr(),::mosek::fusion::p_Expr::constTerm(_5924),::mosek::fusion::p_Expr::constTerm(_5925)}),_5922); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5926,    double _5927,    monty::rc_ptr< ::mosek::fusion::Expression > _5928,    monty::rc_ptr< ::mosek::fusion::Expression > _5929) { return mosek::fusion::p_Expr::stack(_5926,_5927,_5928,_5929); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5926,double _5927,monty::rc_ptr< ::mosek::fusion::Expression > _5928,monty::rc_ptr< ::mosek::fusion::Expression > _5929){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5927),_5928,_5929}),_5926); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5930,    double _5931,    monty::rc_ptr< ::mosek::fusion::Expression > _5932,    monty::rc_ptr< ::mosek::fusion::Variable > _5933) { return mosek::fusion::p_Expr::stack(_5930,_5931,_5932,_5933); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5930,double _5931,monty::rc_ptr< ::mosek::fusion::Expression > _5932,monty::rc_ptr< ::mosek::fusion::Variable > _5933){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5931),_5932,_5933->asExpr()}),_5930); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5934,    double _5935,    monty::rc_ptr< ::mosek::fusion::Expression > _5936,    double _5937) { return mosek::fusion::p_Expr::stack(_5934,_5935,_5936,_5937); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5934,double _5935,monty::rc_ptr< ::mosek::fusion::Expression > _5936,double _5937){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5935),_5936,::mosek::fusion::p_Expr::constTerm(_5937)}),_5934); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5938,    double _5939,    monty::rc_ptr< ::mosek::fusion::Variable > _5940,    monty::rc_ptr< ::mosek::fusion::Expression > _5941) { return mosek::fusion::p_Expr::stack(_5938,_5939,_5940,_5941); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5938,double _5939,monty::rc_ptr< ::mosek::fusion::Variable > _5940,monty::rc_ptr< ::mosek::fusion::Expression > _5941){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5939),_5940->asExpr(),_5941}),_5938); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5942,    double _5943,    monty::rc_ptr< ::mosek::fusion::Variable > _5944,    monty::rc_ptr< ::mosek::fusion::Variable > _5945) { return mosek::fusion::p_Expr::stack(_5942,_5943,_5944,_5945); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5942,double _5943,monty::rc_ptr< ::mosek::fusion::Variable > _5944,monty::rc_ptr< ::mosek::fusion::Variable > _5945){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5943),_5944->asExpr(),_5945->asExpr()}),_5942); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5946,    double _5947,    monty::rc_ptr< ::mosek::fusion::Variable > _5948,    double _5949) { return mosek::fusion::p_Expr::stack(_5946,_5947,_5948,_5949); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5946,double _5947,monty::rc_ptr< ::mosek::fusion::Variable > _5948,double _5949){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5947),_5948->asExpr(),::mosek::fusion::p_Expr::constTerm(_5949)}),_5946); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5950,    double _5951,    double _5952,    monty::rc_ptr< ::mosek::fusion::Expression > _5953) { return mosek::fusion::p_Expr::stack(_5950,_5951,_5952,_5953); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5950,double _5951,double _5952,monty::rc_ptr< ::mosek::fusion::Expression > _5953){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5951),::mosek::fusion::p_Expr::constTerm(_5952),_5953}),_5950); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5954,    double _5955,    double _5956,    monty::rc_ptr< ::mosek::fusion::Variable > _5957) { return mosek::fusion::p_Expr::stack(_5954,_5955,_5956,_5957); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5954,double _5955,double _5956,monty::rc_ptr< ::mosek::fusion::Variable > _5957){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5955),::mosek::fusion::p_Expr::constTerm(_5956),_5957->asExpr()}),_5954); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5958,    monty::rc_ptr< ::mosek::fusion::Variable > _5959,    monty::rc_ptr< ::mosek::fusion::Expression > _5960) { return mosek::fusion::p_Expr::stack(_5958,_5959,_5960); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5958,monty::rc_ptr< ::mosek::fusion::Variable > _5959,monty::rc_ptr< ::mosek::fusion::Expression > _5960){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5959->asExpr(),_5960}),_5958); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5961,    monty::rc_ptr< ::mosek::fusion::Variable > _5962,    monty::rc_ptr< ::mosek::fusion::Variable > _5963) { return mosek::fusion::p_Expr::stack(_5961,_5962,_5963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5961,monty::rc_ptr< ::mosek::fusion::Variable > _5962,monty::rc_ptr< ::mosek::fusion::Variable > _5963){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5962->asExpr(),_5963->asExpr()}),_5961); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5964,    monty::rc_ptr< ::mosek::fusion::Variable > _5965,    double _5966) { return mosek::fusion::p_Expr::stack(_5964,_5965,_5966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5964,monty::rc_ptr< ::mosek::fusion::Variable > _5965,double _5966){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5965->asExpr(),::mosek::fusion::p_Expr::constTerm(_5966)}),_5964); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5967,    double _5968,    monty::rc_ptr< ::mosek::fusion::Expression > _5969) { return mosek::fusion::p_Expr::stack(_5967,_5968,_5969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5967,double _5968,monty::rc_ptr< ::mosek::fusion::Expression > _5969){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5968),_5969}),_5967); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5970,    double _5971,    monty::rc_ptr< ::mosek::fusion::Variable > _5972) { return mosek::fusion::p_Expr::stack(_5970,_5971,_5972); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5970,double _5971,monty::rc_ptr< ::mosek::fusion::Variable > _5972){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5971),_5972->asExpr()}),_5970); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5973,    monty::rc_ptr< ::mosek::fusion::Expression > _5974,    monty::rc_ptr< ::mosek::fusion::Variable > _5975) { return mosek::fusion::p_Expr::stack(_5973,_5974,_5975); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5973,monty::rc_ptr< ::mosek::fusion::Expression > _5974,monty::rc_ptr< ::mosek::fusion::Variable > _5975){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5974,_5975->asExpr()}),_5973); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5976,    monty::rc_ptr< ::mosek::fusion::Expression > _5977,    double _5978) { return mosek::fusion::p_Expr::stack(_5976,_5977,_5978); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5976,monty::rc_ptr< ::mosek::fusion::Expression > _5977,double _5978){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5977,::mosek::fusion::p_Expr::constTerm(_5978)}),_5976); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5979,    monty::rc_ptr< ::mosek::fusion::Expression > _5980,    monty::rc_ptr< ::mosek::fusion::Expression > _5981) { return mosek::fusion::p_Expr::stack(_5979,_5980,_5981); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5979,monty::rc_ptr< ::mosek::fusion::Expression > _5980,monty::rc_ptr< ::mosek::fusion::Expression > _5981){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5980,_5981}),_5979); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5982,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5983) { return mosek::fusion::p_Expr::stack(_5982,_5983); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5982,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5983){ return ::mosek::fusion::p_Expr::stack_(_5983,_5982); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5984,int _5985){ if (((int)((_5984)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}if (((int)((_5984)->size(0)) == (int)1)){ return ((*_5984)((int)0)); }else {}int _5986 = (_5985 + (int)1); int _9294 = (int)0; int _9295 = (int)((_5984)->size(0)); for (int _5987 = _9294;_5987<_9295;++_5987){ if ((mosek::fusion::p_Set::_get_impl(((*_5984)(_5987))->shape())->nd > _5986)){ (_5986 = mosek::fusion::p_Set::_get_impl(((*_5984)(_5987))->shape())->nd); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > > _5988 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 >(monty::shape((int)((_5984)->size(0))))); monty::rc_ptr< ::mosek::fusion::Expression > _5989 = ((*_5984)((int)0)); std::shared_ptr< monty::ndarray< int,1 > > _5990 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5986))); bool _5991 = true; bool _5992 = false; monty::rc_ptr< ::mosek::fusion::Expression > _5993 = nullptr; int _5994 = (int)0; std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5995 = nullptr; if ((mosek::fusion::p_Set::_get_impl(_5989->shape())->nd < _5985)){ throw ::mosek::fusion::LengthError(std::string ("Invalid stack dimension"));}else {}int _9296 = (int)0; int _9297 = (int)((_5988)->size(0)); for (int _5996 = _9296;_5996<_9297;++_5996){ monty::rc_ptr< ::mosek::fusion::Expression > _5997 = ((*_5984)(_5996)); int _9298 = (int)0; int _9299 = mosek::fusion::p_Set::_get_impl(_5997->shape())->nd; for (int _5998 = _9298;_5998<_9299;++_5998){ if (((_5985 != _5998) && (_5989->shape()->dim(_5998) != _5997->shape()->dim(_5998)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));}else {}}(((*_5990)(_5985)) = (((*_5990)(_5985)) + _5997->shape()->dim(_5985))); (((*_5988)(_5996)) = ((*_5984)(_5996))->eval()); (_5994 = (_5994 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_5996)))->x)->size(0)))); (_5991 = (_5991 && ! mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_5996)))->inst)); (_5992 = (_5992 || mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_5996)))->bfix)); }std::shared_ptr< monty::ndarray< long long,1 > > _5999 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5988)->size(0))))); { (_5995 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_5994)))); int _6000 = (int)0; int _9300 = (int)0; int _9301 = (int)((_5988)->size(0)); for (int _6001 = _9300;_6001<_9301;++_6001){ int _9302 = (int)0; int _9303 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6001)))->x)->size(0)); for (int _6002 = _9302;_6002<_9303;++_6002){ (((*_5995)(_6000)) = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6001)))->x)(_6002))); ( ++ _6000 ); }}int _9304 = (int)1; int _9305 = (int)((_5988)->size(0)); for (int _6003 = _9304;_6003<_9305;++_6003){ (((*_5999)(_6003)) = ((*_5999)((_6003 - (int)1)))); int _9306 = (int)0; int _9307 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)((_6003 - (int)1))))->x)->size(0)); for (int _6004 = _9306;_6004<_9307;++_6004){ (((*_5999)(_6003)) = (((*_5999)(_6003)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)((_6003 - (int)1))))->x)(_6004))->size())); }}}int _9308 = (int)0; int _9309 = _5986; for (int _6005 = _9308;_6005<_9309;++_6005){ if ((_6005 != _5985)){ (((*_5990)(_6005)) = _5989->shape()->dim(_6005)); }else {}}monty::rc_ptr< ::mosek::fusion::NDSet > _6006 = ::mosek::fusion::p_NDSet::_new_NDSet(_5990); long long _6007 = mosek::fusion::p_FlatExpr::_get_impl(((*_5988)((int)0)))->nnz; int _6008 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)((int)0)))->ptrb)->size(0)) - (int)1); int _9310 = (int)1; int _9311 = (int)((_5984)->size(0)); for (int _6009 = _9310;_6009<_9311;++_6009){ (_6007 = (_6007 + mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6009)))->nnz)); (_6008 = ((_6008 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6009)))->ptrb)->size(0))) - (int)1)); }std::shared_ptr< monty::ndarray< double,1 > > _6010 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (! _5992)) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6008)))); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6011 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< long long,1 > > > _9312; for (int _6012=(int)0, _9313=(int)((_5988)->size(0)); _6012 < _9313;++_6012)_9312.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6012)))->ptrb); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape(_9312.size()),_9312.begin(),_9312.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6013 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< long long,1 > > > _9314; for (int _6014=(int)0, _9315=(int)((_5988)->size(0)); _6014 < _9315;++_6014)_9314.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6014)))->subj); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape(_9314.size()),_9314.begin(),_9314.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6015 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _9316; for (int _6016=(int)0, _9317=(int)((_5988)->size(0)); _6016 < _9317;++_6016)_9316.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6016)))->cof); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_9316.size()),_9316.begin(),_9316.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6017 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _9318; for (int _6018=(int)0, _9319=(int)((_5988)->size(0)); _6018 < _9319;++_6018)_9318.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6018)))->bfix); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_9318.size()),_9318.begin(),_9318.end())); })(); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6019 = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< long long,1 > > > _9320; for (int _6020=(int)0, _9321=(int)((_5988)->size(0)); _6020 < _9321;++_6020)_9320.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6020)))->inst); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape(_9320.size()),_9320.begin(),_9320.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6021 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9322; for (int _6022=(int)0, _9323=(int)((_5988)->size(0)); _6022 < _9323;++_6022)_9322.push_back(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6022)))->nnz); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9322.size()),_9322.begin(),_9322.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6023 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9324; for (int _6024=(int)0, _9325=(int)((_5988)->size(0)); _6024 < _9325;++_6024)_9324.push_back(mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6024)))->shape)->size); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9324.size()),_9324.begin(),_9324.end())); })(); if ((_5985 == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _6025 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6008 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6026 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6007))); std::shared_ptr< monty::ndarray< double,1 > > _6027 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6007))); std::shared_ptr< monty::ndarray< long long,1 > > _6028 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5991) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6008)))); })(); long long _6029 = (long long)0; long long _6030 = (long long)0; long long _6031 = (long long)0; int _9326 = (int)0; int _9327 = (int)((_6011)->size(0)); for (int _6032 = _9326;_6032<_9327;++_6032){ ::mosek::fusion::Utils::Tools::arraycopy(((*_6015)(_6032)),(long long)0,_6027,_6030,((*_6021)(_6032))); if (((*_6017)(_6032))){ ::mosek::fusion::Utils::Tools::arraycopy(((*_6017)(_6032)),(long long)0,_6010,_6029,(long long)((((*_6017)(_6032)))->size(0))); }else {}int _9328 = (int)0; int _9329 = ((int)((((*_6011)(_6032)))->size(0)) - (int)1); for (int _6033 = _9328;_6033<_9329;++_6033){ (((*_6025)(((_6029 + _6033) + (int)1))) = (((*((*_6011)(_6032)))((_6033 + (int)1))) + _6030)); }long long _9330 = (long long)0; long long _9331 = ((*_6021)(_6032)); for (long long _6034 = _9330;_6034<_9331;++_6034){ (((*_6026)((_6030 + _6034))) = (((*_5999)(_6032)) + ((*((*_6013)(_6032)))(_6034)))); }if ((! _5991)){ if (! ((*_6019)(_6032))){ int _9332 = (int)0; int _9333 = ((int)((((*_6011)(_6032)))->size(0)) - (int)1); for (int _6035 = _9332;_6035<_9333;++_6035){ (((*_6028)((_6029 + _6035))) = (_6031 + _6035)); }(_6029 += ((int)((((*_6011)(_6032)))->size(0)) - (int)1)); }else { int _9334 = (int)0; int _9335 = (int)((((*_6019)(_6032)))->size(0)); for (int _6036 = _9334;_6036<_9335;++_6036){ (((*_6028)((_6029 + _6036))) = (_6031 + ((*((*_6019)(_6032)))(_6036)))); }(_6029 += (int)((((*_6019)(_6032)))->size(0))); }}else { (_6029 += ((int)((((*_6011)(_6032)))->size(0)) - (int)1)); }(_6031 += ((*_6023)(_6032))); (_6030 += ((*_6021)(_6032))); }(_5993 = ::mosek::fusion::p_Expr::_new_Expr(_6025,_5995,_6026,_6027,_6010,::mosek::fusion::Set::t(_6006),_6028)); }else { std::shared_ptr< monty::ndarray< long long,1 > > _6037 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6008 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6038 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6007))); std::shared_ptr< monty::ndarray< double,1 > > _6039 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6007))); std::shared_ptr< monty::ndarray< long long,1 > > _6040 = nullptr; long long _6041 = (long long)0; long long _6042 = (long long)0; long long _6043 = (long long)0; int _6044 = (int)1; int _9336 = (int)0; int _9337 = _5985; for (int _6045 = _9336;_6045<_9337;++_6045){ (_6044 *= ((*_5990)(_6045))); }int _6046 = (int)1; int _9338 = (_5985 + (int)1); int _9339 = (int)((_5990)->size(0)); for (int _6047 = _9338;_6047<_9339;++_6047){ (_6046 *= ((*_5990)(_6047))); }int _6048 = _6046; (_6046 = (_6046 * ((*_5990)(_5985)))); std::shared_ptr< monty::ndarray< int,1 > > _6049 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9340; for (int _6050=(int)0, _9341=(int)((_5988)->size(0)); _6050 < _9341;++_6050)_9340.push_back((_6048 * mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6050)))->shape->dim(_5985))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9340.size()),_9340.begin(),_9340.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6051 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5988)->size(0))))); if (_5991){ int _9342 = (int)0; int _9343 = _6044; for (int _6052 = _9342;_6052<_9343;++_6052){ int _9344 = (int)0; int _9345 = (int)((_5988)->size(0)); for (int _6053 = _9344;_6053<_9345;++_6053){ long long _6054 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->ptrb)((((*_6051)(_6053)) + ((*_6049)(_6053))))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->ptrb)(((*_6051)(_6053))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->ptrb)(((*_6051)(_6053)))),_6039,_6042,_6054); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->bfix,((*_6051)(_6053)),_6010,_6041,(long long)((*_6049)(_6053))); }else {}long long _6055 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->ptrb)(((*_6051)(_6053)))); long long _9346 = (long long)0; long long _9347 = _6054; for (long long _6056 = _9346;_6056<_9347;++_6056){ (((*_6038)((_6042 + _6056))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->subj)((_6055 + _6056))) + ((*_5999)(_6053)))); }int _9348 = (int)0; int _9349 = ((*_6049)(_6053)); for (int _6057 = _9348;_6057<_9349;++_6057){ (((*_6037)(((_6041 + _6057) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->ptrb)(((((*_6051)(_6053)) + _6057) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->ptrb)((((*_6051)(_6053)) + _6057)))) + ((*_6037)((_6041 + _6057))))); }(_6042 = (_6042 + _6054)); (_6041 = (_6041 + ((*_6049)(_6053)))); (_6043 = (_6043 + mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6053)))->shape)->size)); (((*_6051)(_6053)) = (((*_6051)(_6053)) + ((*_6049)(_6053)))); }}(_5993 = ::mosek::fusion::p_Expr::_new_Expr(_6037,_5995,_6038,_6039,_6010,::mosek::fusion::Set::t(_6006),_6040)); }else { std::shared_ptr< monty::ndarray< long long,1 > > _6058 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5988)->size(0))))); (_6040 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6008)))); int _9350 = (int)0; int _9351 = _6044; for (int _6059 = _9350;_6059<_9351;++_6059){ int _9352 = (int)0; int _9353 = (int)((_5988)->size(0)); for (int _6060 = _9352;_6060<_9353;++_6060){ if ((! mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->inst || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->shape)->size == (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->inst)->size(0))) && ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->inst)->size(0)) > (int)0)))){ long long _6061 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)((((*_6051)(_6060)) + ((*_6049)(_6060))))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((*_6051)(_6060))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((*_6051)(_6060)))),_6039,_6042,_6061); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->bfix,((*_6051)(_6060)),_6010,_6041,(long long)((*_6049)(_6060))); }else {}long long _6062 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((*_6051)(_6060)))); long long _9354 = (long long)0; long long _9355 = _6061; for (long long _6063 = _9354;_6063<_9355;++_6063){ (((*_6038)((_6042 + _6063))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->subj)((_6062 + _6063))) + ((*_5999)(_6060)))); }int _9356 = (int)0; int _9357 = ((*_6049)(_6060)); for (int _6064 = _9356;_6064<_9357;++_6064){ (((*_6037)(((_6041 + _6064) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((((*_6051)(_6060)) + _6064) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)((((*_6051)(_6060)) + _6064)))) + ((*_6037)(_6041)))); }int _9358 = (int)0; int _9359 = ((*_6049)(_6060)); for (int _6065 = _9358;_6065<_9359;++_6065){ (((*_6040)((_6041 + _6065))) = (_6043 + _6065)); }(_6042 = (_6042 + _6061)); (_6041 = (_6041 + ((*_6049)(_6060)))); (_6043 = (_6043 + ((*_6049)(_6060)))); (((*_6051)(_6060)) = (((*_6051)(_6060)) + ((*_6049)(_6060)))); }else if (((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->inst)->size(0)) > (int)0)){ long long _6066 = (long long)0; { long long _6067 = (long long)0; while ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->inst)((((*_6051)(_6060)) + _6067))) < (((*_6058)(_6060)) + ((*_6049)(_6060))))) { ( ++ _6067 ); }(_6066 = _6067); }long long _6068 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)((((*_6051)(_6060)) + _6066))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((*_6051)(_6060))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((*_6051)(_6060)))),_6039,_6042,_6068); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->bfix,((*_6051)(_6060)),_6010,_6041,_6066); }else {}long long _6069 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((*_6051)(_6060)))); long long _9360 = (long long)0; long long _9361 = _6068; for (long long _6070 = _9360;_6070<_9361;++_6070){ (((*_6038)((_6042 + _6070))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->subj)((_6069 + _6070))) + ((*_5999)(_6060)))); }long long _9362 = (long long)0; long long _9363 = _6066; for (long long _6071 = _9362;_6071<_9363;++_6071){ (((*_6037)(((_6041 + _6071) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)(((((*_6051)(_6060)) + _6071) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->ptrb)((((*_6051)(_6060)) + _6071)))) + ((*_6037)((_6041 + _6071))))); }int _6072 = (((*_6049)(_6060)) * _6059); long long _9364 = (long long)0; long long _9365 = _6066; for (long long _6073 = _9364;_6073<_9365;++_6073){ (((*_6040)((_6041 + _6073))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5988)(_6060)))->inst)(_6073)) - _6072) + _6043)); }(_6042 += _6068); (_6041 += _6066); (_6043 += ((*_6049)(_6060))); (((*_6051)(_6060)) += _6066); (((*_6058)(_6060)) += ((*_6049)(_6060))); }else { }}}(_5993 = ::mosek::fusion::p_Expr::_new_Expr(_6037,_5995,_6038,_6039,_6010,::mosek::fusion::Set::t(_6006),_6040)); }}return _5993; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _6074,    int _6075,    int _6076) { return mosek::fusion::p_Expr::repeat(_6074,_6075,_6076); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat( monty::rc_ptr< ::mosek::fusion::Expression > _6074,int _6075,int _6076){ if ((_6075 <= (int)0)){ throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));}else {}return ::mosek::fusion::p_Expr::stack_(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Expression > > _9366; for (int _6077=(int)0, _9367=_6075; _6077 < _9367;++_6077)_9366.push_back(_6074); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9366.size()),_9366.begin(),_9366.end())); })(),_6076); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6078) { return mosek::fusion::p_Expr::add(_6078); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6078){ if (((int)((_6078)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}monty::rc_ptr< ::mosek::fusion::Expression > _6079 = nullptr; if (! _6078){ throw monty::NullPointerException(std::string ("Argument exps may not be null"));}else {}if ((((int)((_6078)->size(0)) > (int)0) && ! ((*_6078)((int)0)))){ throw monty::NullPointerException(std::string ("Argument exps may not contain null"));}else {}long long _6080 = mosek::fusion::p_Set::_get_impl(((*_6078)((int)0))->shape())->size; monty::rc_ptr< ::mosek::fusion::Set > _6081 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ((*_6078)((int)0))->shape()) return (((*_6078)((int)0))->shape()); else return (::mosek::fusion::p_Set::make((int)_6080)); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > > _6082 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 >(monty::shape((int)((_6078)->size(0))))); long long _6083 = (long long)0; bool _6084 = true; bool _6085 = false; std::shared_ptr< monty::ndarray< long long,1 > > _6086 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_6078)->size(0))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6087; int _6088 = (int)0; int _9368 = (int)0; int _9369 = (int)((_6078)->size(0)); for (int _6089 = _9368;_6089<_9369;++_6089){ if (! ((*_6078)(_6089))){ throw monty::NullPointerException(std::string ("Argument exps may not contain null"));}else {}(((*_6082)(_6089)) = ((*_6078)(_6089))->eval()); if ((! mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6089)))->shape->compare(_6081))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}if (mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6089)))->bfix){ (_6085 = true); }else {}(_6083 = (_6083 + mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6089)))->nnz)); (_6084 = (_6084 && ! mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6089)))->inst)); (_6088 = (_6088 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6089)))->x)->size(0)))); }(_6087 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_6088)))); { int _6090 = (int)0; int _9370 = (int)0; int _9371 = (int)((_6082)->size(0)); for (int _6091 = _9370;_6091<_9371;++_6091){ int _9372 = (int)0; int _9373 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6091)))->x)->size(0)); for (int _6092 = _9372;_6092<_9373;++_6092){ (((*_6087)(_6090)) = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6091)))->x)(_6092))); ( ++ _6090 ); }}}int _9374 = (int)1; int _9375 = (int)((_6078)->size(0)); for (int _6093 = _9374;_6093<_9375;++_6093){ (((*_6086)(_6093)) = ((*_6086)((_6093 - (int)1)))); int _9376 = (int)0; int _9377 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_6082)((_6093 - (int)1))))->x)->size(0)); for (int _6094 = _9376;_6094<_9377;++_6094){ (((*_6086)(_6093)) = (((*_6086)(_6093)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)((_6093 - (int)1))))->x)(_6094))->size())); }}if (_6084){ std::shared_ptr< monty::ndarray< long long,1 > > _6095 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6080 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6096 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6083))); std::shared_ptr< monty::ndarray< double,1 > > _6097 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6083))); std::shared_ptr< monty::ndarray< double,1 > > _6098 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _6099 = nullptr; long long _9378 = (long long)0; long long _9379 = _6080; for (long long _6100 = _9378;_6100<_9379;++_6100){ (((*_6095)((_6100 + (int)1))) = ((*_6095)(_6100))); int _9380 = (int)0; int _9381 = (int)((_6082)->size(0)); for (int _6101 = _9380;_6101<_9381;++_6101){ long long _6102 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6101)))->ptrb)((_6100 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6101)))->ptrb)(_6100))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6101)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6101)))->ptrb)(_6100)),_6097,((*_6095)((_6100 + (int)1))),_6102); long long _9382 = (long long)0; long long _9383 = _6102; for (long long _6103 = _9382;_6103<_9383;++_6103){ (((*_6096)((((*_6095)((_6100 + (int)1))) + _6103))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6101)))->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6101)))->ptrb)(_6100)) + _6103))) + ((*_6086)(_6101)))); }(((*_6095)((_6100 + (int)1))) += _6102); }}if (_6085){ (_6098 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6080)))); long long _9384 = (long long)0; long long _9385 = _6080; for (long long _6104 = _9384;_6104<_9385;++_6104){ int _9386 = (int)0; int _9387 = (int)((_6082)->size(0)); for (int _6105 = _9386;_6105<_9387;++_6105){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6105)))->bfix){ (((*_6098)(_6104)) += ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6105)))->bfix)(_6104))); }else {}}}}else {}(_6079 = ::mosek::fusion::p_Expr::_new_Expr(_6095,_6087,_6096,_6097,_6098,_6081,_6099)); }else { std::shared_ptr< monty::ndarray< int,1 > > _6106 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_6082)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _6107 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_6082)->size(0))))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _6108 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape((int)((_6082)->size(0))))); int _9388 = (int)0; int _9389 = (int)((_6082)->size(0)); for (int _6109 = _9388;_6109<_9389;++_6109){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6109)))->inst){ (((*_6108)(_6109)) = mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6109)))->inst); }else { (((*_6108)(_6109)) = ::mosek::fusion::Utils::Tools::range(((long long)((mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6109)))->ptrb)->size(0)) - (long long)1))); }(((*_6107)(_6109)) = (int)((((*_6108)(_6109)))->size(0))); }int _6110 = (int)0; { std::shared_ptr< monty::ndarray< int,1 > > _6111 = ::mosek::fusion::Utils::Tools::range((int)((_6082)->size(0))); int _6112 = (int)((_6082)->size(0)); while ((_6112 > (int)0)) { long long _6113 = ((*((*_6108)(((*_6111)((int)0)))))(((*_6106)(((*_6111)((int)0)))))); int _9390 = (int)1; int _9391 = _6112; for (int _6114 = _9390;_6114<_9391;++_6114){ if ((((*((*_6108)(((*_6111)(_6114)))))(((*_6106)(((*_6111)(_6114)))))) < _6113)){ (_6113 = ((*((*_6108)(((*_6111)(_6114)))))(((*_6106)(((*_6111)(_6114))))))); }else {}}( ++ _6110 ); int _9392 = (int)0; int _9393 = _6112; for (int _6115 = _9392;_6115<_9393;++_6115){ if ((((*((*_6108)(((*_6111)(_6115)))))(((*_6106)(((*_6111)(_6115)))))) == _6113)){ ( ++ ((*_6106)(((*_6111)(_6115)))) ); }else {}}{ int _6116 = (int)0; for (;(_6116 < _6112);){ if ((((*_6106)(((*_6111)(_6116)))) >= ((*_6107)(((*_6111)(_6116)))))){ int _6117 = ((*_6111)(_6116)); (((*_6111)(_6116)) = ((*_6111)((_6112 - (int)1)))); (((*_6111)((_6112 - (int)1))) = _6117); ( -- _6112 ); }else { ( ++ _6116 ); }}}}}std::shared_ptr< monty::ndarray< long long,1 > > _6118 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6110))); std::shared_ptr< monty::ndarray< long long,1 > > _6119 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6110 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _6120 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6083))); std::shared_ptr< monty::ndarray< long long,1 > > _6121 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6083))); std::shared_ptr< monty::ndarray< double,1 > > _6122 = nullptr; { int _9394 = (int)0; int _9395 = (int)((_6106)->size(0)); for (int _6123 = _9394;_6123<_9395;++_6123){ (((*_6106)(_6123)) = (int)0); }int _6124 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _6125 = ::mosek::fusion::Utils::Tools::range((int)((_6082)->size(0))); int _6126 = (int)((_6082)->size(0)); while ((_6126 > (int)0)) { long long _6127 = ((*((*_6108)(((*_6125)((int)0)))))(((*_6106)(((*_6125)((int)0)))))); int _9396 = (int)1; int _9397 = _6126; for (int _6128 = _9396;_6128<_9397;++_6128){ if ((((*((*_6108)(((*_6125)(_6128)))))(((*_6106)(((*_6125)(_6128)))))) < _6127)){ (_6127 = ((*((*_6108)(((*_6125)(_6128)))))(((*_6106)(((*_6125)(_6128))))))); }else {}}(((*_6118)(_6124)) = _6127); (((*_6119)((_6124 + (int)1))) = ((*_6119)(_6124))); int _9398 = (int)0; int _9399 = _6126; for (int _6129 = _9398;_6129<_9399;++_6129){ if ((((*((*_6108)(((*_6125)(_6129)))))(((*_6106)(((*_6125)(_6129)))))) == _6127)){ int _6130 = ((*_6125)(_6129)); long long _6131 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6130)))->ptrb)(((*_6106)(_6130)))); long long _6132 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6130)))->ptrb)((((*_6106)(_6130)) + (int)1))) - _6131); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6130)))->cof,_6131,_6120,((*_6119)((_6124 + (int)1))),_6132); long long _9400 = (long long)0; long long _9401 = _6132; for (long long _6133 = _9400;_6133<_9401;++_6133){ (((*_6121)((((*_6119)((_6124 + (int)1))) + _6133))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6130)))->subj)((_6131 + _6133))) + ((*_6086)(_6130)))); }(((*_6119)((_6124 + (int)1))) = (((*_6119)((_6124 + (int)1))) + _6132)); ( ++ ((*_6106)(_6130)) ); }else {}}{ int _6134 = (int)0; for (;(_6134 < _6126);){ if ((((*_6106)(((*_6125)(_6134)))) >= ((*_6107)(((*_6125)(_6134)))))){ int _6135 = ((*_6125)(_6134)); (((*_6125)(_6134)) = ((*_6125)((_6126 - (int)1)))); (((*_6125)((_6126 - (int)1))) = _6135); ( -- _6126 ); }else { ( ++ _6134 ); }}}( ++ _6124 ); }}if (_6085){ int _9402 = (int)0; int _9403 = (int)((_6106)->size(0)); for (int _6136 = _9402;_6136<_9403;++_6136){ (((*_6106)(_6136)) = (int)0); }int _6137 = (int)0; int _6138 = (int)0; int _9404 = (int)0; int _9405 = (int)((_6082)->size(0)); for (int _6139 = _9404;_6139<_9405;++_6139){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6139)))->bfix){ ( ++ _6138 ); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _6140 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6138))); { int _6141 = (int)0; int _6142 = (int)0; for (;(_6142 < _6138);( ++ _6141 )){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(_6141)))->bfix){ (((*_6140)(_6142)) = _6141); ( ++ _6142 ); }else {}}}(_6122 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6110)))); while ((_6138 > (int)0)) { long long _6143 = ((*((*_6108)(((*_6140)((int)0)))))(((*_6106)(((*_6140)((int)0)))))); int _9406 = (int)1; int _9407 = _6138; for (int _6144 = _9406;_6144<_9407;++_6144){ if ((((*((*_6108)(((*_6140)(_6144)))))(((*_6106)(((*_6140)(_6144)))))) < _6143)){ (_6143 = ((*((*_6108)(((*_6140)(_6144)))))(((*_6106)(((*_6140)(_6144))))))); }else {}}int _9408 = (int)0; int _9409 = _6138; for (int _6145 = _9408;_6145<_9409;++_6145){ if ((((*((*_6108)(((*_6140)(_6145)))))(((*_6106)(((*_6140)(_6145)))))) == _6143)){ (((*_6122)(_6137)) = (((*_6122)(_6137)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_6082)(((*_6140)(_6145)))))->bfix)(((*_6106)(((*_6140)(_6145)))))))); ( ++ ((*_6106)(((*_6140)(_6145)))) ); }else {}}{ int _6146 = (int)0; for (;(_6146 < _6138);){ if ((((*_6106)(((*_6140)(_6146)))) >= ((*_6107)(((*_6140)(_6146)))))){ long long _6147 = ((*_6140)(_6146)); (((*_6140)(_6146)) = ((*_6140)((_6138 - (int)1)))); (((*_6140)((_6138 - (int)1))) = _6147); ( -- _6138 ); }else { ( ++ _6146 ); }}}( ++ _6137 ); }}else {}if ((_6110 == mosek::fusion::p_Set::_get_impl(_6081)->size)){ (_6118 = nullptr); }else {}(_6079 = ::mosek::fusion::p_Expr::_new_Expr(_6119,_6087,_6121,_6120,_6122,_6081,_6118)); }return _6079; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6148) { return mosek::fusion::p_Expr::add(_6148); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6148){ if (! _6148){ throw monty::NullPointerException(std::string ("Argument vs may not be null"));}else {}if (((int)((_6148)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),nullptr,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}if ((((int)((_6148)->size(0)) > (int)0) && ! ((*_6148)((int)0)))){ throw monty::NullPointerException(std::string ("Argument vs may contain null"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _6149 = ((*_6148)((int)0))->shape(); int _6150 = mosek::fusion::p_Set::_get_impl(_6149)->nd; long long _6151 = mosek::fusion::p_Set::_get_impl(_6149)->size; long long _6152 = mosek::fusion::p_Set::_get_impl(_6149)->size; int _9410 = (int)1; int _9411 = (int)((_6148)->size(0)); for (int _6153 = _9410;_6153<_9411;++_6153){ if (! ((*_6148)(_6153))){ throw monty::NullPointerException(std::string ("Argument vs may not contain null"));}else if ((! _6149->compare(((*_6148)(_6153))->shape()))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}}long long _6154 = (_6151 * (int)((_6148)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _6155 = ::mosek::fusion::Utils::Tools::range((long long)0,(_6154 + (int)((_6148)->size(0))),(long long)((int)((_6148)->size(0)))); std::shared_ptr< monty::ndarray< long long,1 > > _6156 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9412; for (long long _6157=(int)0, _9413=_6151; _6157 < _9413;++_6157) for (int _6158=(int)0, _9414=(int)((_6148)->size(0)); _6158 < _9414;++_6158)_9412.push_back((_6157 + (_6158 * _6151))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9412.size()),_9412.begin(),_9412.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6159 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9415; for (long long _6160=(int)0, _9416=_6154; _6160 < _9416;++_6160)_9415.push_back((int)1); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9415.size()),_9415.begin(),_9415.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_6155,_6148,_6156,_6159,nullptr,_6149,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_( monty::rc_ptr< ::mosek::fusion::Expression > _6161,double _6162,monty::rc_ptr< ::mosek::fusion::Expression > _6163,double _6164){ if ((_6161->getModel() && (_6163->getModel() && (_6161->getModel() != _6163->getModel())))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6165 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::string _6166 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_6161->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_6161->getModel().get())->getName()); else return (std::string ("?")); })(); std::string _6167 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_6163->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_6163->getModel().get())->getName()); else return (std::string ("?")); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6165.get())->a(std::string ("Operands belong to different models: '")).get())->a(_6166).get())->a(std::string ("' and '")).get())->a(_6167).get())->a(std::string ("'")); throw ::mosek::fusion::ModelError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6165.get())->toString());}else {}{ int _6168 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(_6161->shape())->nd >= mosek::fusion::p_Set::_get_impl(_6163->shape())->nd)) return (mosek::fusion::p_Set::_get_impl(_6161->shape())->nd); else return (mosek::fusion::p_Set::_get_impl(_6163->shape())->nd); })(); int _9417 = (int)0; int _9418 = _6168; for (int _6169 = _9417;_6169<_9418;++_6169){ if ((_6161->shape()->dim(_6169) != _6163->shape()->dim(_6169))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions mismatch"));}else {}}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _6170 = _6161->eval(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _6171 = _6163->eval(); bool _6172 = (mosek::fusion::p_FlatExpr::_get_impl(_6170)->inst && mosek::fusion::p_FlatExpr::_get_impl(_6171)->inst); monty::rc_ptr< ::mosek::fusion::Set > _6173 = mosek::fusion::p_FlatExpr::_get_impl(_6170)->shape; std::shared_ptr< monty::ndarray< long long,1 > > _6174 = mosek::fusion::p_FlatExpr::_get_impl(_6170)->inst; std::shared_ptr< monty::ndarray< long long,1 > > _6175 = mosek::fusion::p_FlatExpr::_get_impl(_6171)->inst; if (! _6174){ (_6174 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_6173)->size)); }else {}if (! _6175){ (_6175 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_6173)->size)); }else {}int _6176 = (int)0; { int _6177 = (int)0; int _6178 = (int)0; while (((_6177 < (int)((_6174)->size(0))) && (_6178 < (int)((_6175)->size(0))))) { if ((((*_6174)(_6177)) < ((*_6175)(_6178)))){ ( ++ _6177 ); ( ++ _6176 ); }else if ((((*_6174)(_6177)) > ((*_6175)(_6178)))){ ( ++ _6178 ); ( ++ _6176 ); }else { ( ++ _6177 ); ( ++ _6178 ); ( ++ _6176 ); }}(_6176 = ((_6176 + (int)((_6174)->size(0))) - _6177)); (_6176 = ((_6176 + (int)((_6175)->size(0))) - _6178)); }std::shared_ptr< monty::ndarray< long long,1 > > _6179 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6176))); long long _6180 = (long long)0; int _9419 = (int)0; int _9420 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6170)->x)->size(0)); for (int _6181 = _9419;_6181<_9420;++_6181){ (_6180 = (_6180 + ((*mosek::fusion::p_FlatExpr::_get_impl(_6170)->x)(_6181))->size())); }std::shared_ptr< monty::ndarray< long long,1 > > _6182 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6176 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6183 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_6170)->subj)->size(0)) + (int)((mosek::fusion::p_FlatExpr::_get_impl(_6171)->subj)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _6184 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_6170)->subj)->size(0)) + (int)((mosek::fusion::p_FlatExpr::_get_impl(_6171)->subj)->size(0)))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6185 = ::mosek::fusion::p_Expr::varstack(mosek::fusion::p_FlatExpr::_get_impl(_6170)->x,mosek::fusion::p_FlatExpr::_get_impl(_6171)->x); std::shared_ptr< monty::ndarray< double,1 > > _6186 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (! mosek::fusion::p_FlatExpr::_get_impl(_6170)->bfix && ! mosek::fusion::p_FlatExpr::_get_impl(_6171)->bfix)) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6176)))); })(); { std::shared_ptr< monty::ndarray< long long,1 > > _6187 = mosek::fusion::p_FlatExpr::_get_impl(_6170)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6188 = mosek::fusion::p_FlatExpr::_get_impl(_6170)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6189 = mosek::fusion::p_FlatExpr::_get_impl(_6170)->cof; std::shared_ptr< monty::ndarray< double,1 > > _6190 = mosek::fusion::p_FlatExpr::_get_impl(_6170)->bfix; std::shared_ptr< monty::ndarray< long long,1 > > _6191 = mosek::fusion::p_FlatExpr::_get_impl(_6171)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6192 = mosek::fusion::p_FlatExpr::_get_impl(_6171)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6193 = mosek::fusion::p_FlatExpr::_get_impl(_6171)->cof; std::shared_ptr< monty::ndarray< double,1 > > _6194 = mosek::fusion::p_FlatExpr::_get_impl(_6171)->bfix; { int _6195 = (int)0; int _6196 = (int)0; int _6197 = (int)0; long long _6198 = (long long)0; while (((_6195 < (int)((_6174)->size(0))) && (_6196 < (int)((_6175)->size(0))))) { if ((((*_6174)(_6195)) < ((*_6175)(_6196)))){ long long _6199 = (((*_6187)((_6195 + (int)1))) - ((*_6187)(_6195))); ::mosek::fusion::Utils::Tools::arraycopy(_6188,((*_6187)(_6195)),_6183,_6198,_6199); long long _9421 = (long long)0; long long _9422 = _6199; for (long long _6200 = _9421;_6200<_9422;++_6200){ (((*_6184)((_6198 + _6200))) = (((*_6189)((((*_6187)(_6195)) + _6200))) * _6162)); }(_6198 = (_6198 + _6199)); (((*_6179)(_6197)) = ((*_6174)(_6195))); (((*_6182)((_6197 + (int)1))) = (((*_6182)(_6197)) + _6199)); ( ++ _6195 ); ( ++ _6197 ); }else if ((((*_6174)(_6195)) > ((*_6175)(_6196)))){ long long _6201 = (((*_6191)((_6196 + (int)1))) - ((*_6191)(_6196))); long long _9423 = (long long)0; long long _9424 = _6201; for (long long _6202 = _9423;_6202<_9424;++_6202){ (((*_6183)((_6198 + _6202))) = (((*_6192)((((*_6191)(_6196)) + _6202))) + _6180)); }long long _9425 = (long long)0; long long _9426 = _6201; for (long long _6203 = _9425;_6203<_9426;++_6203){ (((*_6184)((_6198 + _6203))) = (((*_6193)((((*_6191)(_6196)) + _6203))) * _6164)); }(_6198 = (_6198 + _6201)); (((*_6179)(_6197)) = ((*_6175)(_6196))); (((*_6182)((_6197 + (int)1))) = (((*_6182)(_6197)) + _6201)); ( ++ _6196 ); ( ++ _6197 ); }else { long long _6204 = (((*_6187)((_6195 + (int)1))) - ((*_6187)(_6195))); ::mosek::fusion::Utils::Tools::arraycopy(_6188,((*_6187)(_6195)),_6183,_6198,_6204); long long _9427 = (long long)0; long long _9428 = _6204; for (long long _6205 = _9427;_6205<_9428;++_6205){ (((*_6184)((_6198 + _6205))) = (((*_6189)((((*_6187)(_6195)) + _6205))) * _6162)); }(_6198 = (_6198 + _6204)); long long _6206 = (((*_6191)((_6196 + (int)1))) - ((*_6191)(_6196))); long long _9429 = (long long)0; long long _9430 = _6206; for (long long _6207 = _9429;_6207<_9430;++_6207){ (((*_6183)((_6198 + _6207))) = (((*_6192)((((*_6191)(_6196)) + _6207))) + _6180)); }long long _9431 = (long long)0; long long _9432 = _6206; for (long long _6208 = _9431;_6208<_9432;++_6208){ (((*_6184)((_6198 + _6208))) = (((*_6193)((((*_6191)(_6196)) + _6208))) * _6164)); }(_6198 = (_6198 + _6206)); (((*_6179)(_6197)) = ((*_6174)(_6195))); (((*_6182)((_6197 + (int)1))) = ((((*_6182)(_6197)) + _6204) + _6206)); ( ++ _6195 ); ( ++ _6196 ); ( ++ _6197 ); }}while ((_6195 < (int)((_6174)->size(0)))) { long long _6209 = (((*_6187)((_6195 + (int)1))) - ((*_6187)(_6195))); ::mosek::fusion::Utils::Tools::arraycopy(_6188,((*_6187)(_6195)),_6183,_6198,_6209); long long _9433 = (long long)0; long long _9434 = _6209; for (long long _6210 = _9433;_6210<_9434;++_6210){ (((*_6184)((_6198 + _6210))) = (((*_6189)((((*_6187)(_6195)) + _6210))) * _6162)); }(_6198 = (_6198 + _6209)); (((*_6179)(_6197)) = ((*_6174)(_6195))); (((*_6182)((_6197 + (int)1))) = (((*_6182)(_6197)) + _6209)); ( ++ _6195 ); ( ++ _6197 ); }while ((_6196 < (int)((_6175)->size(0)))) { long long _6211 = (((*_6191)((_6196 + (int)1))) - ((*_6191)(_6196))); long long _9435 = (long long)0; long long _9436 = _6211; for (long long _6212 = _9435;_6212<_9436;++_6212){ (((*_6183)((_6198 + _6212))) = (((*_6192)((((*_6191)(_6196)) + _6212))) + _6180)); }long long _9437 = (long long)0; long long _9438 = _6211; for (long long _6213 = _9437;_6213<_9438;++_6213){ (((*_6184)((_6198 + _6213))) = (((*_6193)((((*_6191)(_6196)) + _6213))) * _6164)); }(_6198 = (_6198 + _6211)); (((*_6179)(_6197)) = ((*_6175)(_6196))); (((*_6182)((_6197 + (int)1))) = (((*_6182)(_6197)) + _6211)); ( ++ _6196 ); ( ++ _6197 ); }if ((_6190 || _6194)){ int _6214 = (int)0; int _6215 = (int)0; int _6216 = (int)0; long long _6217 = (long long)0; while (((_6214 < (int)((_6174)->size(0))) && (_6215 < (int)((_6175)->size(0))))) { if ((((*_6174)(_6214)) < ((*_6175)(_6215)))){ if (_6190){ (((*_6186)(_6216)) = (((*_6190)(_6214)) * _6162)); }else {}( ++ _6214 ); ( ++ _6216 ); }else if ((((*_6174)(_6214)) > ((*_6175)(_6215)))){ if (_6194){ (((*_6186)(_6216)) = (((*_6194)(_6215)) * _6164)); }else {}( ++ _6215 ); ( ++ _6216 ); }else { if (_6190){ (((*_6186)(_6216)) = (((*_6190)(_6214)) * _6162)); }else {}if (_6194){ (((*_6186)(_6216)) = (((*_6186)(_6216)) + (((*_6194)(_6215)) * _6164))); }else {}( ++ _6214 ); ( ++ _6215 ); ( ++ _6216 ); }}while ((_6214 < (int)((_6174)->size(0)))) { if (_6190){ (((*_6186)(_6216)) = (((*_6190)(_6214)) * _6162)); }else {}( ++ _6214 ); ( ++ _6216 ); }while ((_6215 < (int)((_6175)->size(0)))) { if (_6194){ (((*_6186)(_6216)) = (((*_6194)(_6215)) * _6164)); }else {}( ++ _6215 ); ( ++ _6216 ); }}else {}}}return ::mosek::fusion::p_Expr::_new_Expr(_6182,_6185,_6183,_6184,_6186,_6173,([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_6179)->size(0)) == mosek::fusion::p_Set::_get_impl(_6173)->size)) return (nullptr); else return (_6179); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose( ){ monty::rc_ptr< ::mosek::fusion::Expr > _6218 = _pubthis; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Expr::_get_impl(_6218.get())->shape())->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Wrong dimensions for transpose"));}else {}if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Expr::_get_impl(_6218.get())->shape())->nd == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6218),::mosek::fusion::p_Set::make((int)1,mosek::fusion::p_Expr::_get_impl(_6218.get())->shape()->dim((int)0))); }else if ((mosek::fusion::p_Expr::_get_impl(_6218.get())->shape()->dim((int)0) == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6218),::mosek::fusion::p_Set::make((int)1,mosek::fusion::p_Expr::_get_impl(_6218.get())->shape()->dim((int)1))); }else if ((mosek::fusion::p_Expr::_get_impl(_6218.get())->shape()->dim((int)1) == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6218),::mosek::fusion::p_Set::make(mosek::fusion::p_Expr::_get_impl(_6218.get())->shape()->dim((int)0))); }else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _6219 = mosek::fusion::p_Expr::_get_impl(_6218.get())->eval(); std::shared_ptr< monty::ndarray< long long,1 > > _6220 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->inst; std::shared_ptr< monty::ndarray< double,1 > > _6221 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->bfix; std::shared_ptr< monty::ndarray< long long,1 > > _6222 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6223 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6224 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->cof; if (mosek::fusion::p_FlatExpr::_get_impl(_6219)->inst){ int _6225 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->shape->dim((int)0); int _6226 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->shape->dim((int)1); int _6227 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6219)->inst)->size(0)); int _6228 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6219)->subj)->size(0)); std::shared_ptr< monty::ndarray< double,1 > > _6229 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_6219)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6227)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6230 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6227))); std::shared_ptr< monty::ndarray< long long,1 > > _6231 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6227 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6232 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6228))); std::shared_ptr< monty::ndarray< double,1 > > _6233 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6228))); monty::rc_ptr< ::mosek::fusion::Set > _6234 = ::mosek::fusion::p_Set::make(_6226,_6225); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6235 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->x; { std::shared_ptr< monty::ndarray< long long,1 > > _6236 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9439; for (int _6237=(int)0, _9440=_6227; _6237 < _9440;++_6237)_9439.push_back((((*_6220)(_6237)) / _6226)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9439.size()),_9439.begin(),_9439.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6238 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9441; for (int _6239=(int)0, _9442=_6227; _6239 < _9442;++_6239)_9441.push_back((((*_6220)(_6239)) % _6226)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9441.size()),_9441.begin(),_9441.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6240 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6227))); std::shared_ptr< monty::ndarray< long long,1 > > _6241 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6227 + (int)1)))); int _9443 = (int)0; int _9444 = _6227; for (int _6242 = _9443;_6242<_9444;++_6242){ ( ++ ((*_6241)((((*_6238)(_6242)) + (int)1))) ); }int _9445 = (int)0; int _9446 = _6227; for (int _6243 = _9445;_6243<_9446;++_6243){ (((*_6241)((_6243 + (int)1))) += ((*_6241)(_6243))); }int _9447 = (int)0; int _9448 = _6227; for (int _6244 = _9447;_6244<_9448;++_6244){ (((*_6240)(((*_6241)(((*_6238)(_6244)))))) = _6244); ( ++ ((*_6241)(((*_6238)(_6244)))) ); }if (_6229){ int _9449 = (int)0; int _9450 = _6227; for (int _6245 = _9449;_6245<_9450;++_6245){ (((*_6229)(_6245)) = ((*_6221)(((*_6240)(_6245))))); }}else {}int _9451 = (int)0; int _9452 = _6227; for (int _6246 = _9451;_6246<_9452;++_6246){ (((*_6230)(_6246)) = ((((*_6238)(((*_6240)(_6246)))) * _6225) + ((*_6236)(((*_6240)(_6246)))))); }int _9453 = (int)0; int _9454 = _6227; for (int _6247 = _9453;_6247<_9454;++_6247){ (((*_6231)((_6247 + (int)1))) = (((*_6231)(_6247)) + (((*_6222)((((*_6240)(_6247)) + (int)1))) - ((*_6222)(((*_6240)(_6247))))))); }int _9455 = (int)0; int _9456 = _6227; for (int _6248 = _9455;_6248<_9456;++_6248){ ::mosek::fusion::Utils::Tools::arraycopy(_6223,((*_6222)(((*_6240)(_6248)))),_6232,((*_6231)(_6248)),(((*_6231)((_6248 + (int)1))) - ((*_6231)(_6248)))); ::mosek::fusion::Utils::Tools::arraycopy(_6224,((*_6222)(((*_6240)(_6248)))),_6233,((*_6231)(_6248)),(((*_6231)((_6248 + (int)1))) - ((*_6231)(_6248)))); }}return ::mosek::fusion::p_Expr::_new_Expr(_6231,_6235,_6232,_6233,_6229,_6234,_6230,(int)1); }else { int _6249 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->shape->dim((int)0); int _6250 = mosek::fusion::p_FlatExpr::_get_impl(_6219)->shape->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _6251 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6219)->ptrb)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _6252 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6219)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _6253 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6219)->cof)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _6254 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _6221) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_6249 * _6250))))); else return (nullptr); })(); monty::rc_ptr< ::mosek::fusion::Set > _6255 = ::mosek::fusion::p_Set::make(_6250,_6249); { int _9457 = (int)0; int _9458 = _6250; for (int _6256 = _9457;_6256<_9458;++_6256){ int _9459 = (int)0; int _9460 = _6249; for (int _6257 = _9459;_6257<_9460;++_6257){ int _6258 = ((_6257 * _6250) + _6256); int _6259 = ((_6256 * _6249) + _6257); (((*_6251)((_6259 + (int)1))) = (((*_6251)(_6259)) + (((*_6222)((_6258 + (int)1))) - ((*_6222)(_6258))))); ::mosek::fusion::Utils::Tools::arraycopy(_6223,((*_6222)(_6258)),_6252,((*_6251)(_6259)),(((*_6222)((_6258 + (int)1))) - ((*_6222)(_6258)))); ::mosek::fusion::Utils::Tools::arraycopy(_6224,((*_6222)(_6258)),_6253,((*_6251)(_6259)),(((*_6222)((_6258 + (int)1))) - ((*_6222)(_6258)))); }}if (_6221){ int _9461 = (int)0; int _9462 = _6250; for (int _6260 = _9461;_6260<_9462;++_6260){ int _9463 = (int)0; int _9464 = _6249; for (int _6261 = _9463;_6261<_9464;++_6261){ int _6262 = ((_6261 * _6250) + _6260); int _6263 = ((_6260 * _6249) + _6261); (((*_6254)(_6263)) = ((*_6221)(_6262))); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_6251,mosek::fusion::p_FlatExpr::_get_impl(_6219)->x,_6252,_6253,_6254,_6255,nullptr,(int)1); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _6264,    std::shared_ptr< monty::ndarray< int,1 > > _6265) { return mosek::fusion::p_Expr::_get_impl(this)->slice(_6264,_6265); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::slice( std::shared_ptr< monty::ndarray< int,1 > > _6264,std::shared_ptr< monty::ndarray< int,1 > > _6265){ if (((int)((_6264)->size(0)) != (int)((_6265)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Length firsta and lasta do not match"));}else {}if (((int)((_6264)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ throw ::mosek::fusion::LengthError(std::string ("Length firsta and lasta do not match shape"));}else {}int _9465 = (int)0; int _9466 = (int)((_6264)->size(0)); for (int _6266 = _9465;_6266<_9466;++_6266){ if (((((*_6264)(_6266)) < (int)0) || ((((*_6264)(_6266)) > ((*_6265)(_6266))) || (((*_6265)(_6266)) > shape_p->dim(_6266))))){ throw ::mosek::fusion::IndexError(std::string ("Index is invalid or out of bounds"));}else {}}std::shared_ptr< monty::ndarray< int,1 > > _6267 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9467; for (int _6268=(int)0, _9468=(int)((_6264)->size(0)); _6268 < _9468;++_6268)_9467.push_back((((*_6265)(_6268)) - ((*_6264)(_6268)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9467.size()),_9467.begin(),_9467.end())); })(); monty::rc_ptr< ::mosek::fusion::NDSet > _6269 = ::mosek::fusion::p_NDSet::_new_NDSet(_6267); if (! inst){ long long _6270 = (long long)1; int _9469 = (int)0; int _9470 = (int)((_6264)->size(0)); for (int _6271 = _9469;_6271<_9470;++_6271){ (_6270 = (_6270 * (((*_6265)(_6271)) - ((*_6264)(_6271))))); }long long _6272 = mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_6264); monty::rc_ptr< ::mosek::fusion::IndexCounter > _6273 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_6272,_6267,shape_p); long long _6274 = (long long)0; long long _9471 = (long long)0; long long _9472 = _6270; for (long long _6275 = _9471;_6275<_9472;++_6275){ long long _6276 = _6273->get(); (_6274 = (_6274 + (((*ptrb)((_6276 + (int)1))) - ((*ptrb)(_6276))))); _6273->inc(); }std::shared_ptr< monty::ndarray< long long,1 > > _6277 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6270 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6278 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6274))); std::shared_ptr< monty::ndarray< double,1 > > _6279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6274))); _6273->reset(); long long _9473 = (long long)0; long long _9474 = _6270; for (long long _6280 = _9473;_6280<_9474;++_6280){ long long _6281 = _6273->get(); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(_6281)),_6278,((*_6277)(_6280)),(((*ptrb)((_6281 + (int)1))) - ((*ptrb)(_6281)))); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(_6281)),_6279,((*_6277)(_6280)),(((*ptrb)((_6281 + (int)1))) - ((*ptrb)(_6281)))); (((*_6277)((_6280 + (int)1))) = (((*_6277)(_6280)) + (((*ptrb)((_6281 + (int)1))) - ((*ptrb)(_6281))))); _6273->inc(); }std::shared_ptr< monty::ndarray< double,1 > > _6282 = nullptr; if (bfix){ _6273->reset(); long long _9475 = (long long)0; long long _9476 = _6270; for (long long _6283 = _9475;_6283<_9476;++_6283){ (((*_6282)(_6283)) = ((*bfix)(_6273->get()))); _6273->inc(); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(_6277,x,_6278,_6279,_6282,::mosek::fusion::Set::t(_6269),nullptr); }else { long long _6284 = (long long)0; long long _6285 = (long long)0; int _9477 = (int)0; int _9478 = (int)((inst)->size(0)); for (int _6286 = _9477;_6286<_9478;++_6286){ std::shared_ptr< monty::ndarray< int,1 > > _6287 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6286))); bool _6288 = true; int _9479 = (int)0; int _9480 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6289 = _9479;_6289<_9480;++_6289){ (_6288 = (_6288 && ((((*_6264)(_6289)) <= ((*_6287)(_6289))) && (((*_6287)(_6289)) < ((*_6265)(_6289)))))); }if (_6288){ ( ++ _6284 ); (_6285 = (_6285 + (((*ptrb)((_6286 + (int)1))) - ((*ptrb)(_6286))))); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _6290 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6284 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6291 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6285))); std::shared_ptr< monty::ndarray< double,1 > > _6292 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6285))); std::shared_ptr< monty::ndarray< double,1 > > _6293 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _6294 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6284))); { int _6295 = (int)0; int _9481 = (int)0; int _9482 = (int)((inst)->size(0)); for (int _6296 = _9481;_6296<_9482;++_6296){ std::shared_ptr< monty::ndarray< int,1 > > _6297 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6296))); bool _6298 = true; int _9483 = (int)0; int _9484 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6299 = _9483;_6299<_9484;++_6299){ (_6298 = (_6298 && ((((*_6264)(_6299)) <= ((*_6297)(_6299))) && (((*_6297)(_6299)) < ((*_6265)(_6299)))))); }if (_6298){ ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(_6296)),_6291,((*_6290)(_6295)),(((*ptrb)((_6296 + (int)1))) - ((*ptrb)(_6296)))); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(_6296)),_6292,((*_6290)(_6295)),(((*ptrb)((_6296 + (int)1))) - ((*ptrb)(_6296)))); (((*_6290)((_6295 + (int)1))) = ((((*_6290)(_6295)) + ((*ptrb)((_6296 + (int)1)))) - ((*ptrb)(_6296)))); (((*_6294)(_6295)) = mosek::fusion::p_NDSet::_get_impl(_6269.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9485; for (int _6300=(int)0, _9486=(int)((_6297)->size(0)); _6300 < _9486;++_6300)_9485.push_back((((*_6297)(_6300)) - ((*_6264)(_6300)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9485.size()),_9485.begin(),_9485.end())); })())); ( ++ _6295 ); }else {}}}if (bfix){ (_6293 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6284)))); int _6301 = (int)0; int _9487 = (int)0; int _9488 = (int)((inst)->size(0)); for (int _6302 = _9487;_6302<_9488;++_6302){ std::shared_ptr< monty::ndarray< int,1 > > _6303 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6302))); bool _6304 = true; int _9489 = (int)0; int _9490 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6305 = _9489;_6305<_9490;++_6305){ (_6304 = (_6304 && ((((*_6264)(_6305)) <= ((*_6303)(_6305))) && (((*_6303)(_6305)) < ((*_6265)(_6305)))))); }if (_6304){ (((*_6293)(_6301)) = ((*bfix)(_6302))); ( ++ _6301 ); }else {}}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_6290,x,_6291,_6292,_6293,::mosek::fusion::Set::t(_6269),_6294); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::index  ( std::shared_ptr< monty::ndarray< int,1 > > _6306) { return mosek::fusion::p_Expr::_get_impl(this)->index(_6306); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::index( std::shared_ptr< monty::ndarray< int,1 > > _6306){ std::shared_ptr< monty::ndarray< int,1 > > _6307 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9491; for (int _6308=(int)0, _9492=(int)((_6306)->size(0)); _6308 < _9492;++_6308)_9491.push_back((((*_6306)(_6308)) + (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9491.size()),_9491.begin(),_9491.end())); })(); return slice(_6306,_6307); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::index  ( int _6309) { return mosek::fusion::p_Expr::_get_impl(this)->index(_6309); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::index( int _6309){ return slice(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6309}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(_6309 + (int)1)})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::slice  ( int _6310,    int _6311) { return mosek::fusion::p_Expr::_get_impl(this)->slice(_6310,_6311); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::slice( int _6310,int _6311){ return slice(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6310}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6311})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6312,    monty::rc_ptr< ::mosek::fusion::Expression > _6313) { return mosek::fusion::p_Expr::mulElm(_6312,_6313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Matrix > _6312,monty::rc_ptr< ::mosek::fusion::Expression > _6313){ return ::mosek::fusion::p_Expr::mulElm_(_6312,_6313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6314,    monty::rc_ptr< ::mosek::fusion::Variable > _6315) { return mosek::fusion::p_Expr::mulElm(_6314,_6315); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Matrix > _6314,monty::rc_ptr< ::mosek::fusion::Variable > _6315){ return ::mosek::fusion::p_Expr::mulElm_(_6314,_6315); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6316,    monty::rc_ptr< ::mosek::fusion::Variable > _6317) { return mosek::fusion::p_Expr::mulElm(_6316,_6317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6316,monty::rc_ptr< ::mosek::fusion::Variable > _6317){ return ::mosek::fusion::p_Expr::mulElm_(_6316,_6317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6318,    monty::rc_ptr< ::mosek::fusion::Expression > _6319) { return mosek::fusion::p_Expr::mulElm(_6318,_6319); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6318,monty::rc_ptr< ::mosek::fusion::Expression > _6319){ return ::mosek::fusion::p_Expr::mulElm_(_6318,_6319); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _6320,    monty::rc_ptr< ::mosek::fusion::Variable > _6321) { return mosek::fusion::p_Expr::mulElm(_6320,_6321); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,2 > > _6320,monty::rc_ptr< ::mosek::fusion::Variable > _6321){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6320),_6321); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _6322,    monty::rc_ptr< ::mosek::fusion::Expression > _6323) { return mosek::fusion::p_Expr::mulElm(_6322,_6323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,2 > > _6322,monty::rc_ptr< ::mosek::fusion::Expression > _6323){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6322),_6323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _6324,    monty::rc_ptr< ::mosek::fusion::Variable > _6325) { return mosek::fusion::p_Expr::mulElm(_6324,_6325); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,1 > > _6324,monty::rc_ptr< ::mosek::fusion::Variable > _6325){ return ::mosek::fusion::p_Expr::mulElm_(_6324,_6325); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _6326,    monty::rc_ptr< ::mosek::fusion::Expression > _6327) { return mosek::fusion::p_Expr::mulElm(_6326,_6327); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,1 > > _6326,monty::rc_ptr< ::mosek::fusion::Expression > _6327){ return ::mosek::fusion::p_Expr::mulElm_(_6326,_6327); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6328,    monty::rc_ptr< ::mosek::fusion::Matrix > _6329) { return mosek::fusion::p_Expr::mulElm(_6328,_6329); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6328,monty::rc_ptr< ::mosek::fusion::Matrix > _6329){ return ::mosek::fusion::p_Expr::mulElm_(_6329,_6328); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6330,    std::shared_ptr< monty::ndarray< double,2 > > _6331) { return mosek::fusion::p_Expr::mulElm(_6330,_6331); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6330,std::shared_ptr< monty::ndarray< double,2 > > _6331){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6331),_6330); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6332,    std::shared_ptr< monty::ndarray< double,1 > > _6333) { return mosek::fusion::p_Expr::mulElm(_6332,_6333); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6332,std::shared_ptr< monty::ndarray< double,1 > > _6333){ return ::mosek::fusion::p_Expr::mulElm_(_6333,_6332); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6334,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6335) { return mosek::fusion::p_Expr::mulElm(_6334,_6335); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6334,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6335){ return ::mosek::fusion::p_Expr::mulElm_(_6335,_6334); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6336,    monty::rc_ptr< ::mosek::fusion::Matrix > _6337) { return mosek::fusion::p_Expr::mulElm(_6336,_6337); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6336,monty::rc_ptr< ::mosek::fusion::Matrix > _6337){ return ::mosek::fusion::p_Expr::mulElm_(_6337,_6336); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6338,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6339) { return mosek::fusion::p_Expr::mulElm(_6338,_6339); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6338,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6339){ return ::mosek::fusion::p_Expr::mulElm_(_6339,_6338); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6340,    std::shared_ptr< monty::ndarray< double,2 > > _6341) { return mosek::fusion::p_Expr::mulElm(_6340,_6341); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6340,std::shared_ptr< monty::ndarray< double,2 > > _6341){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6341),_6340); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6342,    std::shared_ptr< monty::ndarray< double,1 > > _6343) { return mosek::fusion::p_Expr::mulElm(_6342,_6343); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6342,std::shared_ptr< monty::ndarray< double,1 > > _6343){ return ::mosek::fusion::p_Expr::mulElm_(_6343,_6342); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6344,    monty::rc_ptr< ::mosek::fusion::Expression > _6345) { return mosek::fusion::p_Expr::dot(_6344,_6345); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Matrix > _6344,monty::rc_ptr< ::mosek::fusion::Expression > _6345){ return ::mosek::fusion::p_Expr::dot_(_6344,_6345); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6346,    monty::rc_ptr< ::mosek::fusion::Variable > _6347) { return mosek::fusion::p_Expr::dot(_6346,_6347); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Matrix > _6346,monty::rc_ptr< ::mosek::fusion::Variable > _6347){ return ::mosek::fusion::p_Expr::dot_(_6346,_6347); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6348,    monty::rc_ptr< ::mosek::fusion::Variable > _6349) { return mosek::fusion::p_Expr::dot(_6348,_6349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6348,monty::rc_ptr< ::mosek::fusion::Variable > _6349){ return ::mosek::fusion::p_Expr::dot_(_6348,_6349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6350,    monty::rc_ptr< ::mosek::fusion::Expression > _6351) { return mosek::fusion::p_Expr::dot(_6350,_6351); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6350,monty::rc_ptr< ::mosek::fusion::Expression > _6351){ return ::mosek::fusion::p_Expr::dot_(_6350,_6351); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _6352,    monty::rc_ptr< ::mosek::fusion::Variable > _6353) { return mosek::fusion::p_Expr::dot(_6352,_6353); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,2 > > _6352,monty::rc_ptr< ::mosek::fusion::Variable > _6353){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6352),_6353); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _6354,    monty::rc_ptr< ::mosek::fusion::Expression > _6355) { return mosek::fusion::p_Expr::dot(_6354,_6355); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,2 > > _6354,monty::rc_ptr< ::mosek::fusion::Expression > _6355){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6354),_6355); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _6356,    monty::rc_ptr< ::mosek::fusion::Variable > _6357) { return mosek::fusion::p_Expr::dot(_6356,_6357); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,1 > > _6356,monty::rc_ptr< ::mosek::fusion::Variable > _6357){ return ::mosek::fusion::p_Expr::dot_(_6356,_6357); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _6358,    monty::rc_ptr< ::mosek::fusion::Expression > _6359) { return mosek::fusion::p_Expr::dot(_6358,_6359); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,1 > > _6358,monty::rc_ptr< ::mosek::fusion::Expression > _6359){ return ::mosek::fusion::p_Expr::dot_(_6358,_6359); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6360,    monty::rc_ptr< ::mosek::fusion::Matrix > _6361) { return mosek::fusion::p_Expr::dot(_6360,_6361); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6360,monty::rc_ptr< ::mosek::fusion::Matrix > _6361){ return ::mosek::fusion::p_Expr::dot_(_6361,_6360); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6362,    std::shared_ptr< monty::ndarray< double,2 > > _6363) { return mosek::fusion::p_Expr::dot(_6362,_6363); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6362,std::shared_ptr< monty::ndarray< double,2 > > _6363){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6363),_6362); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6364,    std::shared_ptr< monty::ndarray< double,1 > > _6365) { return mosek::fusion::p_Expr::dot(_6364,_6365); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6364,std::shared_ptr< monty::ndarray< double,1 > > _6365){ return ::mosek::fusion::p_Expr::dot_(_6365,_6364); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6366,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6367) { return mosek::fusion::p_Expr::dot(_6366,_6367); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6366,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6367){ return ::mosek::fusion::p_Expr::dot_(_6367,_6366); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6368,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6369) { return mosek::fusion::p_Expr::dot(_6368,_6369); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6368,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6369){ return ::mosek::fusion::p_Expr::dot_(_6369,_6368); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6370,    monty::rc_ptr< ::mosek::fusion::Matrix > _6371) { return mosek::fusion::p_Expr::dot(_6370,_6371); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6370,monty::rc_ptr< ::mosek::fusion::Matrix > _6371){ return ::mosek::fusion::p_Expr::dot_(_6371,_6370); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6372,    std::shared_ptr< monty::ndarray< double,2 > > _6373) { return mosek::fusion::p_Expr::dot(_6372,_6373); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6372,std::shared_ptr< monty::ndarray< double,2 > > _6373){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6373),_6372); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6374,    std::shared_ptr< monty::ndarray< double,1 > > _6375) { return mosek::fusion::p_Expr::dot(_6374,_6375); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6374,std::shared_ptr< monty::ndarray< double,1 > > _6375){ return ::mosek::fusion::p_Expr::dot_(_6375,_6374); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6376,    monty::rc_ptr< ::mosek::fusion::Variable > _6377) { return mosek::fusion::p_Expr::sub(_6376,_6377); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6376,monty::rc_ptr< ::mosek::fusion::Variable > _6377){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6376),1.0,_6377->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6378,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6379) { return mosek::fusion::p_Expr::sub(_6378,_6379); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6378,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6379){ return ::mosek::fusion::p_Expr::add_(_6378->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6379),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6380,    monty::rc_ptr< ::mosek::fusion::Variable > _6381) { return mosek::fusion::p_Expr::sub(_6380,_6381); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Matrix > _6380,monty::rc_ptr< ::mosek::fusion::Variable > _6381){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6380),1.0,_6381->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6382,    monty::rc_ptr< ::mosek::fusion::Matrix > _6383) { return mosek::fusion::p_Expr::sub(_6382,_6383); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6382,monty::rc_ptr< ::mosek::fusion::Matrix > _6383){ return ::mosek::fusion::p_Expr::add_(_6382->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6383),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _6384,    monty::rc_ptr< ::mosek::fusion::Variable > _6385) { return mosek::fusion::p_Expr::sub(_6384,_6385); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( double _6384,monty::rc_ptr< ::mosek::fusion::Variable > _6385){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6385->shape(),_6384),1.0,_6385->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6386,    double _6387) { return mosek::fusion::p_Expr::sub(_6386,_6387); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6386,double _6387){ return ::mosek::fusion::p_Expr::add_(_6386->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6386->shape(),_6387),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _6388,    monty::rc_ptr< ::mosek::fusion::Variable > _6389) { return mosek::fusion::p_Expr::sub(_6388,_6389); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,2 > > _6388,monty::rc_ptr< ::mosek::fusion::Variable > _6389){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6388),1.0,_6389->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _6390,    monty::rc_ptr< ::mosek::fusion::Variable > _6391) { return mosek::fusion::p_Expr::sub(_6390,_6391); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,1 > > _6390,monty::rc_ptr< ::mosek::fusion::Variable > _6391){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6390),1.0,_6391->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6392,    std::shared_ptr< monty::ndarray< double,2 > > _6393) { return mosek::fusion::p_Expr::sub(_6392,_6393); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6392,std::shared_ptr< monty::ndarray< double,2 > > _6393){ return ::mosek::fusion::p_Expr::add_(_6392->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6393),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6394,    std::shared_ptr< monty::ndarray< double,1 > > _6395) { return mosek::fusion::p_Expr::sub(_6394,_6395); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6394,std::shared_ptr< monty::ndarray< double,1 > > _6395){ return ::mosek::fusion::p_Expr::add_(_6394->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6395),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6396,    monty::rc_ptr< ::mosek::fusion::Variable > _6397) { return mosek::fusion::p_Expr::sub(_6396,_6397); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6396,monty::rc_ptr< ::mosek::fusion::Variable > _6397){ return ::mosek::fusion::p_Expr::add_(_6396->asExpr(),1.0,_6397->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6398,    monty::rc_ptr< ::mosek::fusion::Expression > _6399) { return mosek::fusion::p_Expr::sub(_6398,_6399); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6398,monty::rc_ptr< ::mosek::fusion::Expression > _6399){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6398),1.0,_6399,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6400,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6401) { return mosek::fusion::p_Expr::sub(_6400,_6401); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6400,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6401){ return ::mosek::fusion::p_Expr::add_(_6400,1.0,::mosek::fusion::p_Expr::constTerm(_6401),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6402,    monty::rc_ptr< ::mosek::fusion::Expression > _6403) { return mosek::fusion::p_Expr::sub(_6402,_6403); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Matrix > _6402,monty::rc_ptr< ::mosek::fusion::Expression > _6403){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6402),1.0,_6403,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6404,    monty::rc_ptr< ::mosek::fusion::Matrix > _6405) { return mosek::fusion::p_Expr::sub(_6404,_6405); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6404,monty::rc_ptr< ::mosek::fusion::Matrix > _6405){ return ::mosek::fusion::p_Expr::add_(_6404,1.0,::mosek::fusion::p_Expr::constTerm(_6405),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _6406,    monty::rc_ptr< ::mosek::fusion::Expression > _6407) { return mosek::fusion::p_Expr::sub(_6406,_6407); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( double _6406,monty::rc_ptr< ::mosek::fusion::Expression > _6407){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6407->shape(),_6406),1.0,_6407,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6408,    double _6409) { return mosek::fusion::p_Expr::sub(_6408,_6409); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6408,double _6409){ return ::mosek::fusion::p_Expr::add_(_6408,1.0,::mosek::fusion::p_Expr::constTerm(_6408->shape(),_6409),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _6410,    monty::rc_ptr< ::mosek::fusion::Expression > _6411) { return mosek::fusion::p_Expr::sub(_6410,_6411); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,2 > > _6410,monty::rc_ptr< ::mosek::fusion::Expression > _6411){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6410),1.0,_6411,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _6412,    monty::rc_ptr< ::mosek::fusion::Expression > _6413) { return mosek::fusion::p_Expr::sub(_6412,_6413); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,1 > > _6412,monty::rc_ptr< ::mosek::fusion::Expression > _6413){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6412),1.0,_6413,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6414,    std::shared_ptr< monty::ndarray< double,2 > > _6415) { return mosek::fusion::p_Expr::sub(_6414,_6415); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6414,std::shared_ptr< monty::ndarray< double,2 > > _6415){ return ::mosek::fusion::p_Expr::add_(_6414,1.0,::mosek::fusion::p_Expr::constTerm(_6415),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6416,    std::shared_ptr< monty::ndarray< double,1 > > _6417) { return mosek::fusion::p_Expr::sub(_6416,_6417); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6416,std::shared_ptr< monty::ndarray< double,1 > > _6417){ return ::mosek::fusion::p_Expr::add_(_6416,1.0,::mosek::fusion::p_Expr::constTerm(_6417),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6418,    monty::rc_ptr< ::mosek::fusion::Expression > _6419) { return mosek::fusion::p_Expr::sub(_6418,_6419); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6418,monty::rc_ptr< ::mosek::fusion::Expression > _6419){ return ::mosek::fusion::p_Expr::add_(_6418->asExpr(),1.0,_6419,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6420,    monty::rc_ptr< ::mosek::fusion::Variable > _6421) { return mosek::fusion::p_Expr::sub(_6420,_6421); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6420,monty::rc_ptr< ::mosek::fusion::Variable > _6421){ return ::mosek::fusion::p_Expr::add_(_6420,1.0,_6421->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6422,    monty::rc_ptr< ::mosek::fusion::Expression > _6423) { return mosek::fusion::p_Expr::sub(_6422,_6423); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6422,monty::rc_ptr< ::mosek::fusion::Expression > _6423){ return ::mosek::fusion::p_Expr::add_(_6422,1.0,_6423,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6424,    monty::rc_ptr< ::mosek::fusion::Variable > _6425) { return mosek::fusion::p_Expr::add(_6424,_6425); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6424,monty::rc_ptr< ::mosek::fusion::Variable > _6425){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6424),1.0,_6425->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6426,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6427) { return mosek::fusion::p_Expr::add(_6426,_6427); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6426,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6427){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6427),1.0,_6426->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6428,    monty::rc_ptr< ::mosek::fusion::Variable > _6429) { return mosek::fusion::p_Expr::add(_6428,_6429); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Matrix > _6428,monty::rc_ptr< ::mosek::fusion::Variable > _6429){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6428),1.0,_6429->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6430,    monty::rc_ptr< ::mosek::fusion::Matrix > _6431) { return mosek::fusion::p_Expr::add(_6430,_6431); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6430,monty::rc_ptr< ::mosek::fusion::Matrix > _6431){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6431),1.0,_6430->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _6432,    monty::rc_ptr< ::mosek::fusion::Variable > _6433) { return mosek::fusion::p_Expr::add(_6432,_6433); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( double _6432,monty::rc_ptr< ::mosek::fusion::Variable > _6433){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6433->shape(),_6432),1.0,_6433->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6434,    double _6435) { return mosek::fusion::p_Expr::add(_6434,_6435); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6434,double _6435){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6434->shape(),_6435),1.0,_6434->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _6436,    monty::rc_ptr< ::mosek::fusion::Variable > _6437) { return mosek::fusion::p_Expr::add(_6436,_6437); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,2 > > _6436,monty::rc_ptr< ::mosek::fusion::Variable > _6437){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6436),1.0,_6437->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _6438,    monty::rc_ptr< ::mosek::fusion::Variable > _6439) { return mosek::fusion::p_Expr::add(_6438,_6439); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,1 > > _6438,monty::rc_ptr< ::mosek::fusion::Variable > _6439){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6438),1.0,_6439->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6440,    std::shared_ptr< monty::ndarray< double,2 > > _6441) { return mosek::fusion::p_Expr::add(_6440,_6441); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6440,std::shared_ptr< monty::ndarray< double,2 > > _6441){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6441),1.0,_6440->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6442,    std::shared_ptr< monty::ndarray< double,1 > > _6443) { return mosek::fusion::p_Expr::add(_6442,_6443); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6442,std::shared_ptr< monty::ndarray< double,1 > > _6443){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6443),1.0,_6442->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6444,    monty::rc_ptr< ::mosek::fusion::Variable > _6445) { return mosek::fusion::p_Expr::add(_6444,_6445); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6444,monty::rc_ptr< ::mosek::fusion::Variable > _6445){ return ::mosek::fusion::p_Expr::add_(_6444->asExpr(),1.0,_6445->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6446,    monty::rc_ptr< ::mosek::fusion::Expression > _6447) { return mosek::fusion::p_Expr::add(_6446,_6447); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6446,monty::rc_ptr< ::mosek::fusion::Expression > _6447){ return ::mosek::fusion::p_Expr::add_(_6447,1.0,::mosek::fusion::p_Expr::constTerm(_6446),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6448,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6449) { return mosek::fusion::p_Expr::add(_6448,_6449); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6448,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6449){ return ::mosek::fusion::p_Expr::add_(_6448,1.0,::mosek::fusion::p_Expr::constTerm(_6449),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6450,    monty::rc_ptr< ::mosek::fusion::Expression > _6451) { return mosek::fusion::p_Expr::add(_6450,_6451); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Matrix > _6450,monty::rc_ptr< ::mosek::fusion::Expression > _6451){ return ::mosek::fusion::p_Expr::add_(_6451,1.0,::mosek::fusion::p_Expr::constTerm(_6450),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6452,    monty::rc_ptr< ::mosek::fusion::Matrix > _6453) { return mosek::fusion::p_Expr::add(_6452,_6453); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6452,monty::rc_ptr< ::mosek::fusion::Matrix > _6453){ return ::mosek::fusion::p_Expr::add_(_6452,1.0,::mosek::fusion::p_Expr::constTerm(_6453),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _6454,    monty::rc_ptr< ::mosek::fusion::Expression > _6455) { return mosek::fusion::p_Expr::add(_6454,_6455); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( double _6454,monty::rc_ptr< ::mosek::fusion::Expression > _6455){ return ::mosek::fusion::p_Expr::add_(_6455,1.0,::mosek::fusion::p_Expr::constTerm(_6455->shape(),_6454),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6456,    double _6457) { return mosek::fusion::p_Expr::add(_6456,_6457); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6456,double _6457){ return ::mosek::fusion::p_Expr::add_(_6456,1.0,::mosek::fusion::p_Expr::constTerm(_6456->shape(),_6457),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _6458,    monty::rc_ptr< ::mosek::fusion::Expression > _6459) { return mosek::fusion::p_Expr::add(_6458,_6459); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,2 > > _6458,monty::rc_ptr< ::mosek::fusion::Expression > _6459){ return ::mosek::fusion::p_Expr::add_(_6459,1.0,::mosek::fusion::p_Expr::constTerm(_6458),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _6460,    monty::rc_ptr< ::mosek::fusion::Expression > _6461) { return mosek::fusion::p_Expr::add(_6460,_6461); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,1 > > _6460,monty::rc_ptr< ::mosek::fusion::Expression > _6461){ return ::mosek::fusion::p_Expr::add_(_6461,1.0,::mosek::fusion::p_Expr::constTerm(_6460),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6462,    std::shared_ptr< monty::ndarray< double,2 > > _6463) { return mosek::fusion::p_Expr::add(_6462,_6463); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6462,std::shared_ptr< monty::ndarray< double,2 > > _6463){ return ::mosek::fusion::p_Expr::add_(_6462,1.0,::mosek::fusion::p_Expr::constTerm(_6463),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6464,    std::shared_ptr< monty::ndarray< double,1 > > _6465) { return mosek::fusion::p_Expr::add(_6464,_6465); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6464,std::shared_ptr< monty::ndarray< double,1 > > _6465){ return ::mosek::fusion::p_Expr::add_(_6464,1.0,::mosek::fusion::p_Expr::constTerm(_6465),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6466,    monty::rc_ptr< ::mosek::fusion::Expression > _6467) { return mosek::fusion::p_Expr::add(_6466,_6467); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6466,monty::rc_ptr< ::mosek::fusion::Expression > _6467){ return ::mosek::fusion::p_Expr::add_(_6466->asExpr(),1.0,_6467,1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6468,    monty::rc_ptr< ::mosek::fusion::Variable > _6469) { return mosek::fusion::p_Expr::add(_6468,_6469); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6468,monty::rc_ptr< ::mosek::fusion::Variable > _6469){ return ::mosek::fusion::p_Expr::add_(_6468,1.0,_6469->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6470,    monty::rc_ptr< ::mosek::fusion::Expression > _6471) { return mosek::fusion::p_Expr::add(_6470,_6471); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6470,monty::rc_ptr< ::mosek::fusion::Expression > _6471){ return ::mosek::fusion::p_Expr::add_(_6470,1.0,_6471,1.0); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Expr::shape  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Expr::shape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Expr::getShape  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Expr::getShape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Expr::getModel  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::getModel( ){ return model; }void mosek::fusion::p_Expr::validateData( std::shared_ptr< monty::ndarray< long long,1 > > _6472,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6473,std::shared_ptr< monty::ndarray< long long,1 > > _6474,std::shared_ptr< monty::ndarray< double,1 > > _6475,std::shared_ptr< monty::ndarray< double,1 > > _6476,monty::rc_ptr< ::mosek::fusion::Set > _6477,std::shared_ptr< monty::ndarray< long long,1 > > _6478){ int _6479 = ((int)((_6472)->size(0)) - (int)1); long long _6480 = ((*_6472)(((int)((_6472)->size(0)) - (int)1))); long long _6481 = (long long)0; if (! _6473){ throw ::mosek::fusion::ExpressionError(std::string ("Array v must not be null"));}else {}int _9493 = (int)0; int _9494 = (int)((_6473)->size(0)); for (int _6482 = _9493;_6482<_9494;++_6482){ if (! ((*_6473)(_6482))){ throw ::mosek::fusion::ExpressionError(std::string ("Array elements of v must not be null"));}else { (_6481 = (_6481 + ((*_6473)(_6482))->size())); }}if (((int)((_6472)->size(0)) < (int)1)){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));}else {}if ((_6480 != (int)((_6474)->size(0)))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));}else {}if ((_6480 != (int)((_6475)->size(0)))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));}else {}if ((_6476 && (_6479 != (int)((_6476)->size(0))))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));}else {}if (_6477){ if ((_6478 && ((int)((_6478)->size(0)) < mosek::fusion::p_Set::_get_impl(_6477)->size))){ std::shared_ptr< monty::ndarray< long long,1 > > _6483 = _6478; if (((int)((_6483)->size(0)) != ((int)((_6472)->size(0)) - (int)1))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));}else {}if (((int)((_6483)->size(0)) > (int)0)){ if (((((*_6483)((int)0)) < (int)0) || (((*_6483)((int)0)) >= mosek::fusion::p_Set::_get_impl(_6477)->size))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));}else {}bool _6484 = true; long long _6485 = mosek::fusion::p_Set::_get_impl(_6477)->size; int _9495 = (int)1; int _9496 = (int)((_6483)->size(0)); for (int _6486 = _9495;_6486<_9496;++_6486){ (_6484 = (_6484 && ((((*_6483)(_6486)) >= (int)0) && ((((*_6483)(_6486)) < _6485) && (((*_6483)(_6486)) > ((*_6483)((_6486 - (int)1)))))))); }if ((! _6484)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));}else {}}else {}}else { if ((mosek::fusion::p_Set::_get_impl(_6477)->size != ((long long)((_6472)->size(0)) - (long long)1))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));}else {}}}else if (_6478){ throw ::mosek::fusion::ExpressionError(std::string ("Undefined expression shape"));}else {}bool _6487 = false; bool _6488 = false; if ((((*_6472)((int)0)) != (long long)0)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));}else {}bool _6489 = true; int _9497 = (int)0; int _9498 = _6479; for (int _6490 = _9497;_6490<_9498;++_6490){ (_6489 = (_6489 && (((*_6472)(_6490)) <= ((*_6472)((_6490 + (int)1)))))); }if ((! _6489)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));}else {}bool _6491 = true; int _9499 = (int)0; long long _9500 = _6480; for (long long _6492 = _9499;_6492<_9500;++_6492){ (_6491 = (_6491 && ((((*_6474)(_6492)) >= (int)0) && (((*_6474)(_6492)) < _6481)))); }if ((! _6491)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'subj' argument in expression"));}else {}}monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6493){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::Model > { if ( (! _6493 || ((int)((_6493)->size(0)) == (int)0))) return (nullptr); else return (((*_6493)((int)0))->getModel()); })(); }void mosek::fusion::p_Expr::destroy(){varsb.reset();inst.reset();cof_v.reset();x.reset();subj.reset();ptrb.reset();bfix.reset();shape_p.reset();model.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6494){ return new mosek::fusion::FlatExpr(_6494); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6494) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_6494); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6494){monty::rc_reserve __reserve_this(_pubthis); { { if (mosek::fusion::p_FlatExpr::_get_impl(_6494)->bfix){ (bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6494)->bfix)); }else { (bfix = nullptr); }(ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6494)->ptrb)); (subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6494)->subj)); (x = mosek::fusion::p_FlatExpr::_get_impl(_6494)->x); (cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6494)->cof)); (nnz = mosek::fusion::p_FlatExpr::_get_impl(_6494)->nnz); (shape = mosek::fusion::p_FlatExpr::_get_impl(_6494)->shape); (inst = mosek::fusion::p_FlatExpr::_get_impl(_6494)->inst); }}}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _6495,    std::shared_ptr< monty::ndarray< long long,1 > > _6496,    std::shared_ptr< monty::ndarray< long long,1 > > _6497,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6498,    std::shared_ptr< monty::ndarray< double,1 > > _6499,    monty::rc_ptr< ::mosek::fusion::Set > _6500,    std::shared_ptr< monty::ndarray< long long,1 > > _6501){ return new mosek::fusion::FlatExpr(_6495,_6496,_6497,_6498,_6499,_6500,_6501); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _6495,    std::shared_ptr< monty::ndarray< long long,1 > > _6496,    std::shared_ptr< monty::ndarray< long long,1 > > _6497,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6498,    std::shared_ptr< monty::ndarray< double,1 > > _6499,    monty::rc_ptr< ::mosek::fusion::Set > _6500,    std::shared_ptr< monty::ndarray< long long,1 > > _6501) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_6495,_6496,_6497,_6498,_6499,_6500,_6501); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _6495,    std::shared_ptr< monty::ndarray< long long,1 > > _6496,    std::shared_ptr< monty::ndarray< long long,1 > > _6497,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6498,    std::shared_ptr< monty::ndarray< double,1 > > _6499,    monty::rc_ptr< ::mosek::fusion::Set > _6500,    std::shared_ptr< monty::ndarray< long long,1 > > _6501){monty::rc_reserve __reserve_this(_pubthis); { { if ((_6495 && ((int)((_6495)->size(0)) != ((int)((_6496)->size(0)) - (int)1)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));}else {}if ((! _6499 || (! _6497 || ((int)((_6497)->size(0)) != (int)((_6499)->size(0)))))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));}else {}if (_6500){ if (_6501){ if (((int)((_6501)->size(0)) != ((int)((_6496)->size(0)) - (int)1))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));}else {}}else if ((mosek::fusion::p_Set::_get_impl(_6500)->size != ((long long)((_6496)->size(0)) - (int)1))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));}else {}}else {}(bfix = _6495); (ptrb = _6496); (subj = _6497); (x = _6498); (cof = _6499); (nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)))); (shape = _6500); (inst = _6501); }}}std::string mosek::fusion::FlatExpr::toString  ( ) { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6502 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6502.get())->a(std::string ("FlatExpr:")).get())->lf().get())->a(std::string ("+-----------------")).get())->lf().get())->a(std::string ("| ptrb[")).get())->a((int)((ptrb)->size(0))).get())->a(std::string ("] = ")).get())->a(ptrb).get())->lf().get())->a(std::string ("| subj[")).get())->a((int)((subj)->size(0))).get())->a(std::string ("] = ")).get())->a(subj).get())->lf().get())->a(std::string ("| cof [")).get())->a((int)((cof)->size(0))).get())->a(std::string ("] = ")).get())->a(cof).get())->lf().get())->a(std::string ("| bfix[")); if (bfix){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6502.get())->a((int)((bfix)->size(0))); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6502.get())->a(std::string ("] = ")).get())->a(bfix).get())->lf().get())->a(std::string ("| inst[")); if (inst){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6502.get())->a((int)((inst)->size(0))); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6502.get())->a(std::string ("] = ")).get())->a(inst).get())->lf().get())->a(std::string ("+-----------------")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6502.get())->toString(); }int mosek::fusion::FlatExpr::size  ( ) { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size( ){ return ((int)((ptrb)->size(0)) - (int)1); }void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();x.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _6503,    int _6504,    std::shared_ptr< monty::ndarray< int,1 > > _6505,    std::shared_ptr< monty::ndarray< int,1 > > _6506,    std::shared_ptr< monty::ndarray< double,1 > > _6507,    std::shared_ptr< monty::ndarray< int,1 > > _6508,    std::shared_ptr< monty::ndarray< int,1 > > _6509,    std::shared_ptr< monty::ndarray< double,1 > > _6510,    double _6511){ return new mosek::fusion::SymmetricMatrix(_6503,_6504,_6505,_6506,_6507,_6508,_6509,_6510,_6511); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _6503,    int _6504,    std::shared_ptr< monty::ndarray< int,1 > > _6505,    std::shared_ptr< monty::ndarray< int,1 > > _6506,    std::shared_ptr< monty::ndarray< double,1 > > _6507,    std::shared_ptr< monty::ndarray< int,1 > > _6508,    std::shared_ptr< monty::ndarray< int,1 > > _6509,    std::shared_ptr< monty::ndarray< double,1 > > _6510,    double _6511) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_6503,_6504,_6505,_6506,_6507,_6508,_6509,_6510,_6511); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _6503,    int _6504,    std::shared_ptr< monty::ndarray< int,1 > > _6505,    std::shared_ptr< monty::ndarray< int,1 > > _6506,    std::shared_ptr< monty::ndarray< double,1 > > _6507,    std::shared_ptr< monty::ndarray< int,1 > > _6508,    std::shared_ptr< monty::ndarray< int,1 > > _6509,    std::shared_ptr< monty::ndarray< double,1 > > _6510,    double _6511){monty::rc_reserve __reserve_this(_pubthis); { { (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->d0 = _6503); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->d1 = _6504); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->usubi = _6505); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->usubj = _6506); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->uval = _6507); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vsubi = _6508); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vsubj = _6509); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vval = _6510); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->scale = _6511); (nnz = (- (int)1)); }}}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _6512,    std::shared_ptr< monty::ndarray< int,1 > > _6513,    std::shared_ptr< monty::ndarray< double,1 > > _6514) { return mosek::fusion::p_SymmetricMatrix::rankOne(_6512,_6513,_6514); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne( int _6512,std::shared_ptr< monty::ndarray< int,1 > > _6513,std::shared_ptr< monty::ndarray< double,1 > > _6514){ if (((int)((_6513)->size(0)) != (int)((_6514)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}int _9501 = (int)0; int _9502 = (int)((_6513)->size(0)); for (int _6515 = _9501;_6515<_9502;++_6515){ if (((((*_6513)(_6515)) < (int)0) || (((*_6513)(_6515)) >= _6512))){ throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));}else {}}std::shared_ptr< monty::ndarray< int,1 > > _6516 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9503; for (int _6517=(int)0, _9504=(int)((_6513)->size(0)); _6517 < _9504;++_6517)_9503.push_back(((*_6513)(_6517))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9503.size()),_9503.begin(),_9503.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6518 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9505; for (int _6519=(int)0, _9506=(int)((_6513)->size(0)); _6519 < _9506;++_6519)_9505.push_back((int)1); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9505.size()),_9505.begin(),_9505.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6520 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9507; for (int _6521=(int)0, _9508=(int)((_6514)->size(0)); _6521 < _9508;++_6521)_9507.push_back(((*_6514)(_6521))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9507.size()),_9507.begin(),_9507.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6512,(int)1,_6516,_6518,_6520,_6516,_6518,_6520,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _6522) { return mosek::fusion::p_SymmetricMatrix::rankOne(_6522); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne( std::shared_ptr< monty::ndarray< double,1 > > _6522){ int _6523 = (int)((_6522)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6524 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9509; for (int _6525=(int)0, _9510=_6523; _6525 < _9510;++_6525)_9509.push_back(_6525); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9509.size()),_9509.begin(),_9509.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6526 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9511; for (int _6527=(int)0, _9512=_6523; _6527 < _9512;++_6527)_9511.push_back((int)1); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9511.size()),_9511.begin(),_9511.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6528 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9513; for (int _6529=(int)0, _9514=_6523; _6529 < _9514;++_6529)_9513.push_back(((*_6522)(_6529))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9513.size()),_9513.begin(),_9513.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6523,(int)1,_6524,_6526,_6528,_6524,_6526,_6528,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6530) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_6530); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag( std::shared_ptr< monty::ndarray< double,1 > > _6530){ int _6531 = (int)((_6530)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6532 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9515; for (int _6533=(int)0, _9516=_6531; _6533 < _9516;++_6533)_9515.push_back(_6533); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9515.size()),_9515.begin(),_9515.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6531,_6531,_6532,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9517; for (int _6534=(int)0, _9518=_6531; _6534 < _9518;++_6534)_9517.push_back((_6531 - _6534)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9517.size()),_9517.begin(),_9517.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9519; for (int _6535=(int)0, _9520=_6531; _6535 < _9520;++_6535)_9519.push_back(((*_6530)(_6535))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9519.size()),_9519.begin(),_9519.end())); })(),_6532,_6532,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9521; for (int _6536=(int)0, _9522=_6531; _6536 < _9522;++_6536)_9521.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9521.size()),_9521.begin(),_9521.end())); })(),1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6537) { return mosek::fusion::p_SymmetricMatrix::diag(_6537); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6537){ int _6538 = (int)((_6537)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6539 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9523; for (int _6540=(int)0, _9524=_6538; _6540 < _9524;++_6540)_9523.push_back(_6540); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9523.size()),_9523.begin(),_9523.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6538,_6538,_6539,_6539,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9525; for (int _6541=(int)0, _9526=_6538; _6541 < _9526;++_6541)_9525.push_back(((*_6537)(_6541))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9525.size()),_9525.begin(),_9525.end())); })(),_6539,_6539,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9527; for (int _6542=(int)0, _9528=_6538; _6542 < _9528;++_6542)_9527.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9527.size()),_9527.begin(),_9527.end())); })(),1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add  ( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6543) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->add(_6543); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::add( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6543){ int _6544 = _pubthis->getdim(); if ((_6543->getdim() != _6544)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));}else {}int _6545 = (int)((usubi)->size(0)); int _6546 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->usubi)->size(0)); int _6547 = (_6545 + _6546); int _6548 = (int)((vsubi)->size(0)); int _6549 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->vsubi)->size(0)); int _6550 = (_6548 + _6549); std::shared_ptr< monty::ndarray< int,1 > > _6551 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6547))); std::shared_ptr< monty::ndarray< int,1 > > _6552 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6547))); std::shared_ptr< monty::ndarray< double,1 > > _6553 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6547))); std::shared_ptr< monty::ndarray< int,1 > > _6554 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6550))); std::shared_ptr< monty::ndarray< int,1 > > _6555 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6550))); std::shared_ptr< monty::ndarray< double,1 > > _6556 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6550))); ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_6551,(int)0,_6545); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->usubi,(int)0,_6551,_6545,_6546); ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_6552,(int)0,_6545); int _9529 = (int)0; int _9530 = _6546; for (int _6557 = _9529;_6557<_9530;++_6557){ (((*_6552)((_6557 + _6545))) = (((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->usubj)(_6557)) + d1)); }if (((scale > 1.0) || (scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_6553,(int)0,_6545); }else { int _9531 = (int)0; int _9532 = _6545; for (int _6558 = _9531;_6558<_9532;++_6558){ (((*_6553)(_6558)) = (scale * ((*uval)(_6558)))); }}if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->uval,(int)0,_6553,_6545,_6546); }else { int _9533 = (int)0; int _9534 = _6546; for (int _6559 = _9533;_6559<_9534;++_6559){ (((*_6553)((_6559 + _6545))) = (mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->uval)(_6559)))); }}::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_6551,(int)0,_6545); int _9535 = (int)0; int _9536 = _6549; for (int _6560 = _9535;_6560<_9536;++_6560){ (((*_6554)((_6560 + _6548))) = (((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->vsubi)(_6560)) + mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->d1)); }::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_6555,(int)0,_6548); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->vsubj,_6548,_6555,_6548,_6549); if (((scale > 1.0) || (scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_6556,(int)0,_6548); }else { int _9537 = (int)0; int _9538 = _6548; for (int _6561 = _9537;_6561<_9538;++_6561){ (((*_6556)(_6561)) = (scale * ((*vval)(_6561)))); }}if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->vval,(int)0,_6556,_6548,_6549); }else { int _9539 = (int)0; int _9540 = _6549; for (int _6562 = _9539;_6562<_9540;++_6562){ (((*_6556)((_6562 + _6548))) = (mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->vval)(_6562)))); }}return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,(d1 + mosek::fusion::p_SymmetricMatrix::_get_impl(_6543)->d1),_6551,_6552,_6553,_6554,_6555,_6556,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub  ( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6563) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->sub(_6563); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::sub( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6563){ return _pubthis->add(_6563->mul((- 1.0))); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul  ( double _6564) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->mul(_6564); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::mul( double _6564){ return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _6564)); }int mosek::fusion::SymmetricMatrix::getdim  ( ) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim( ){ return d0; }void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6565,    std::shared_ptr< monty::ndarray< int,2 > > _6566,    std::shared_ptr< monty::ndarray< double,1 > > _6567){ return new mosek::fusion::NDSparseArray(_6565,_6566,_6567); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6565,    std::shared_ptr< monty::ndarray< int,2 > > _6566,    std::shared_ptr< monty::ndarray< double,1 > > _6567) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6565,_6566,_6567); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6565,    std::shared_ptr< monty::ndarray< int,2 > > _6566,    std::shared_ptr< monty::ndarray< double,1 > > _6567){monty::rc_reserve __reserve_this(_pubthis); { { std::shared_ptr< monty::ndarray< long long,1 > > _6568 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_6566)->size(0))))); (size = (long long)1); int _9541 = (int)0; int _9542 = (int)((_6565)->size(0)); for (int _6569 = _9541;_6569<_9542;++_6569){ (size = (size * ((*_6565)(_6569)))); }int _6570 = (int)((_6565)->size(0)); if (((int)((_6566)->size(0)) != (int)((_6567)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));}else {}if (((int)((_6566)->size(1)) != _6570)){ throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));}else {}int _9543 = (int)0; int _9544 = (int)((_6566)->size(0)); for (int _6571 = _9543;_6571<_9544;++_6571){ int _9545 = (int)0; int _9546 = (int)((_6566)->size(1)); for (int _6572 = _9545;_6572<_9546;++_6572){ if (((((*_6566)(_6571,_6572)) < (int)0) || (((*_6566)(_6571,_6572)) >= ((*_6565)(_6572))))){ throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));}else {}}}int _9547 = (int)0; int _9548 = (int)((_6566)->size(0)); for (int _6573 = _9547;_6573<_9548;++_6573){ long long _6574 = (long long)0; int _9549 = (int)0; int _9550 = (int)((_6566)->size(1)); for (int _6575 = _9549;_6575<_9550;++_6575){ (_6574 = ((_6574 * ((*_6565)(((_6570 - _6575) - (int)1)))) + ((*_6566)(_6573,_6575)))); }(((*_6568)(_6573)) = _6574); }(dims = ::mosek::fusion::Utils::Tools::arraycopy(_6565)); bool _6576 = true; int _9551 = (int)1; int _9552 = (int)((_6568)->size(0)); for (int _6577 = _9551;_6577<_9552;++_6577){ (_6576 = (_6576 && (((*_6568)(_6577)) >= ((*_6568)((_6577 - (int)1)))))); }if (_6576){ int _6578 = (int)1; int _9553 = (int)1; int _9554 = (int)((_6568)->size(0)); for (int _6579 = _9553;_6579<_9554;++_6579){ if ((((*_6568)((_6579 - (int)1))) > ((*_6568)(_6579)))){ ( ++ _6578 ); }else {}}if ((_6578 == (int)((_6568)->size(0)))){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_6568)); (cof = ::mosek::fusion::Utils::Tools::arraycopy(_6567)); }else { (inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6578)))); (((*inst)((int)0)) = ((*_6568)((int)0))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6578)))); (((*cof)((int)0)) = ((*_6567)((int)0))); int _6580 = (int)0; int _9555 = (int)1; int _9556 = (int)((_6568)->size(0)); for (int _6581 = _9555;_6581<_9556;++_6581){ if ((((*_6568)(_6581)) > ((*_6568)((_6581 - (int)1))))){ ( ++ _6580 ); (((*inst)(_6580)) = ((*_6568)(_6581))); (((*cof)(_6580)) = ((*_6567)(_6581))); }else { (((*cof)(_6580)) = (((*cof)(_6580)) + ((*_6567)(_6581)))); }}}}else { std::shared_ptr< monty::ndarray< long long,1 > > _6582 = ::mosek::fusion::Utils::Tools::range((long long)((_6568)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_6582,_6568,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_6568)->size(0))); int _6583 = (int)1; int _9557 = (int)1; int _9558 = (int)((_6568)->size(0)); for (int _6584 = _9557;_6584<_9558;++_6584){ if ((((*_6568)(((*_6582)((_6584 - (int)1))))) < ((*_6568)(((*_6582)(_6584)))))){ ( ++ _6583 ); }else {}}(inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6583)))); (((*inst)((int)0)) = ((*_6568)(((*_6582)((int)0))))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6583)))); (((*cof)((int)0)) = ((*_6567)(((*_6582)((int)0))))); int _6585 = (int)0; int _9559 = (int)1; int _9560 = (int)((_6568)->size(0)); for (int _6586 = _9559;_6586<_9560;++_6586){ if ((((*_6568)(((*_6582)(_6586)))) > ((*_6568)(((*_6582)((_6586 - (int)1))))))){ ( ++ _6585 ); (((*inst)(_6585)) = ((*_6568)(((*_6582)(_6586))))); (((*cof)(_6585)) = ((*_6567)(((*_6582)(_6586))))); }else { (((*cof)(_6585)) = (((*cof)(_6585)) + ((*_6567)(((*_6582)(_6586)))))); }}}}}}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6587,    std::shared_ptr< monty::ndarray< long long,1 > > _6588,    std::shared_ptr< monty::ndarray< double,1 > > _6589){ return new mosek::fusion::NDSparseArray(_6587,_6588,_6589); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6587,    std::shared_ptr< monty::ndarray< long long,1 > > _6588,    std::shared_ptr< monty::ndarray< double,1 > > _6589) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6587,_6588,_6589); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6587,    std::shared_ptr< monty::ndarray< long long,1 > > _6588,    std::shared_ptr< monty::ndarray< double,1 > > _6589){monty::rc_reserve __reserve_this(_pubthis); { { (size = (long long)1); int _9561 = (int)0; int _9562 = (int)((_6587)->size(0)); for (int _6590 = _9561;_6590<_9562;++_6590){ (size = (size * ((*_6587)(_6590)))); }if (((int)((_6588)->size(0)) != (int)((_6589)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));}else {}int _9563 = (int)0; int _9564 = (int)((_6588)->size(0)); for (int _6591 = _9563;_6591<_9564;++_6591){ if (((((*_6588)(_6591)) < (int)0) || (((*_6588)(_6591)) >= size))){ throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));}else {}}(dims = ::mosek::fusion::Utils::Tools::arraycopy(_6587)); bool _6592 = true; int _9565 = (int)1; int _9566 = (int)((_6588)->size(0)); for (int _6593 = _9565;_6593<_9566;++_6593){ (_6592 = (_6592 && (((*_6588)(_6593)) >= ((*_6588)((_6593 - (int)1)))))); }if (_6592){ int _6594 = (int)1; int _9567 = (int)1; int _9568 = (int)((_6588)->size(0)); for (int _6595 = _9567;_6595<_9568;++_6595){ if ((((*_6588)((_6595 - (int)1))) > ((*_6588)(_6595)))){ ( ++ _6594 ); }else {}}if ((_6594 == (int)((_6588)->size(0)))){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_6588)); (cof = ::mosek::fusion::Utils::Tools::arraycopy(_6589)); }else { (inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6594)))); (((*inst)((int)0)) = ((*_6588)((int)0))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6594)))); (((*cof)((int)0)) = ((*_6589)((int)0))); int _6596 = (int)0; int _9569 = (int)1; int _9570 = (int)((_6588)->size(0)); for (int _6597 = _9569;_6597<_9570;++_6597){ if ((((*_6588)(_6597)) > ((*_6588)((_6597 - (int)1))))){ ( ++ _6596 ); (((*inst)(_6596)) = ((*_6588)(_6597))); (((*cof)(_6596)) = ((*_6589)(_6597))); }else { (((*cof)(_6596)) = (((*cof)(_6596)) + ((*_6589)(_6597)))); }}}}else { std::shared_ptr< monty::ndarray< long long,1 > > _6598 = ::mosek::fusion::Utils::Tools::range((long long)((_6588)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_6598,_6588,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_6588)->size(0))); int _6599 = (int)1; int _9571 = (int)1; int _9572 = (int)((_6588)->size(0)); for (int _6600 = _9571;_6600<_9572;++_6600){ if ((((*_6588)(((*_6598)((_6600 - (int)1))))) < ((*_6588)(((*_6598)(_6600)))))){ ( ++ _6599 ); }else {}}(inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6599)))); (((*inst)((int)0)) = ((*_6588)(((*_6598)((int)0))))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6599)))); (((*cof)((int)0)) = ((*_6589)(((*_6598)((int)0))))); int _6601 = (int)0; int _9573 = (int)1; int _9574 = (int)((_6588)->size(0)); for (int _6602 = _9573;_6602<_9574;++_6602){ if ((((*_6588)(((*_6598)(_6602)))) > ((*inst)(((*_6598)((_6602 - (int)1))))))){ ( ++ _6601 ); (((*inst)(_6601)) = ((*_6588)(((*_6598)(_6602))))); (((*cof)(_6601)) = ((*_6589)(((*_6598)(_6602))))); }else { (((*cof)(_6601)) = (((*cof)(_6601)) + ((*_6589)(((*_6598)(_6602)))))); }}}}}}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _6603){ return new mosek::fusion::NDSparseArray(_6603); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _6603) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6603); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _6603){monty::rc_reserve __reserve_this(_pubthis); { { long long _6604 = _6603->numNonzeros(); int _6605 = _6603->numRows(); int _6606 = _6603->numColumns(); std::shared_ptr< monty::ndarray< int,1 > > _6607 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6604))); std::shared_ptr< monty::ndarray< int,1 > > _6608 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6604))); std::shared_ptr< monty::ndarray< double,1 > > _6609 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6604))); _6603->getDataAsTriplets(_6607,_6608,_6609); (size = ((long long)_6603->numRows() * (long long)_6603->numColumns())); (dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6605,_6606})); (inst = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9575; for (long long _6610=(long long)0, _9576=_6604; _6610 < _9576;++_6610)_9575.push_back((((long long)((*_6607)(_6610)) * _6606) + (long long)((*_6608)(_6610)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9575.size()),_9575.begin(),_9575.end())); })()); (cof = _6609); }}}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6611) { return mosek::fusion::p_NDSparseArray::make(_6611); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( monty::rc_ptr< ::mosek::fusion::Matrix > _6611){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6611); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _6612,    std::shared_ptr< monty::ndarray< long long,1 > > _6613,    std::shared_ptr< monty::ndarray< double,1 > > _6614) { return mosek::fusion::p_NDSparseArray::make(_6612,_6613,_6614); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( std::shared_ptr< monty::ndarray< int,1 > > _6612,std::shared_ptr< monty::ndarray< long long,1 > > _6613,std::shared_ptr< monty::ndarray< double,1 > > _6614){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6612,_6613,_6614); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _6615,    std::shared_ptr< monty::ndarray< int,2 > > _6616,    std::shared_ptr< monty::ndarray< double,1 > > _6617) { return mosek::fusion::p_NDSparseArray::make(_6615,_6616,_6617); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( std::shared_ptr< monty::ndarray< int,1 > > _6615,std::shared_ptr< monty::ndarray< int,2 > > _6616,std::shared_ptr< monty::ndarray< double,1 > > _6617){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6615,_6616,_6617); }void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _6618,    int _6619,    std::shared_ptr< monty::ndarray< double,1 > > _6620){ return new mosek::fusion::DenseMatrix(_6618,_6619,_6620); }mosek::fusion::DenseMatrix::DenseMatrix  (int _6618,    int _6619,    std::shared_ptr< monty::ndarray< double,1 > > _6620) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6618,_6619,_6620); }void mosek::fusion::p_DenseMatrix::_initialize  (int _6618,    int _6619,    std::shared_ptr< monty::ndarray< double,1 > > _6620){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6618,_6619);(nnz = (long long)(_6618 * _6619)); (data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_6618 * _6619))))); ::mosek::fusion::Utils::Tools::arraycopy(_6620,(int)0,data,(int)0,(_6618 * _6619)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _6621){ return new mosek::fusion::DenseMatrix(_6621); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _6621) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6621); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _6621){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_6621)->dimi,mosek::fusion::p_Matrix::_get_impl(_6621)->dimj);monty::rc_ptr< ::mosek::fusion::Matrix > _9577 = _6621; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9577.get())) {::mosek::fusion::DenseMatrix::t _6622(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9577.get()));{ (data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_6622)->data)); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9577.get())) {::mosek::fusion::SparseMatrix::t _6623(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9577.get()));{ (data = ::mosek::fusion::Utils::Tools::zeros((mosek::fusion::p_Matrix::_get_impl(_6623)->dimi * mosek::fusion::p_Matrix::_get_impl(_6623)->dimj))); long long _9578 = (long long)0; long long _9579 = mosek::fusion::p_SparseMatrix::_get_impl(_6623)->nnz; for (long long _6625 = _9578;_6625<_9579;++_6625){ (((*data)(((((*mosek::fusion::p_SparseMatrix::_get_impl(_6623)->subi)(_6625)) * dimj) + ((*mosek::fusion::p_SparseMatrix::_get_impl(_6623)->subj)(_6625))))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6623)->val)(_6625))); }}}else {mosek::fusion::Matrix::t _6624 = _9577;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));}}(nnz = (long long)(dimi * dimj)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _6626){ return new mosek::fusion::DenseMatrix(_6626); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _6626) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6626); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _6626){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize((int)((_6626)->size(0)),(int)((_6626)->size(1)));(data = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9580; for (int _6627=(int)0, _9581=dimi; _6627 < _9581;++_6627) for (int _6628=(int)0, _9582=dimj; _6628 < _9582;++_6628)_9580.push_back(((*_6626)(_6627,_6628))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9580.size()),_9580.begin(),_9580.end())); })()); (nnz = (long long)(dimi * dimj)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _6629,    int _6630,    double _6631){ return new mosek::fusion::DenseMatrix(_6629,_6630,_6631); }mosek::fusion::DenseMatrix::DenseMatrix  (int _6629,    int _6630,    double _6631) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6629,_6630,_6631); }void mosek::fusion::p_DenseMatrix::_initialize  (int _6629,    int _6630,    double _6631){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6629,_6630);(data = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9583; for (int _6632=(int)0, _9584=_6629; _6632 < _9584;++_6632) for (int _6633=(int)0, _9585=_6630; _6633 < _9585;++_6633)_9583.push_back(_6631); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9583.size()),_9583.begin(),_9583.end())); })()); (nnz = (long long)(_6629 * _6630)); }}std::string mosek::fusion::DenseMatrix::toString  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6634 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string ("DenseMatrix(")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(dimi); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string (",")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(dimj); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string (": ")); int _6635 = (int)0; { int _6636 = (int)0; for (;(_6636 < dimi);( ++ _6636 )){ if ((_6636 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string (",")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string ("[ ")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(((*data)(_6635))); ( ++ _6635 ); { int _6637 = (int)1; for (;(_6637 < dimj);( ++ _6637 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string (",")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(((*data)(_6635))); ( ++ _6635 ); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string (" ]")); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6634.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::transpose( ){ std::shared_ptr< monty::ndarray< double,1 > > _6638 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((dimi * dimj)))); int _6639 = (int)0; int _6640 = dimi; int _9586 = (int)0; int _9587 = dimi; for (int _6641 = _9586;_6641<_9587;++_6641){ int _6642 = _6641; int _9588 = (int)0; int _9589 = dimj; for (int _6643 = _9588;_6643<_9589;++_6643){ (((*_6638)(_6642)) = ((*data)(_6639))); (_6642 = (_6642 + _6640)); ( ++ _6639 ); }}return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_6638); }bool mosek::fusion::DenseMatrix::isSparse  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse( ){ return false; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix::getDataAsArray  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray( ){ return ::mosek::fusion::Utils::Tools::arraycopy(data); }void mosek::fusion::DenseMatrix::getDataAsTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _6644,    std::shared_ptr< monty::ndarray< int,1 > > _6645,    std::shared_ptr< monty::ndarray< double,1 > > _6646) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_6644,_6645,_6646); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets( std::shared_ptr< monty::ndarray< int,1 > > _6644,std::shared_ptr< monty::ndarray< int,1 > > _6645,std::shared_ptr< monty::ndarray< double,1 > > _6646){ if ((((int)((_6644)->size(0)) < nnz) || (((int)((_6645)->size(0)) < nnz) || ((int)((_6646)->size(0)) < nnz)))){ throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));}else {}::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_6646,(int)0,(int)((data)->size(0))); int _6647 = (int)0; int _9590 = (int)0; int _9591 = dimi; for (int _6648 = _9590;_6648<_9591;++_6648){ int _9592 = (int)0; int _9593 = dimj; for (int _6649 = _9592;_6649<_9593;++_6649){ (((*_6644)(_6647)) = _6648); (((*_6645)(_6647)) = _6649); ( ++ _6647 ); }}}double mosek::fusion::DenseMatrix::get  ( int _6650,    int _6651) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_6650,_6651); }double mosek::fusion::p_DenseMatrix::get( int _6650,int _6651){ return ((*data)(((_6650 * dimi) + _6651))); }long long mosek::fusion::DenseMatrix::numNonzeros  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros( ){ return (long long)(dimi * dimj); }void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _6652,    int _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< int,1 > > _6655,    std::shared_ptr< monty::ndarray< double,1 > > _6656,    long long _6657){ return new mosek::fusion::SparseMatrix(_6652,_6653,_6654,_6655,_6656,_6657); }mosek::fusion::SparseMatrix::SparseMatrix  (int _6652,    int _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< int,1 > > _6655,    std::shared_ptr< monty::ndarray< double,1 > > _6656,    long long _6657) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_6652,_6653,_6654,_6655,_6656,_6657); }void mosek::fusion::p_SparseMatrix::_initialize  (int _6652,    int _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< int,1 > > _6655,    std::shared_ptr< monty::ndarray< double,1 > > _6656,    long long _6657){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6652,_6653);if ((_6657 > (int)0)){ if ((((int)((_6654)->size(0)) < _6657) || (((int)((_6655)->size(0)) < _6657) || ((int)((_6656)->size(0)) < _6657)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));}else {}long long _9594 = (long long)0; long long _9595 = _6657; for (long long _6658 = _9594;_6658<_9595;++_6658){ if (((((*_6654)(_6658)) < (int)0) || ((((*_6654)(_6658)) >= dimi) || ((((*_6655)(_6658)) < (int)0) || (((*_6655)(_6658)) >= dimj))))){ throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));}else {}}std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6659 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6660 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6661 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1))); ::mosek::fusion::p_CommonTools::tripletSort(_6654,_6655,_6656,_6659,_6660,_6661,_6657,dimi,dimj); (subi = ((*_6659)((int)0))); (subj = ((*_6660)((int)0))); (val = ((*_6661)((int)0))); (nnz = (long long)((val)->size(0))); }else { (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)))); (nnz = (long long)0); }}}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _6662,    int _6663,    std::shared_ptr< monty::ndarray< int,1 > > _6664,    std::shared_ptr< monty::ndarray< int,1 > > _6665,    std::shared_ptr< monty::ndarray< double,1 > > _6666){ return new mosek::fusion::SparseMatrix(_6662,_6663,_6664,_6665,_6666); }mosek::fusion::SparseMatrix::SparseMatrix  (int _6662,    int _6663,    std::shared_ptr< monty::ndarray< int,1 > > _6664,    std::shared_ptr< monty::ndarray< int,1 > > _6665,    std::shared_ptr< monty::ndarray< double,1 > > _6666) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_6662,_6663,_6664,_6665,_6666); }void mosek::fusion::p_SparseMatrix::_initialize  (int _6662,    int _6663,    std::shared_ptr< monty::ndarray< int,1 > > _6664,    std::shared_ptr< monty::ndarray< int,1 > > _6665,    std::shared_ptr< monty::ndarray< double,1 > > _6666){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6662,_6663);int _6667 = (int)0; int _9596 = (int)0; int _9597 = (int)((_6666)->size(0)); for (int _6668 = _9596;_6668<_9597;++_6668){ if (((((*_6666)(_6668)) > (int)0) || (((*_6666)(_6668)) < (int)0))){ ( ++ _6667 ); }else {}}if (((_6667 > (int)0) && (_6667 < (int)((_6664)->size(0))))){ (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6667)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6667)))); (val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6667)))); (nnz = _6667); int _6669 = (int)0; int _9598 = (int)0; int _9599 = (int)((_6666)->size(0)); for (int _6670 = _9598;_6670<_9599;++_6670){ if (((((*_6666)(_6670)) < (int)0) || (((*_6666)(_6670)) > (int)0))){ (((*val)(_6669)) = ((*_6666)(_6670))); (((*subj)(_6669)) = ((*_6665)(_6670))); (((*subi)(_6669)) = ((*_6664)(_6670))); ( ++ _6669 ); }else {}}}else { (subi = _6664); (subj = _6665); (val = _6666); if (! _6664){ (nnz = (long long)0); }else { (nnz = (long long)((subi)->size(0))); }}}}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb( ){ std::shared_ptr< monty::ndarray< long long,1 > > _6671 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((dimi + (int)1)))); long long _6672 = (long long)0; int _9600 = (int)0; int _9601 = dimi; for (int _6673 = _9600;_6673<_9601;++_6673){ (((*_6671)(_6673)) = _6672); { for (;((_6672 < nnz) && (((*subi)(_6672)) == _6673));( ++ _6672 )){ }}}(((*_6671)(dimi)) = _6672); return _6671; }std::string mosek::fusion::SparseMatrix::toString  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6674 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6674.get())->a(std::string ("SparseMatrix(")).get())->a(dimi).get())->a(std::string (",")).get())->a(dimj).get())->a(std::string (", [")); if ((subi && ((int)((subi)->size(0)) > (int)0))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6674.get())->a(std::string ("(")).get())->a(((*subi)((int)0))).get())->a(std::string (",")).get())->a(((*subj)((int)0))).get())->a(std::string (",")).get())->a(((*val)((int)0))).get())->a(std::string (")")); int _9602 = (int)1; int _9603 = (int)((subi)->size(0)); for (int _6675 = _9602;_6675<_9603;++_6675){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6674.get())->a(std::string (",(")).get())->a(((*subi)(_6675))).get())->a(std::string (",")).get())->a(((*subj)(_6675))).get())->a(std::string (",")).get())->a(((*val)(_6675))).get())->a(std::string (")")); }}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6674.get())->a(std::string (" ])")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6674.get())->toString(); }long long mosek::fusion::SparseMatrix::numNonzeros  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros( ){ return nnz; }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::transpose( ){ return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val); }bool mosek::fusion::SparseMatrix::isSparse  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse( ){ return true; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix::getDataAsArray  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray( ){ std::shared_ptr< monty::ndarray< double,1 > > _6676 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((dimi * dimj)))); int _9604 = (int)0; int _9605 = (int)((subi)->size(0)); for (int _6677 = _9604;_6677<_9605;++_6677){ (((*_6676)(((((*subi)(_6677)) * dimj) + ((*subj)(_6677))))) = ((*val)(_6677))); }return _6676; }void mosek::fusion::SparseMatrix::getDataAsTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _6678,    std::shared_ptr< monty::ndarray< int,1 > > _6679,    std::shared_ptr< monty::ndarray< double,1 > > _6680) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_6678,_6679,_6680); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets( std::shared_ptr< monty::ndarray< int,1 > > _6678,std::shared_ptr< monty::ndarray< int,1 > > _6679,std::shared_ptr< monty::ndarray< double,1 > > _6680){ if ((((long long)((_6678)->size(0)) < nnz) || (((long long)((_6679)->size(0)) < nnz) || ((long long)((_6680)->size(0)) < nnz)))){ throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));}else {}if ((subi && ((int)((subi)->size(0)) > (int)0))){ ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_6678,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_6679,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_6680,(long long)0,nnz); }else {}}double mosek::fusion::SparseMatrix::get  ( int _6681,    int _6682) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_6681,_6682); }double mosek::fusion::p_SparseMatrix::get( int _6681,int _6682){ if (((_6681 < (int)0) || ((_6681 >= dimi) || ((_6682 < (int)0) || (_6682 >= dimj))))){ throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));}else {}int _6683 = (int)0; int _6684 = (int)((subi)->size(0)); while (((_6684 - _6683) > (int)1)) { int _6685 = ((_6683 + _6684) / (int)2); if (((((*subi)(_6685)) < _6681) || ((((*subi)(_6685)) == _6681) && (((*subj)(_6685)) < _6682)))){ (_6683 = _6685); }else if (((((*subi)(_6685)) > _6681) || ((((*subi)(_6685)) == _6681) && (((*subj)(_6685)) > _6682)))){ (_6684 = _6685); }else { return ((*val)(_6685)); }}if (((((*subi)(_6683)) == _6681) && (((*subj)(_6683)) == _6682))){ return ((*val)(_6683)); }else { return 0.0; }}void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _6686,    int _6687){monty::rc_reserve __reserve_this(_pubthis); { { if (((_6686 < (int)0) || (_6687 < (int)0))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));}else {}(dimi = _6686); (dimj = _6687); }}}std::string mosek::fusion::Matrix::toString  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString( ){ return std::string (""); }void mosek::fusion::p_Matrix::switchDims( ){ int _6688 = dimi; (dimi = dimj); (dimj = _6688); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6689,    monty::rc_ptr< ::mosek::fusion::Matrix > _6690) { return mosek::fusion::p_Matrix::diag(_6689,_6690); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6689,monty::rc_ptr< ::mosek::fusion::Matrix > _6690){ return ::mosek::fusion::p_Matrix::diag(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Matrix > > _9606; for (int _6691=(int)0, _9607=_6689; _6691 < _9607;++_6691)_9606.push_back(_6690); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9606.size()),_9606.begin(),_9606.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6692) { return mosek::fusion::p_Matrix::diag(_6692); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6692){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6693 = _6692; long long _6694 = (long long)0; int _6695 = (int)0; int _6696 = (int)0; int _9608 = (int)0; int _9609 = (int)((_6692)->size(0)); for (int _6697 = _9608;_6697<_9609;++_6697){ (_6695 = (_6695 + mosek::fusion::p_Matrix::_get_impl(((*_6692)(_6697)))->dimi)); (_6696 = (_6696 + mosek::fusion::p_Matrix::_get_impl(((*_6692)(_6697)))->dimj)); (_6694 = (_6694 + ((*_6692)(_6697))->numNonzeros())); }std::shared_ptr< monty::ndarray< int,1 > > _6698 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6694))); std::shared_ptr< monty::ndarray< int,1 > > _6699 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6694))); std::shared_ptr< monty::ndarray< double,1 > > _6700 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6694))); { int _6701 = (int)0; int _6702 = (int)0; long long _6703 = (long long)0; int _9610 = (int)0; int _9611 = (int)((_6692)->size(0)); for (int _6704 = _9610;_6704<_9611;++_6704){ long long _6705 = ((*_6692)(_6704))->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _6706 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6705))); std::shared_ptr< monty::ndarray< int,1 > > _6707 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6705))); std::shared_ptr< monty::ndarray< double,1 > > _6708 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6705))); ((*_6692)(_6704))->getDataAsTriplets(_6706,_6707,_6708); ::mosek::fusion::Utils::Tools::arraycopy(_6708,(long long)0,_6700,_6703,_6705); long long _9612 = (long long)0; long long _9613 = _6705; for (long long _6709 = _9612;_6709<_9613;++_6709){ (((*_6698)((_6703 + _6709))) = (((*_6706)(_6709)) + _6701)); (((*_6699)((_6703 + _6709))) = (((*_6706)(_6709)) + _6702)); }(_6703 = (_6703 + _6705)); (_6701 = (_6701 + mosek::fusion::p_Matrix::_get_impl(((*_6692)(_6704)))->dimi)); (_6702 = (_6702 + mosek::fusion::p_Matrix::_get_impl(((*_6692)(_6704)))->dimj)); }}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6695,_6696,_6698,_6699,_6700); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _6710,    double _6711,    int _6712) { return mosek::fusion::p_Matrix::antidiag(_6710,_6711,_6712); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( int _6710,double _6711,int _6712){ if (((_6712 < _6710) && (_6712 >= (int)0))){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6711,(_6710 - _6712)),_6712); }else if (((_6712 > (- _6710)) && (_6712 < (int)0))){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6711,(_6710 + _6712)),_6712); }else { throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));}}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _6713,    double _6714) { return mosek::fusion::p_Matrix::antidiag(_6713,_6714); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( int _6713,double _6714){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6714,_6713),(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6715,    double _6716,    int _6717) { return mosek::fusion::p_Matrix::diag(_6715,_6716,_6717); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6715,double _6716,int _6717){ if (((_6717 < _6715) && (_6717 >= (int)0))){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6716,(_6715 - _6717)),_6717); }else if (((_6717 > (- _6715)) && (_6717 < (int)0))){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6716,(_6715 + _6717)),_6717); }else { throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));}}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6718,    double _6719) { return mosek::fusion::p_Matrix::diag(_6718,_6719); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6718,double _6719){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6719,_6718),(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6720,    int _6721) { return mosek::fusion::p_Matrix::antidiag(_6720,_6721); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( std::shared_ptr< monty::ndarray< double,1 > > _6720,int _6721){ int _6722 = ([&]() -> int { if ( (_6721 > (int)0)) return (_6721); else return ((- _6721)); })(); int _6723 = ((int)((_6720)->size(0)) + _6722); int _6724 = (int)((_6720)->size(0)); if ((_6721 >= (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _6725 = ::mosek::fusion::Utils::Tools::range(_6721,(_6724 + _6721)); std::shared_ptr< monty::ndarray< int,1 > > _6726 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9614; for (int _6727=(int)1, _9615=(_6724 + (int)1); _6727 < _9615;++_6727)_9614.push_back(((_6724 + _6721) - _6727)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9614.size()),_9614.begin(),_9614.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6723,_6723,_6725,_6726,_6720); }else { std::shared_ptr< monty::ndarray< int,1 > > _6728 = ::mosek::fusion::Utils::Tools::range((int)0,_6724); std::shared_ptr< monty::ndarray< int,1 > > _6729 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9616; for (int _6730=(int)1, _9617=(_6724 + (int)1); _6730 < _9617;++_6730)_9616.push_back((_6724 - _6730)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9616.size()),_9616.begin(),_9616.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6723,_6723,_6728,_6729,_6720); }}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6731) { return mosek::fusion::p_Matrix::antidiag(_6731); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( std::shared_ptr< monty::ndarray< double,1 > > _6731){ return ::mosek::fusion::p_Matrix::antidiag(_6731,(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6732,    int _6733) { return mosek::fusion::p_Matrix::diag(_6732,_6733); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6732,int _6733){ int _6734 = ([&]() -> int { if ( (_6733 > (int)0)) return (_6733); else return ((- _6733)); })(); int _6735 = ((int)((_6732)->size(0)) + _6734); int _6736 = (int)((_6732)->size(0)); if ((_6733 >= (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _6737 = ::mosek::fusion::Utils::Tools::range((int)0,_6736); std::shared_ptr< monty::ndarray< int,1 > > _6738 = ::mosek::fusion::Utils::Tools::range(_6734,(_6736 + _6734)); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6735,_6735,_6737,_6738,_6732); }else { std::shared_ptr< monty::ndarray< int,1 > > _6739 = ::mosek::fusion::Utils::Tools::range(_6734,(_6736 + _6734)); std::shared_ptr< monty::ndarray< int,1 > > _6740 = ::mosek::fusion::Utils::Tools::range((int)0,_6736); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6735,_6735,_6739,_6740,_6732); }}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6741) { return mosek::fusion::p_Matrix::diag(_6741); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6741){ return ::mosek::fusion::p_Matrix::diag(_6741,(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _6742,    int _6743) { return mosek::fusion::p_Matrix::ones(_6742,_6743); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones( int _6742,int _6743){ return ::mosek::fusion::p_Matrix::dense(_6742,_6743,1.0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _6744) { return mosek::fusion::p_Matrix::eye(_6744); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye( int _6744){ return ::mosek::fusion::p_Matrix::diag(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9618; for (int _6745=(int)0, _9619=_6744; _6745 < _9619;++_6745)_9618.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9618.size()),_9618.begin(),_9618.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6746) { return mosek::fusion::p_Matrix::dense(_6746); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( monty::rc_ptr< ::mosek::fusion::Matrix > _6746){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6746); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _6747,    int _6748,    double _6749) { return mosek::fusion::p_Matrix::dense(_6747,_6748,_6749); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( int _6747,int _6748,double _6749){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6747,_6748,_6749); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _6750,    int _6751,    std::shared_ptr< monty::ndarray< double,1 > > _6752) { return mosek::fusion::p_Matrix::dense(_6750,_6751,_6752); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( int _6750,int _6751,std::shared_ptr< monty::ndarray< double,1 > > _6752){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6750,_6751,_6752); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _6753) { return mosek::fusion::p_Matrix::dense(_6753); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( std::shared_ptr< monty::ndarray< double,2 > > _6753){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6753); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6754) { return mosek::fusion::p_Matrix::sparse(_6754); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( monty::rc_ptr< ::mosek::fusion::Matrix > _6754){ std::shared_ptr< monty::ndarray< int,1 > > _6755 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6754->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _6756 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6754->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _6757 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6754->numNonzeros()))); _6754->getDataAsTriplets(_6755,_6756,_6757); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6754->numRows(),_6754->numColumns(),_6755,_6756,_6757); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _6758) { return mosek::fusion::p_Matrix::sparse(_6758); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _6758){ int _6759 = (int)((_6758)->size(0)); int _6760 = (int)((((*_6758)((int)0)))->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6761 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6759))); std::shared_ptr< monty::ndarray< int,1 > > _6762 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6760))); long long _6763 = (long long)0; int _6764 = (int)0; { int _6765 = (int)0; for (;(_6765 < _6759);( ++ _6765 )){ { int _6766 = (int)0; for (;(_6766 < _6760);( ++ _6766 )){ monty::rc_ptr< ::mosek::fusion::Matrix > _6767 = ((*((*_6758)(_6765)))(_6766)); if (_6767){ if ((((*_6762)(_6766)) == (int)0)){ (((*_6762)(_6766)) = mosek::fusion::p_Matrix::_get_impl(_6767)->dimj); }else if ((((*_6762)(_6766)) != mosek::fusion::p_Matrix::_get_impl(_6767)->dimj)){ throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));}else {}if ((((*_6761)(_6765)) == (int)0)){ (((*_6761)(_6765)) = mosek::fusion::p_Matrix::_get_impl(_6767)->dimi); }else if ((((*_6761)(_6765)) != mosek::fusion::p_Matrix::_get_impl(_6767)->dimi)){ throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));}else {}(_6763 = (_6763 + _6767->numNonzeros())); }else {}( ++ _6764 ); }}}}std::shared_ptr< monty::ndarray< double,1 > > _6768 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6763))); std::shared_ptr< monty::ndarray< int,1 > > _6769 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6763))); std::shared_ptr< monty::ndarray< int,1 > > _6770 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6763))); int _6771 = (int)0; int _6772 = (int)0; { int _6773 = (int)0; for (;(_6773 < _6759);( ++ _6773 )){ std::shared_ptr< monty::ndarray< int,1 > > _6774 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6760))); { int _6775 = (int)0; for (;(_6775 < ((*_6761)(_6773)));( ++ _6775 )){ int _6776 = (int)0; { int _6777 = (int)0; for (;(_6777 < _6760);( ++ _6777 )){ monty::rc_ptr< ::mosek::fusion::Matrix > _6778 = ((*((*_6758)(_6773)))(_6777)); if (_6778){ monty::rc_ptr< ::mosek::fusion::Matrix > _9620 = _6778; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9620.get())) {::mosek::fusion::DenseMatrix::t _6779(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9620.get()));{ int _6782 = ((*_6774)(_6777)); { int _6783 = (int)0; for (;(_6783 < mosek::fusion::p_Matrix::_get_impl(_6779)->dimj);( ++ _6783 )){ (((*_6768)(_6771)) = ((*mosek::fusion::p_DenseMatrix::_get_impl(_6779)->data)(_6782))); (((*_6769)(_6771)) = (_6772 + _6775)); (((*_6770)(_6771)) = (_6776 + _6783)); ( ++ _6782 ); ( ++ _6771 ); }}(((*_6774)(_6777)) = _6782); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9620.get())) {::mosek::fusion::SparseMatrix::t _6780(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9620.get()));{ int _6784; { (_6784 = ((*_6774)(_6777))); for (;((_6784 < mosek::fusion::p_SparseMatrix::_get_impl(_6780)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_6780)->subi)(_6784)) == _6775));( ++ _6784 )){ (((*_6768)(_6771)) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6780)->val)(_6784))); (((*_6770)(_6771)) = (((*mosek::fusion::p_SparseMatrix::_get_impl(_6780)->subj)(_6784)) + _6776)); (((*_6769)(_6771)) = (_6772 + _6775)); ( ++ _6771 ); }}(((*_6774)(_6777)) = _6784); }}else {mosek::fusion::Matrix::t _6781 = _9620;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));}}}else {}(_6776 = (_6776 + ((*_6762)(_6777)))); }}}}(_6772 = (_6772 + ((*_6761)(_6773)))); }}int _6785 = (int)0; int _6786 = (int)0; { int _6787 = (int)0; for (;(_6787 < _6759);( ++ _6787 )){ (_6785 = (_6785 + ((*_6761)(_6787)))); }}{ int _6788 = (int)0; for (;(_6788 < _6760);( ++ _6788 )){ (_6786 = (_6786 + ((*_6762)(_6788)))); }}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6785,_6786,_6769,_6770,_6768); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _6789) { return mosek::fusion::p_Matrix::sparse(_6789); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< double,2 > > _6789){ int _6790 = (int)((_6789)->size(0)); int _6791 = (int)((_6789)->size(1)); long long _6792 = (long long)(_6790 * _6791); std::shared_ptr< monty::ndarray< int,1 > > _6793 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9621; for (int _6794=(int)0, _9622=_6790; _6794 < _9622;++_6794) for (int _6795=(int)0, _9623=_6791; _6795 < _9623;++_6795)_9621.push_back(_6794); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9621.size()),_9621.begin(),_9621.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6796 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9624; for (int _6797=(int)0, _9625=_6790; _6797 < _9625;++_6797) for (int _6798=(int)0, _9626=_6791; _6798 < _9626;++_6798)_9624.push_back(_6798); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9624.size()),_9624.begin(),_9624.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6799 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9627; for (int _6800=(int)0, _9628=_6790; _6800 < _9628;++_6800) for (int _6801=(int)0, _9629=_6791; _6801 < _9629;++_6801)_9627.push_back(((*_6789)(_6800,_6801))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9627.size()),_9627.begin(),_9627.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6790,_6791,_6793,_6796,_6799); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6802,    int _6803) { return mosek::fusion::p_Matrix::sparse(_6802,_6803); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6802,int _6803){ return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6802,_6803,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6804,    int _6805,    std::shared_ptr< monty::ndarray< int,1 > > _6806,    std::shared_ptr< monty::ndarray< int,1 > > _6807,    double _6808) { return mosek::fusion::p_Matrix::sparse(_6804,_6805,_6806,_6807,_6808); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6804,int _6805,std::shared_ptr< monty::ndarray< int,1 > > _6806,std::shared_ptr< monty::ndarray< int,1 > > _6807,double _6808){ int _6809 = (int)0; if (_6806){ (_6809 = (int)((_6806)->size(0))); }else if (_6807){ (_6809 = (int)((_6807)->size(0))); }else {}return ::mosek::fusion::p_Matrix::sparse(_6804,_6805,_6806,_6807,::mosek::fusion::Utils::Tools::makevector(_6808,_6809)); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6810,    std::shared_ptr< monty::ndarray< int,1 > > _6811,    double _6812) { return mosek::fusion::p_Matrix::sparse(_6810,_6811,_6812); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< int,1 > > _6810,std::shared_ptr< monty::ndarray< int,1 > > _6811,double _6812){ int _6813 = (int)0; int _6814 = (int)0; int _6815 = (int)((_6810)->size(0)); if ((_6815 > (int)((_6811)->size(0)))){ (_6815 = (int)((_6811)->size(0))); }else {}int _9630 = (int)0; int _9631 = _6815; for (int _6816 = _9630;_6816<_9631;++_6816){ if ((_6813 < ((*_6810)(_6816)))){ (_6813 = ((*_6810)(_6816))); }else {}if ((_6814 < ((*_6811)(_6816)))){ (_6814 = ((*_6811)(_6816))); }else {}}return ::mosek::fusion::p_Matrix::sparse((_6813 + (int)1),(_6814 + (int)1),_6810,_6811,_6812); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6817,    std::shared_ptr< monty::ndarray< int,1 > > _6818,    std::shared_ptr< monty::ndarray< double,1 > > _6819) { return mosek::fusion::p_Matrix::sparse(_6817,_6818,_6819); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< int,1 > > _6817,std::shared_ptr< monty::ndarray< int,1 > > _6818,std::shared_ptr< monty::ndarray< double,1 > > _6819){ int _6820 = (int)0; int _6821 = (int)0; int _6822 = (int)((_6817)->size(0)); if ((_6822 > (int)((_6818)->size(0)))){ (_6822 = (int)((_6818)->size(0))); }else {}if ((_6822 > (int)((_6819)->size(0)))){ (_6822 = (int)((_6819)->size(0))); }else {}int _9632 = (int)0; int _9633 = _6822; for (int _6823 = _9632;_6823<_9633;++_6823){ if ((_6820 < ((*_6817)(_6823)))){ (_6820 = ((*_6817)(_6823))); }else {}if ((_6821 < ((*_6818)(_6823)))){ (_6821 = ((*_6818)(_6823))); }else {}}return ::mosek::fusion::p_Matrix::sparse((_6820 + (int)1),(_6821 + (int)1),_6817,_6818,_6819); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6824,    int _6825,    std::shared_ptr< monty::ndarray< int,1 > > _6826,    std::shared_ptr< monty::ndarray< int,1 > > _6827,    std::shared_ptr< monty::ndarray< double,1 > > _6828) { return mosek::fusion::p_Matrix::sparse(_6824,_6825,_6826,_6827,_6828); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6824,int _6825,std::shared_ptr< monty::ndarray< int,1 > > _6826,std::shared_ptr< monty::ndarray< int,1 > > _6827,std::shared_ptr< monty::ndarray< double,1 > > _6828){ std::shared_ptr< monty::ndarray< int,1 > > _6829 = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( _6826) return (_6826); else return (std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); })(); std::shared_ptr< monty::ndarray< int,1 > > _6830 = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( _6827) return (_6827); else return (std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); })(); std::shared_ptr< monty::ndarray< double,1 > > _6831 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _6828) return (_6828); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)))); })(); long long _6832 = (long long)((_6829)->size(0)); if ((((long long)((_6830)->size(0)) != _6832) || ((long long)((_6831)->size(0)) != _6832))){ throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));}else {}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6824,_6825,_6829,_6830,_6831,_6832); }int mosek::fusion::Matrix::numColumns  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns( ){ return dimj; }int mosek::fusion::Matrix::numRows  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows( ){ return dimi; }void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _6838) : RuntimeException(_6838){ }mosek::fusion::FatalError::FatalError  ( const std::string &  _6839) : RuntimeException(_6839){ }mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _6840) : RuntimeException(_6840.toString()){ }mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _6841) : RuntimeException(_6841){ }mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _6842) : mosek::fusion::FusionRuntimeException(_6842){ }mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined")){ }mosek::fusion::SolutionError::SolutionError  ( const std::string &  _6843) : mosek::fusion::FusionException(_6843){ }mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range")){ }mosek::fusion::SliceError::SliceError  ( const std::string &  _6844) : mosek::fusion::FusionRuntimeException(_6844){ }mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _6845) : mosek::fusion::FusionRuntimeException(_6845){ }mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _6846) : mosek::fusion::FusionRuntimeException(_6846){ }mosek::fusion::NameError::NameError  ( const std::string &  _6847) : mosek::fusion::FusionRuntimeException(_6847){ }mosek::fusion::ModelError::ModelError  ( const std::string &  _6848) : mosek::fusion::FusionRuntimeException(_6848){ }mosek::fusion::MatrixError::MatrixError  ( const std::string &  _6849) : mosek::fusion::FusionRuntimeException(_6849){ }mosek::fusion::DimensionError::DimensionError  ( const std::string &  _6850) : mosek::fusion::FusionRuntimeException(_6850){ }mosek::fusion::LengthError::LengthError  ( const std::string &  _6851) : mosek::fusion::FusionRuntimeException(_6851){ }mosek::fusion::RangeError::RangeError  ( const std::string &  _6852) : mosek::fusion::FusionRuntimeException(_6852){ }mosek::fusion::IndexError::IndexError  ( const std::string &  _6853) : mosek::fusion::FusionRuntimeException(_6853){ }mosek::fusion::DomainError::DomainError  ( const std::string &  _6854) : mosek::fusion::FusionRuntimeException(_6854){ }mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _6855) : mosek::fusion::FusionRuntimeException(_6855){ }mosek::fusion::ParameterError::ParameterError  ( const std::string &  _6856) : mosek::fusion::FusionRuntimeException(_6856){ }mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _6857) : mosek::fusion::FusionRuntimeException(_6857){ }mosek::fusion::IOError::IOError  ( const std::string &  _6858) : mosek::fusion::FusionRuntimeException(_6858){ }mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _6859) : RuntimeException(_6859){ (msg = _6859); }std::string mosek::fusion::FusionRuntimeException::toString(){ return msg; }mosek::fusion::FusionException::FusionException  ( const std::string &  _6860) : Exception(_6860){ (msg = _6860); }std::string mosek::fusion::FusionException::toString(){ return msg; }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6861,    const std::string & _6862,    double _6863) { mosek::fusion::p_Parameters::setParameter(_6861,_6862,_6863); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6861,const std::string & _6862,double _6863){ if (false){ }else if ((_6862 == std::string ("autoUpdateSolInfo"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else if ((_6862 == std::string ("removeUnusedSolutions"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));}else {}if ((_6862 == std::string ("numThreads"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6864 = _6863; if (((int)0 <= _6864)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6864); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6862 == std::string ("intpntMultiThread"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}if ((_6862 == std::string ("mtSpincount"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6865 = _6863; if ((((int)0 <= _6865) && (_6865 <= (int)1000000000))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6865); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6862 == std::string ("optimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}if ((_6862 == std::string ("biMaxIterations"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6866 = _6863; if (((int)0 <= _6866)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6866); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else {}if ((_6862 == std::string ("licenseTrhExpiryWrn"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6867 = _6863; if (((int)0 <= _6867)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6867); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else {}if ((_6862 == std::string ("logCutSecondOpt"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6868 = _6863; if (((int)0 <= _6868)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6868); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else {}if ((_6862 == std::string ("logAnaPro"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6869 = _6863; if (((int)0 <= _6869)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6869); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else {}if ((_6862 == std::string ("logResponse"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6870 = _6863; if (((int)0 <= _6870)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6870); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else {}if ((_6862 == std::string ("logBi"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6871 = _6863; if (((int)0 <= _6871)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6871); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else {}if ((_6862 == std::string ("logBiFreq"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6872 = _6863; if (((int)0 <= _6872)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6872); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6862 == std::string ("biCleanOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else if ((_6862 == std::string ("intpntStartingPoint"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else if ((_6862 == std::string ("intpntDiffStep"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else if ((_6862 == std::string ("intpntScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else if ((_6862 == std::string ("intpntSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}if ((_6862 == std::string ("logIntpnt"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6873 = _6863; if (((int)0 <= _6873)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6873); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else {}if ((_6862 == std::string ("intpntMaxIterations"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6874 = _6863; if (((int)0 <= _6874)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6874); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else {}if ((_6862 == std::string ("intpntOffColTrh"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6875 = _6863; if (((int)0 <= _6875)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6875); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6862 == std::string ("intpntOrderMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else if ((_6862 == std::string ("intpntBasis"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else if ((_6862 == std::string ("biIgnoreMaxIter"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else if ((_6862 == std::string ("biIgnoreNumError"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}if ((_6862 == std::string ("intpntMaxNumCor"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6876 = _6863; if (((- (int)1) <= _6876)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6876); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6862 == std::string ("presolveUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}if ((_6862 == std::string ("presolveLevel"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6877 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6877); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else {}if ((_6862 == std::string ("logPresolve"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6878 = _6863; if (((int)0 <= _6878)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6878); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6862 == std::string ("presolveLindepUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}if ((_6862 == std::string ("presolveEliminatorMaxNumTries"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6879 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6879); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else {}if ((_6862 == std::string ("presolveEliminatorMaxFill"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6880 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6880); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else {}if ((_6862 == std::string ("simPrimalCrash"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6881 = _6863; if (((int)0 <= _6881)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6881); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else {}if ((_6862 == std::string ("logSim"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6882 = _6863; if (((int)0 <= _6882)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6882); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else {}if ((_6862 == std::string ("logSimMinor"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6883 = _6863; if (((int)0 <= _6883)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6883); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else {}if ((_6862 == std::string ("logSimFreq"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6884 = _6863; if (((int)0 <= _6884)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6884); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else {}if ((_6862 == std::string ("simPrimalRestrictSelection"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6885 = _6863; if ((((int)0 <= _6885) && (_6885 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6885); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6862 == std::string ("simPrimalSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}if ((_6862 == std::string ("simDualRestrictSelection"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6886 = _6863; if ((((int)0 <= _6886) && (_6886 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6886); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6862 == std::string ("simDualSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}if ((_6862 == std::string ("simMaxIterations"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6887 = _6863; if (((int)0 <= _6887)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6887); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6862 == std::string ("simHotstartLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}if ((_6862 == std::string ("simRefactorFreq"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6888 = _6863; if (((int)0 <= _6888)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6888); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6862 == std::string ("mioMode"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}if ((_6862 == std::string ("logMio"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6889 = _6863; if (((int)0 <= _6889)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6889); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else {}if ((_6862 == std::string ("logMioFreq"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6890 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6890); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else {}if ((_6862 == std::string ("mioMaxNumRelaxs"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6891 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6891); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else {}if ((_6862 == std::string ("mioMaxNumBranches"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6892 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6892); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else {}if ((_6862 == std::string ("mioMaxNumSolutions"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6893 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6893); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6862 == std::string ("mioNodeSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}if ((_6862 == std::string ("mioHeuristicLevel"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6894 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6894); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else {}if ((_6862 == std::string ("mioProbingLevel"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6895 = _6863; if ((((- (int)1) <= _6895) && (_6895 <= (int)3))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6895); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else {}if ((_6862 == std::string ("mioCutSelectionLevel"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6896 = _6863; if ((((- (int)1) <= _6896) && (_6896 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6896); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else {}if ((_6862 == std::string ("mioVbDetectionLevel"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6897 = _6863; if ((((- (int)1) <= _6897) && (_6897 <= (int)2))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6897); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6862 == std::string ("mioBranchDir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else if ((_6862 == std::string ("mioRootOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else if ((_6862 == std::string ("mioNodeOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else if ((_6862 == std::string ("mioPerspectiveReformulate"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else if ((_6862 == std::string ("writeLpQuotedNames"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}if ((_6862 == std::string ("writeLpLineWidth"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6898 = _6863; if (((int)40 <= _6898)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6898); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else {}if ((_6862 == std::string ("writeLpTermsPerLine"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6899 = _6863; if (((int)0 <= _6899)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6899); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6862 == std::string ("writeLpFullObj"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}if ((_6862 == std::string ("logInfeasAna"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6900 = _6863; if (((int)0 <= _6900)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6900); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6862 == std::string ("licenseWait"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else if ((_6862 == std::string ("licenseSuppressExpireWrns"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}if ((_6862 == std::string ("licensePauseTime"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6901 = _6863; if ((((int)0 <= _6901) && (_6901 <= (int)1000000))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6901); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6862 == std::string ("licenseDebug"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}if ((_6862 == std::string ("log"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6902 = _6863; if (((int)0 <= _6902)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6902); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else {}if ((_6862 == std::string ("logExpand"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6903 = _6863; if (((int)0 <= _6903)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6903); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else {}if ((_6862 == std::string ("logFile"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6904 = _6863; if (((int)0 <= _6904)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6904); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else {}if ((_6862 == std::string ("logOrder"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6905 = _6863; if (((int)0 <= _6905)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6905); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6862 == std::string ("simScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else if ((_6862 == std::string ("simScalingMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}if ((_6862 == std::string ("simPrimalPhaseoneMethod"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6906 = _6863; if ((((int)0 <= _6906) && (_6906 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6906); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else {}if ((_6862 == std::string ("simDualPhaseoneMethod"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6907 = _6863; if ((((int)0 <= _6907) && (_6907 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6907); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else {}if ((_6862 == std::string ("simMaxNumSetbacks"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6908 = _6863; if (((int)0 <= _6908)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6908); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6862 == std::string ("simHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else if ((_6862 == std::string ("simBasisFactorUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else if ((_6862 == std::string ("simDegen"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else if ((_6862 == std::string ("simReformulation"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else if ((_6862 == std::string ("simExploitDupvec"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else if ((_6862 == std::string ("simSaveLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else if ((_6862 == std::string ("simNonSingular"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}if ((_6862 == std::string ("simDualCrash"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6909 = _6863; if (((int)0 <= _6909)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6909); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6862 == std::string ("infeasPreferPrimal"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}if ((_6862 == std::string ("mioRootRepeatPresolveLevel"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6910 = _6863; if ((((- (int)1) <= _6910) && (_6910 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6910); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6862 == std::string ("mioCutCmir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else if ((_6862 == std::string ("mioCutClique"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else if ((_6862 == std::string ("mioCutImpliedBound"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else if ((_6862 == std::string ("mioCutKnapsackCover"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else if ((_6862 == std::string ("mioCutGmi"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else if ((_6862 == std::string ("mioConstructSol"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}if ((_6862 == std::string ("presolveLindepRelWorkTrh"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6911 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6911); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else {}if ((_6862 == std::string ("presolveLindepAbsWorkTrh"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6912 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6912); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6862 == std::string ("cacheLicense"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else if ((_6862 == std::string ("intpntRegularizationUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else if ((_6862 == std::string ("simSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else if ((_6862 == std::string ("simSwitchOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}if ((_6862 == std::string ("mioRinsMaxNodes"))){ if (((_6863 - (int)_6863) == 0.0)){ double _6913 = _6863; if (((- (int)1) <= _6913)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6913); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else {}if ((_6862 == std::string ("optimizerMaxTime"))){ double _6914 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6914); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else {}if ((_6862 == std::string ("lowerObjCut"))){ double _6915 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6915); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else {}if ((_6862 == std::string ("upperObjCut"))){ double _6916 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6916); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else {}if ((_6862 == std::string ("upperObjCutFiniteTrh"))){ double _6917 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6917); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else {}if ((_6862 == std::string ("lowerObjCutFiniteTrh"))){ double _6918 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6918); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else {}if ((_6862 == std::string ("intpntTolRelGap"))){ double _6919 = _6863; if ((1.000000e-14 <= _6919)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6919); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else {}if ((_6862 == std::string ("intpntTolStepSize"))){ double _6920 = _6863; if (((0.000000e+00 <= _6920) && (_6920 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6920); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else {}if ((_6862 == std::string ("simLuTolRelPiv"))){ double _6921 = _6863; if (((1.000000e-06 <= _6921) && (_6921 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6921); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else {}if ((_6862 == std::string ("intpntTolRelStep"))){ double _6922 = _6863; if (((1.000000e-04 <= _6922) && (_6922 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6922); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else {}if ((_6862 == std::string ("intpntTolPath"))){ double _6923 = _6863; if (((0.000000e+00 <= _6923) && (_6923 <= 9.999000e-01))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6923); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else {}if ((_6862 == std::string ("intpntTolPfeas"))){ double _6924 = _6863; if (((0.000000e+00 <= _6924) && (_6924 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6924); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else {}if ((_6862 == std::string ("intpntTolDfeas"))){ double _6925 = _6863; if (((0.000000e+00 <= _6925) && (_6925 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6925); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else {}if ((_6862 == std::string ("intpntTolMuRed"))){ double _6926 = _6863; if (((0.000000e+00 <= _6926) && (_6926 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6926); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else {}if ((_6862 == std::string ("intpntTolInfeas"))){ double _6927 = _6863; if (((0.000000e+00 <= _6927) && (_6927 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6927); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else {}if ((_6862 == std::string ("intpntCoTolRelGap"))){ double _6928 = _6863; if (((0.000000e+00 <= _6928) && (_6928 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6928); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else {}if ((_6862 == std::string ("intpntCoTolPfeas"))){ double _6929 = _6863; if (((0.000000e+00 <= _6929) && (_6929 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6929); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else {}if ((_6862 == std::string ("intpntCoTolDfeas"))){ double _6930 = _6863; if (((0.000000e+00 <= _6930) && (_6930 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6930); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else {}if ((_6862 == std::string ("intpntCoTolMuRed"))){ double _6931 = _6863; if (((0.000000e+00 <= _6931) && (_6931 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6931); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else {}if ((_6862 == std::string ("intpntCoTolNearRel"))){ double _6932 = _6863; if ((1.000000e+00 <= _6932)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6932); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else {}if ((_6862 == std::string ("intpntCoTolInfeas"))){ double _6933 = _6863; if (((0.000000e+00 <= _6933) && (_6933 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6933); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else {}if ((_6862 == std::string ("intpntQoTolRelGap"))){ double _6934 = _6863; if (((0.000000e+00 <= _6934) && (_6934 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_6934); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else {}if ((_6862 == std::string ("intpntQoTolPfeas"))){ double _6935 = _6863; if (((0.000000e+00 <= _6935) && (_6935 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_6935); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else {}if ((_6862 == std::string ("intpntQoTolDfeas"))){ double _6936 = _6863; if (((0.000000e+00 <= _6936) && (_6936 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_6936); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else {}if ((_6862 == std::string ("intpntQoTolMuRed"))){ double _6937 = _6863; if (((0.000000e+00 <= _6937) && (_6937 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_6937); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else {}if ((_6862 == std::string ("intpntQoTolNearRel"))){ double _6938 = _6863; if ((1.000000e+00 <= _6938)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_6938); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else {}if ((_6862 == std::string ("intpntQoTolInfeas"))){ double _6939 = _6863; if (((0.000000e+00 <= _6939) && (_6939 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_6939); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else {}if ((_6862 == std::string ("intpntTolPsafe"))){ double _6940 = _6863; if ((1.000000e-04 <= _6940)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6940); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else {}if ((_6862 == std::string ("intpntTolDsafe"))){ double _6941 = _6863; if ((1.000000e-04 <= _6941)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6941); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else {}if ((_6862 == std::string ("mioMaxTime"))){ double _6942 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6942); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else {}if ((_6862 == std::string ("mioDisableTermTime"))){ double _6943 = _6863; if (true){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_6943); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else {}if ((_6862 == std::string ("mioRelGapConst"))){ double _6944 = _6863; if ((1.000000e-15 <= _6944)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6944); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else {}if ((_6862 == std::string ("mioTolRelGap"))){ double _6945 = _6863; if ((0.000000e+00 <= _6945)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6945); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else {}if ((_6862 == std::string ("mioNearTolRelGap"))){ double _6946 = _6863; if ((0.000000e+00 <= _6946)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_6946); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else {}if ((_6862 == std::string ("mioTolAbsGap"))){ double _6947 = _6863; if ((0.000000e+00 <= _6947)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6947); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else {}if ((_6862 == std::string ("mioNearTolAbsGap"))){ double _6948 = _6863; if ((0.000000e+00 <= _6948)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_6948); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else {}if ((_6862 == std::string ("mioTolAbsRelaxInt"))){ double _6949 = _6863; if ((1.000000e-09 <= _6949)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6949); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else {}if ((_6862 == std::string ("basisTolX"))){ double _6950 = _6863; if ((1.000000e-09 <= _6950)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6950); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else {}if ((_6862 == std::string ("basisTolS"))){ double _6951 = _6863; if ((1.000000e-09 <= _6951)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6951); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else {}if ((_6862 == std::string ("basisRelTolS"))){ double _6952 = _6863; if ((0.000000e+00 <= _6952)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6952); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else {}if ((_6862 == std::string ("presolveTolX"))){ double _6953 = _6863; if ((0.000000e+00 <= _6953)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6953); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else {}if ((_6862 == std::string ("presolveTolS"))){ double _6954 = _6863; if ((0.000000e+00 <= _6954)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6954); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else {}if ((_6862 == std::string ("presolveTolAij"))){ double _6955 = _6863; if ((1.000000e-15 <= _6955)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6955); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else {}if ((_6862 == std::string ("presolveTolAbsLindep"))){ double _6956 = _6863; if ((0.000000e+00 <= _6956)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6956); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else {}if ((_6862 == std::string ("presolveTolRelLindep"))){ double _6957 = _6863; if ((0.000000e+00 <= _6957)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6957); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else {}if ((_6862 == std::string ("simplexAbsTolPiv"))){ double _6958 = _6863; if ((1.000000e-12 <= _6958)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6958); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else {}if ((_6862 == std::string ("mioTolFeas"))){ double _6959 = _6863; if (((1.000000e-09 <= _6959) && (_6959 <= 1.000000e-03))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6959); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else {}if ((_6862 == std::string ("anaSolInfeasTol"))){ double _6960 = _6863; if ((0.000000e+00 <= _6960)){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_6960); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else {}if ((_6862 == std::string ("mioTolRelDualBoundImprovement"))){ double _6961 = _6863; if (((0.000000e+00 <= _6961) && (_6961 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6861.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6961); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else {}throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6962,    const std::string & _6963,    int _6964) { mosek::fusion::p_Parameters::setParameter(_6962,_6963,_6964); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6962,const std::string & _6963,int _6964){ if (false){ }else if ((_6963 == std::string ("autoUpdateSolInfo"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else if ((_6963 == std::string ("removeUnusedSolutions"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));}else {}if ((_6963 == std::string ("numThreads"))){ int _6965 = _6964; if (((int)0 <= _6965)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6965); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6963 == std::string ("intpntMultiThread"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}if ((_6963 == std::string ("mtSpincount"))){ int _6966 = _6964; if ((((int)0 <= _6966) && (_6966 <= (int)1000000000))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6966); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6963 == std::string ("optimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}if ((_6963 == std::string ("biMaxIterations"))){ int _6967 = _6964; if (((int)0 <= _6967)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6967); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else {}if ((_6963 == std::string ("licenseTrhExpiryWrn"))){ int _6968 = _6964; if (((int)0 <= _6968)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6968); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else {}if ((_6963 == std::string ("logCutSecondOpt"))){ int _6969 = _6964; if (((int)0 <= _6969)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6969); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else {}if ((_6963 == std::string ("logAnaPro"))){ int _6970 = _6964; if (((int)0 <= _6970)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6970); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else {}if ((_6963 == std::string ("logResponse"))){ int _6971 = _6964; if (((int)0 <= _6971)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6971); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else {}if ((_6963 == std::string ("logBi"))){ int _6972 = _6964; if (((int)0 <= _6972)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6972); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else {}if ((_6963 == std::string ("logBiFreq"))){ int _6973 = _6964; if (((int)0 <= _6973)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6973); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6963 == std::string ("biCleanOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else if ((_6963 == std::string ("intpntStartingPoint"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else if ((_6963 == std::string ("intpntDiffStep"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else if ((_6963 == std::string ("intpntScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else if ((_6963 == std::string ("intpntSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}if ((_6963 == std::string ("logIntpnt"))){ int _6974 = _6964; if (((int)0 <= _6974)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6974); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else {}if ((_6963 == std::string ("intpntMaxIterations"))){ int _6975 = _6964; if (((int)0 <= _6975)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6975); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else {}if ((_6963 == std::string ("intpntOffColTrh"))){ int _6976 = _6964; if (((int)0 <= _6976)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6976); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6963 == std::string ("intpntOrderMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else if ((_6963 == std::string ("intpntBasis"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else if ((_6963 == std::string ("biIgnoreMaxIter"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else if ((_6963 == std::string ("biIgnoreNumError"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}if ((_6963 == std::string ("intpntMaxNumCor"))){ int _6977 = _6964; if (((- (int)1) <= _6977)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6977); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6963 == std::string ("presolveUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}if ((_6963 == std::string ("presolveLevel"))){ int _6978 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6978); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else {}if ((_6963 == std::string ("logPresolve"))){ int _6979 = _6964; if (((int)0 <= _6979)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6979); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6963 == std::string ("presolveLindepUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}if ((_6963 == std::string ("presolveEliminatorMaxNumTries"))){ int _6980 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6980); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else {}if ((_6963 == std::string ("presolveEliminatorMaxFill"))){ int _6981 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6981); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else {}if ((_6963 == std::string ("simPrimalCrash"))){ int _6982 = _6964; if (((int)0 <= _6982)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6982); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else {}if ((_6963 == std::string ("logSim"))){ int _6983 = _6964; if (((int)0 <= _6983)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6983); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else {}if ((_6963 == std::string ("logSimMinor"))){ int _6984 = _6964; if (((int)0 <= _6984)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6984); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else {}if ((_6963 == std::string ("logSimFreq"))){ int _6985 = _6964; if (((int)0 <= _6985)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6985); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else {}if ((_6963 == std::string ("simPrimalRestrictSelection"))){ int _6986 = _6964; if ((((int)0 <= _6986) && (_6986 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6986); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6963 == std::string ("simPrimalSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}if ((_6963 == std::string ("simDualRestrictSelection"))){ int _6987 = _6964; if ((((int)0 <= _6987) && (_6987 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6987); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6963 == std::string ("simDualSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}if ((_6963 == std::string ("simMaxIterations"))){ int _6988 = _6964; if (((int)0 <= _6988)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6988); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6963 == std::string ("simHotstartLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}if ((_6963 == std::string ("simRefactorFreq"))){ int _6989 = _6964; if (((int)0 <= _6989)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6989); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6963 == std::string ("mioMode"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}if ((_6963 == std::string ("logMio"))){ int _6990 = _6964; if (((int)0 <= _6990)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6990); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else {}if ((_6963 == std::string ("logMioFreq"))){ int _6991 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6991); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else {}if ((_6963 == std::string ("mioMaxNumRelaxs"))){ int _6992 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6992); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else {}if ((_6963 == std::string ("mioMaxNumBranches"))){ int _6993 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6993); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else {}if ((_6963 == std::string ("mioMaxNumSolutions"))){ int _6994 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6994); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6963 == std::string ("mioNodeSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}if ((_6963 == std::string ("mioHeuristicLevel"))){ int _6995 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6995); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else {}if ((_6963 == std::string ("mioProbingLevel"))){ int _6996 = _6964; if ((((- (int)1) <= _6996) && (_6996 <= (int)3))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6996); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else {}if ((_6963 == std::string ("mioCutSelectionLevel"))){ int _6997 = _6964; if ((((- (int)1) <= _6997) && (_6997 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6997); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else {}if ((_6963 == std::string ("mioVbDetectionLevel"))){ int _6998 = _6964; if ((((- (int)1) <= _6998) && (_6998 <= (int)2))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6998); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6963 == std::string ("mioBranchDir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else if ((_6963 == std::string ("mioRootOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else if ((_6963 == std::string ("mioNodeOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else if ((_6963 == std::string ("mioPerspectiveReformulate"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else if ((_6963 == std::string ("writeLpQuotedNames"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}if ((_6963 == std::string ("writeLpLineWidth"))){ int _6999 = _6964; if (((int)40 <= _6999)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6999); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else {}if ((_6963 == std::string ("writeLpTermsPerLine"))){ int _7000 = _6964; if (((int)0 <= _7000)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_7000); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6963 == std::string ("writeLpFullObj"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}if ((_6963 == std::string ("logInfeasAna"))){ int _7001 = _6964; if (((int)0 <= _7001)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_7001); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6963 == std::string ("licenseWait"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else if ((_6963 == std::string ("licenseSuppressExpireWrns"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}if ((_6963 == std::string ("licensePauseTime"))){ int _7002 = _6964; if ((((int)0 <= _7002) && (_7002 <= (int)1000000))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_7002); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6963 == std::string ("licenseDebug"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}if ((_6963 == std::string ("log"))){ int _7003 = _6964; if (((int)0 <= _7003)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_7003); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else {}if ((_6963 == std::string ("logExpand"))){ int _7004 = _6964; if (((int)0 <= _7004)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_7004); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else {}if ((_6963 == std::string ("logFile"))){ int _7005 = _6964; if (((int)0 <= _7005)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_7005); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else {}if ((_6963 == std::string ("logOrder"))){ int _7006 = _6964; if (((int)0 <= _7006)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_7006); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6963 == std::string ("simScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else if ((_6963 == std::string ("simScalingMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}if ((_6963 == std::string ("simPrimalPhaseoneMethod"))){ int _7007 = _6964; if ((((int)0 <= _7007) && (_7007 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_7007); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else {}if ((_6963 == std::string ("simDualPhaseoneMethod"))){ int _7008 = _6964; if ((((int)0 <= _7008) && (_7008 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_7008); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else {}if ((_6963 == std::string ("simMaxNumSetbacks"))){ int _7009 = _6964; if (((int)0 <= _7009)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_7009); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6963 == std::string ("simHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else if ((_6963 == std::string ("simBasisFactorUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else if ((_6963 == std::string ("simDegen"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else if ((_6963 == std::string ("simReformulation"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else if ((_6963 == std::string ("simExploitDupvec"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else if ((_6963 == std::string ("simSaveLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else if ((_6963 == std::string ("simNonSingular"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}if ((_6963 == std::string ("simDualCrash"))){ int _7010 = _6964; if (((int)0 <= _7010)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_7010); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6963 == std::string ("infeasPreferPrimal"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}if ((_6963 == std::string ("mioRootRepeatPresolveLevel"))){ int _7011 = _6964; if ((((- (int)1) <= _7011) && (_7011 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_7011); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6963 == std::string ("mioCutCmir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else if ((_6963 == std::string ("mioCutClique"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else if ((_6963 == std::string ("mioCutImpliedBound"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else if ((_6963 == std::string ("mioCutKnapsackCover"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else if ((_6963 == std::string ("mioCutGmi"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else if ((_6963 == std::string ("mioConstructSol"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}if ((_6963 == std::string ("presolveLindepRelWorkTrh"))){ int _7012 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_7012); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else {}if ((_6963 == std::string ("presolveLindepAbsWorkTrh"))){ int _7013 = _6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_7013); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6963 == std::string ("cacheLicense"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else if ((_6963 == std::string ("intpntRegularizationUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else if ((_6963 == std::string ("simSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else if ((_6963 == std::string ("simSwitchOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}if ((_6963 == std::string ("mioRinsMaxNodes"))){ int _7014 = _6964; if (((- (int)1) <= _7014)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_7014); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else {}if ((_6963 == std::string ("optimizerMaxTime"))){ double _7015 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_7015); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else {}if ((_6963 == std::string ("lowerObjCut"))){ double _7016 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_7016); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else {}if ((_6963 == std::string ("upperObjCut"))){ double _7017 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_7017); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else {}if ((_6963 == std::string ("upperObjCutFiniteTrh"))){ double _7018 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_7018); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else {}if ((_6963 == std::string ("lowerObjCutFiniteTrh"))){ double _7019 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_7019); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else {}if ((_6963 == std::string ("intpntTolRelGap"))){ double _7020 = (double)_6964; if ((1.000000e-14 <= _7020)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_7020); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else {}if ((_6963 == std::string ("intpntTolStepSize"))){ double _7021 = (double)_6964; if (((0.000000e+00 <= _7021) && (_7021 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_7021); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else {}if ((_6963 == std::string ("simLuTolRelPiv"))){ double _7022 = (double)_6964; if (((1.000000e-06 <= _7022) && (_7022 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_7022); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else {}if ((_6963 == std::string ("intpntTolRelStep"))){ double _7023 = (double)_6964; if (((1.000000e-04 <= _7023) && (_7023 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_7023); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else {}if ((_6963 == std::string ("intpntTolPath"))){ double _7024 = (double)_6964; if (((0.000000e+00 <= _7024) && (_7024 <= 9.999000e-01))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_7024); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else {}if ((_6963 == std::string ("intpntTolPfeas"))){ double _7025 = (double)_6964; if (((0.000000e+00 <= _7025) && (_7025 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_7025); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else {}if ((_6963 == std::string ("intpntTolDfeas"))){ double _7026 = (double)_6964; if (((0.000000e+00 <= _7026) && (_7026 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_7026); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else {}if ((_6963 == std::string ("intpntTolMuRed"))){ double _7027 = (double)_6964; if (((0.000000e+00 <= _7027) && (_7027 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_7027); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else {}if ((_6963 == std::string ("intpntTolInfeas"))){ double _7028 = (double)_6964; if (((0.000000e+00 <= _7028) && (_7028 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_7028); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else {}if ((_6963 == std::string ("intpntCoTolRelGap"))){ double _7029 = (double)_6964; if (((0.000000e+00 <= _7029) && (_7029 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_7029); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else {}if ((_6963 == std::string ("intpntCoTolPfeas"))){ double _7030 = (double)_6964; if (((0.000000e+00 <= _7030) && (_7030 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_7030); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else {}if ((_6963 == std::string ("intpntCoTolDfeas"))){ double _7031 = (double)_6964; if (((0.000000e+00 <= _7031) && (_7031 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_7031); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else {}if ((_6963 == std::string ("intpntCoTolMuRed"))){ double _7032 = (double)_6964; if (((0.000000e+00 <= _7032) && (_7032 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_7032); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else {}if ((_6963 == std::string ("intpntCoTolNearRel"))){ double _7033 = (double)_6964; if ((1.000000e+00 <= _7033)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_7033); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else {}if ((_6963 == std::string ("intpntCoTolInfeas"))){ double _7034 = (double)_6964; if (((0.000000e+00 <= _7034) && (_7034 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_7034); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else {}if ((_6963 == std::string ("intpntQoTolRelGap"))){ double _7035 = (double)_6964; if (((0.000000e+00 <= _7035) && (_7035 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_7035); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else {}if ((_6963 == std::string ("intpntQoTolPfeas"))){ double _7036 = (double)_6964; if (((0.000000e+00 <= _7036) && (_7036 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_7036); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else {}if ((_6963 == std::string ("intpntQoTolDfeas"))){ double _7037 = (double)_6964; if (((0.000000e+00 <= _7037) && (_7037 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_7037); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else {}if ((_6963 == std::string ("intpntQoTolMuRed"))){ double _7038 = (double)_6964; if (((0.000000e+00 <= _7038) && (_7038 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_7038); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else {}if ((_6963 == std::string ("intpntQoTolNearRel"))){ double _7039 = (double)_6964; if ((1.000000e+00 <= _7039)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_7039); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else {}if ((_6963 == std::string ("intpntQoTolInfeas"))){ double _7040 = (double)_6964; if (((0.000000e+00 <= _7040) && (_7040 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_7040); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else {}if ((_6963 == std::string ("intpntTolPsafe"))){ double _7041 = (double)_6964; if ((1.000000e-04 <= _7041)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_7041); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else {}if ((_6963 == std::string ("intpntTolDsafe"))){ double _7042 = (double)_6964; if ((1.000000e-04 <= _7042)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_7042); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else {}if ((_6963 == std::string ("mioMaxTime"))){ double _7043 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_7043); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else {}if ((_6963 == std::string ("mioDisableTermTime"))){ double _7044 = (double)_6964; if (true){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_7044); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else {}if ((_6963 == std::string ("mioRelGapConst"))){ double _7045 = (double)_6964; if ((1.000000e-15 <= _7045)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_7045); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else {}if ((_6963 == std::string ("mioTolRelGap"))){ double _7046 = (double)_6964; if ((0.000000e+00 <= _7046)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_7046); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else {}if ((_6963 == std::string ("mioNearTolRelGap"))){ double _7047 = (double)_6964; if ((0.000000e+00 <= _7047)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_7047); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else {}if ((_6963 == std::string ("mioTolAbsGap"))){ double _7048 = (double)_6964; if ((0.000000e+00 <= _7048)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_7048); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else {}if ((_6963 == std::string ("mioNearTolAbsGap"))){ double _7049 = (double)_6964; if ((0.000000e+00 <= _7049)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_7049); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else {}if ((_6963 == std::string ("mioTolAbsRelaxInt"))){ double _7050 = (double)_6964; if ((1.000000e-09 <= _7050)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_7050); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else {}if ((_6963 == std::string ("basisTolX"))){ double _7051 = (double)_6964; if ((1.000000e-09 <= _7051)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_7051); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else {}if ((_6963 == std::string ("basisTolS"))){ double _7052 = (double)_6964; if ((1.000000e-09 <= _7052)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_7052); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else {}if ((_6963 == std::string ("basisRelTolS"))){ double _7053 = (double)_6964; if ((0.000000e+00 <= _7053)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_7053); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else {}if ((_6963 == std::string ("presolveTolX"))){ double _7054 = (double)_6964; if ((0.000000e+00 <= _7054)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_7054); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else {}if ((_6963 == std::string ("presolveTolS"))){ double _7055 = (double)_6964; if ((0.000000e+00 <= _7055)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_7055); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else {}if ((_6963 == std::string ("presolveTolAij"))){ double _7056 = (double)_6964; if ((1.000000e-15 <= _7056)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_7056); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else {}if ((_6963 == std::string ("presolveTolAbsLindep"))){ double _7057 = (double)_6964; if ((0.000000e+00 <= _7057)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_7057); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else {}if ((_6963 == std::string ("presolveTolRelLindep"))){ double _7058 = (double)_6964; if ((0.000000e+00 <= _7058)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_7058); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else {}if ((_6963 == std::string ("simplexAbsTolPiv"))){ double _7059 = (double)_6964; if ((1.000000e-12 <= _7059)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_7059); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else {}if ((_6963 == std::string ("mioTolFeas"))){ double _7060 = (double)_6964; if (((1.000000e-09 <= _7060) && (_7060 <= 1.000000e-03))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_7060); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else {}if ((_6963 == std::string ("anaSolInfeasTol"))){ double _7061 = (double)_6964; if ((0.000000e+00 <= _7061)){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_7061); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else {}if ((_6963 == std::string ("mioTolRelDualBoundImprovement"))){ double _7062 = (double)_6964; if (((0.000000e+00 <= _7062) && (_7062 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_6962.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_7062); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else {}throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _7063,    const std::string & _7064,    const std::string & _7065) { mosek::fusion::p_Parameters::setParameter(_7063,_7064,_7065); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _7063,const std::string & _7064,const std::string & _7065){ if (false){ }else {}if ((_7064 == std::string ("autoUpdateSolInfo"))){ int _7066 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7066 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_7066); return ; }else {}if ((_7064 == std::string ("removeUnusedSolutions"))){ int _7067 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7067 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_7067); return ; }else {}if ((_7064 == std::string ("numThreads"))){ try { int _7069 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7069)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_7069); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}catch (mosek::fusion::ValueConversionError _7068){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else {}if ((_7064 == std::string ("intpntMultiThread"))){ int _7070 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7070 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_7070); return ; }else {}if ((_7064 == std::string ("mtSpincount"))){ try { int _7072 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((int)0 <= _7072) && (_7072 <= (int)1000000000))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_7072); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}catch (mosek::fusion::ValueConversionError _7071){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else {}if ((_7064 == std::string ("optimizer"))){ int _7073 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7065); if ((_7073 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_7073); return ; }else {}if ((_7064 == std::string ("biMaxIterations"))){ try { int _7075 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7075)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_7075); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7074){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else {}if ((_7064 == std::string ("licenseTrhExpiryWrn"))){ try { int _7077 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7077)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_7077); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}catch (mosek::fusion::ValueConversionError _7076){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else {}if ((_7064 == std::string ("logCutSecondOpt"))){ try { int _7079 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7079)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_7079); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}catch (mosek::fusion::ValueConversionError _7078){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else {}if ((_7064 == std::string ("logAnaPro"))){ try { int _7081 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7081)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_7081); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}catch (mosek::fusion::ValueConversionError _7080){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else {}if ((_7064 == std::string ("logResponse"))){ try { int _7083 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7083)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_7083); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}catch (mosek::fusion::ValueConversionError _7082){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else {}if ((_7064 == std::string ("logBi"))){ try { int _7085 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7085)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_7085); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}catch (mosek::fusion::ValueConversionError _7084){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else {}if ((_7064 == std::string ("logBiFreq"))){ try { int _7087 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7087)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_7087); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}catch (mosek::fusion::ValueConversionError _7086){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else {}if ((_7064 == std::string ("biCleanOptimizer"))){ int _7088 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7065); if ((_7088 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_7088); return ; }else {}if ((_7064 == std::string ("intpntStartingPoint"))){ int _7089 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_7065); if ((_7089 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_7089); return ; }else {}if ((_7064 == std::string ("intpntDiffStep"))){ int _7090 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7090 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_7090); return ; }else {}if ((_7064 == std::string ("intpntScaling"))){ int _7091 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_7065); if ((_7091 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_7091); return ; }else {}if ((_7064 == std::string ("intpntSolveForm"))){ int _7092 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_7065); if ((_7092 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_7092); return ; }else {}if ((_7064 == std::string ("logIntpnt"))){ try { int _7094 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7094)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_7094); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}catch (mosek::fusion::ValueConversionError _7093){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else {}if ((_7064 == std::string ("intpntMaxIterations"))){ try { int _7096 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7096)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_7096); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7095){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else {}if ((_7064 == std::string ("intpntOffColTrh"))){ try { int _7098 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7098)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_7098); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}catch (mosek::fusion::ValueConversionError _7097){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else {}if ((_7064 == std::string ("intpntOrderMethod"))){ int _7099 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_7065); if ((_7099 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_7099); return ; }else {}if ((_7064 == std::string ("intpntBasis"))){ int _7100 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_7065); if ((_7100 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_7100); return ; }else {}if ((_7064 == std::string ("biIgnoreMaxIter"))){ int _7101 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7101 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_7101); return ; }else {}if ((_7064 == std::string ("biIgnoreNumError"))){ int _7102 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7102 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_7102); return ; }else {}if ((_7064 == std::string ("intpntMaxNumCor"))){ try { int _7104 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((- (int)1) <= _7104)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_7104); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}catch (mosek::fusion::ValueConversionError _7103){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else {}if ((_7064 == std::string ("presolveUse"))){ int _7105 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_7065); if ((_7105 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_7105); return ; }else {}if ((_7064 == std::string ("presolveLevel"))){ try { int _7107 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_7107); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}catch (mosek::fusion::ValueConversionError _7106){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else {}if ((_7064 == std::string ("logPresolve"))){ try { int _7109 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7109)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_7109); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}catch (mosek::fusion::ValueConversionError _7108){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else {}if ((_7064 == std::string ("presolveLindepUse"))){ int _7110 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7110 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_7110); return ; }else {}if ((_7064 == std::string ("presolveEliminatorMaxNumTries"))){ try { int _7112 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_7112); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}catch (mosek::fusion::ValueConversionError _7111){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else {}if ((_7064 == std::string ("presolveEliminatorMaxFill"))){ try { int _7114 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_7114); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}catch (mosek::fusion::ValueConversionError _7113){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else {}if ((_7064 == std::string ("simPrimalCrash"))){ try { int _7116 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7116)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_7116); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}catch (mosek::fusion::ValueConversionError _7115){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else {}if ((_7064 == std::string ("logSim"))){ try { int _7118 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7118)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_7118); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}catch (mosek::fusion::ValueConversionError _7117){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else {}if ((_7064 == std::string ("logSimMinor"))){ try { int _7120 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7120)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_7120); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}catch (mosek::fusion::ValueConversionError _7119){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else {}if ((_7064 == std::string ("logSimFreq"))){ try { int _7122 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7122)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_7122); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}catch (mosek::fusion::ValueConversionError _7121){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else {}if ((_7064 == std::string ("simPrimalRestrictSelection"))){ try { int _7124 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((int)0 <= _7124) && (_7124 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_7124); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}catch (mosek::fusion::ValueConversionError _7123){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else {}if ((_7064 == std::string ("simPrimalSelection"))){ int _7125 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_7065); if ((_7125 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_7125); return ; }else {}if ((_7064 == std::string ("simDualRestrictSelection"))){ try { int _7127 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((int)0 <= _7127) && (_7127 <= (int)100))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_7127); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}catch (mosek::fusion::ValueConversionError _7126){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else {}if ((_7064 == std::string ("simDualSelection"))){ int _7128 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_7065); if ((_7128 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_7128); return ; }else {}if ((_7064 == std::string ("simMaxIterations"))){ try { int _7130 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7130)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_7130); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7129){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else {}if ((_7064 == std::string ("simHotstartLu"))){ int _7131 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7131 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_7131); return ; }else {}if ((_7064 == std::string ("simRefactorFreq"))){ try { int _7133 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7133)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_7133); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}catch (mosek::fusion::ValueConversionError _7132){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else {}if ((_7064 == std::string ("mioMode"))){ int _7134 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_7065); if ((_7134 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_7134); return ; }else {}if ((_7064 == std::string ("logMio"))){ try { int _7136 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7136)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_7136); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}catch (mosek::fusion::ValueConversionError _7135){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else {}if ((_7064 == std::string ("logMioFreq"))){ try { int _7138 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_7138); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}catch (mosek::fusion::ValueConversionError _7137){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else {}if ((_7064 == std::string ("mioMaxNumRelaxs"))){ try { int _7140 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_7140); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}catch (mosek::fusion::ValueConversionError _7139){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else {}if ((_7064 == std::string ("mioMaxNumBranches"))){ try { int _7142 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_7142); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}catch (mosek::fusion::ValueConversionError _7141){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else {}if ((_7064 == std::string ("mioMaxNumSolutions"))){ try { int _7144 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_7144); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}catch (mosek::fusion::ValueConversionError _7143){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else {}if ((_7064 == std::string ("mioNodeSelection"))){ int _7145 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_7065); if ((_7145 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_7145); return ; }else {}if ((_7064 == std::string ("mioHeuristicLevel"))){ try { int _7147 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_7147); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}catch (mosek::fusion::ValueConversionError _7146){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else {}if ((_7064 == std::string ("mioProbingLevel"))){ try { int _7149 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((- (int)1) <= _7149) && (_7149 <= (int)3))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_7149); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}catch (mosek::fusion::ValueConversionError _7148){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else {}if ((_7064 == std::string ("mioCutSelectionLevel"))){ try { int _7151 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((- (int)1) <= _7151) && (_7151 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_7151); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}catch (mosek::fusion::ValueConversionError _7150){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else {}if ((_7064 == std::string ("mioVbDetectionLevel"))){ try { int _7153 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((- (int)1) <= _7153) && (_7153 <= (int)2))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_7153); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}catch (mosek::fusion::ValueConversionError _7152){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else {}if ((_7064 == std::string ("mioBranchDir"))){ int _7154 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_7065); if ((_7154 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_7154); return ; }else {}if ((_7064 == std::string ("mioRootOptimizer"))){ int _7155 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7065); if ((_7155 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_7155); return ; }else {}if ((_7064 == std::string ("mioNodeOptimizer"))){ int _7156 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_7065); if ((_7156 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_7156); return ; }else {}if ((_7064 == std::string ("mioPerspectiveReformulate"))){ int _7157 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7157 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_7157); return ; }else {}if ((_7064 == std::string ("writeLpQuotedNames"))){ int _7158 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7158 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_7158); return ; }else {}if ((_7064 == std::string ("writeLpLineWidth"))){ try { int _7160 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)40 <= _7160)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_7160); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}catch (mosek::fusion::ValueConversionError _7159){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else {}if ((_7064 == std::string ("writeLpTermsPerLine"))){ try { int _7162 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7162)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_7162); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}catch (mosek::fusion::ValueConversionError _7161){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else {}if ((_7064 == std::string ("writeLpFullObj"))){ int _7163 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7163 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_7163); return ; }else {}if ((_7064 == std::string ("logInfeasAna"))){ try { int _7165 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7165)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_7165); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}catch (mosek::fusion::ValueConversionError _7164){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else {}if ((_7064 == std::string ("licenseWait"))){ int _7166 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7166 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_7166); return ; }else {}if ((_7064 == std::string ("licenseSuppressExpireWrns"))){ int _7167 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7167 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_7167); return ; }else {}if ((_7064 == std::string ("licensePauseTime"))){ try { int _7169 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((int)0 <= _7169) && (_7169 <= (int)1000000))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_7169); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}catch (mosek::fusion::ValueConversionError _7168){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else {}if ((_7064 == std::string ("licenseDebug"))){ int _7170 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7170 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_7170); return ; }else {}if ((_7064 == std::string ("log"))){ try { int _7172 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7172)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_7172); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}catch (mosek::fusion::ValueConversionError _7171){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else {}if ((_7064 == std::string ("logExpand"))){ try { int _7174 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7174)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_7174); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}catch (mosek::fusion::ValueConversionError _7173){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else {}if ((_7064 == std::string ("logFile"))){ try { int _7176 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7176)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_7176); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}catch (mosek::fusion::ValueConversionError _7175){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else {}if ((_7064 == std::string ("logOrder"))){ try { int _7178 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7178)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_7178); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}catch (mosek::fusion::ValueConversionError _7177){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else {}if ((_7064 == std::string ("simScaling"))){ int _7179 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_7065); if ((_7179 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_7179); return ; }else {}if ((_7064 == std::string ("simScalingMethod"))){ int _7180 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_7065); if ((_7180 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_7180); return ; }else {}if ((_7064 == std::string ("simPrimalPhaseoneMethod"))){ try { int _7182 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((int)0 <= _7182) && (_7182 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_7182); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}catch (mosek::fusion::ValueConversionError _7181){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else {}if ((_7064 == std::string ("simDualPhaseoneMethod"))){ try { int _7184 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((int)0 <= _7184) && (_7184 <= (int)10))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_7184); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}catch (mosek::fusion::ValueConversionError _7183){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else {}if ((_7064 == std::string ("simMaxNumSetbacks"))){ try { int _7186 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7186)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_7186); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}catch (mosek::fusion::ValueConversionError _7185){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else {}if ((_7064 == std::string ("simHotstart"))){ int _7187 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_7065); if ((_7187 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_7187); return ; }else {}if ((_7064 == std::string ("simBasisFactorUse"))){ int _7188 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7188 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_7188); return ; }else {}if ((_7064 == std::string ("simDegen"))){ int _7189 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_7065); if ((_7189 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_7189); return ; }else {}if ((_7064 == std::string ("simReformulation"))){ int _7190 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_7065); if ((_7190 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_7190); return ; }else {}if ((_7064 == std::string ("simExploitDupvec"))){ int _7191 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_7065); if ((_7191 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_7191); return ; }else {}if ((_7064 == std::string ("simSaveLu"))){ int _7192 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7192 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_7192); return ; }else {}if ((_7064 == std::string ("simNonSingular"))){ int _7193 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7193 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_7193); return ; }else {}if ((_7064 == std::string ("simDualCrash"))){ try { int _7195 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((int)0 <= _7195)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_7195); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}catch (mosek::fusion::ValueConversionError _7194){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else {}if ((_7064 == std::string ("infeasPreferPrimal"))){ int _7196 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7196 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_7196); return ; }else {}if ((_7064 == std::string ("mioRootRepeatPresolveLevel"))){ try { int _7198 = ::mosek::fusion::Utils::Tools::toInt(_7065); if ((((- (int)1) <= _7198) && (_7198 <= (int)1))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_7198); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}catch (mosek::fusion::ValueConversionError _7197){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else {}if ((_7064 == std::string ("mioCutCmir"))){ int _7199 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7199 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_7199); return ; }else {}if ((_7064 == std::string ("mioCutClique"))){ int _7200 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7200 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_7200); return ; }else {}if ((_7064 == std::string ("mioCutImpliedBound"))){ int _7201 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7201 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_7201); return ; }else {}if ((_7064 == std::string ("mioCutKnapsackCover"))){ int _7202 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7202 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_7202); return ; }else {}if ((_7064 == std::string ("mioCutGmi"))){ int _7203 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7203 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_7203); return ; }else {}if ((_7064 == std::string ("mioConstructSol"))){ int _7204 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7204 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONSTRUCT_SOL"),_7204); return ; }else {}if ((_7064 == std::string ("presolveLindepRelWorkTrh"))){ try { int _7206 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_7206); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}catch (mosek::fusion::ValueConversionError _7205){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else {}if ((_7064 == std::string ("presolveLindepAbsWorkTrh"))){ try { int _7208 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_7208); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}catch (mosek::fusion::ValueConversionError _7207){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else {}if ((_7064 == std::string ("cacheLicense"))){ int _7209 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7209 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_7209); return ; }else {}if ((_7064 == std::string ("intpntRegularizationUse"))){ int _7210 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7210 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_7210); return ; }else {}if ((_7064 == std::string ("simSolveForm"))){ int _7211 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_7065); if ((_7211 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_7211); return ; }else {}if ((_7064 == std::string ("simSwitchOptimizer"))){ int _7212 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_7065); if ((_7212 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_7212); return ; }else {}if ((_7064 == std::string ("mioRinsMaxNodes"))){ try { int _7214 = ::mosek::fusion::Utils::Tools::toInt(_7065); if (((- (int)1) <= _7214)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_7214); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}catch (mosek::fusion::ValueConversionError _7213){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else {}if ((_7064 == std::string ("optimizerMaxTime"))){ try { double _7216 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_7216); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}catch (mosek::fusion::ValueConversionError _7215){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else {}if ((_7064 == std::string ("lowerObjCut"))){ try { double _7218 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_7218); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}catch (mosek::fusion::ValueConversionError _7217){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else {}if ((_7064 == std::string ("upperObjCut"))){ try { double _7220 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_7220); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}catch (mosek::fusion::ValueConversionError _7219){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else {}if ((_7064 == std::string ("upperObjCutFiniteTrh"))){ try { double _7222 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_7222); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}catch (mosek::fusion::ValueConversionError _7221){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else {}if ((_7064 == std::string ("lowerObjCutFiniteTrh"))){ try { double _7224 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_7224); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}catch (mosek::fusion::ValueConversionError _7223){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else {}if ((_7064 == std::string ("intpntTolRelGap"))){ try { double _7226 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-14 <= _7226)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_7226); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7225){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else {}if ((_7064 == std::string ("intpntTolStepSize"))){ try { double _7228 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7228) && (_7228 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_7228); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}catch (mosek::fusion::ValueConversionError _7227){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else {}if ((_7064 == std::string ("simLuTolRelPiv"))){ try { double _7230 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((1.000000e-06 <= _7230) && (_7230 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_7230); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}catch (mosek::fusion::ValueConversionError _7229){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else {}if ((_7064 == std::string ("intpntTolRelStep"))){ try { double _7232 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((1.000000e-04 <= _7232) && (_7232 <= 9.999990e-01))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_7232); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}catch (mosek::fusion::ValueConversionError _7231){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else {}if ((_7064 == std::string ("intpntTolPath"))){ try { double _7234 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7234) && (_7234 <= 9.999000e-01))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_7234); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}catch (mosek::fusion::ValueConversionError _7233){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else {}if ((_7064 == std::string ("intpntTolPfeas"))){ try { double _7236 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7236) && (_7236 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_7236); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7235){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else {}if ((_7064 == std::string ("intpntTolDfeas"))){ try { double _7238 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7238) && (_7238 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_7238); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7237){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else {}if ((_7064 == std::string ("intpntTolMuRed"))){ try { double _7240 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7240) && (_7240 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_7240); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7239){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else {}if ((_7064 == std::string ("intpntTolInfeas"))){ try { double _7242 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7242) && (_7242 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_7242); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7241){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else {}if ((_7064 == std::string ("intpntCoTolRelGap"))){ try { double _7244 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7244) && (_7244 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_7244); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7243){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else {}if ((_7064 == std::string ("intpntCoTolPfeas"))){ try { double _7246 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7246) && (_7246 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_7246); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7245){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else {}if ((_7064 == std::string ("intpntCoTolDfeas"))){ try { double _7248 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7248) && (_7248 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_7248); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7247){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else {}if ((_7064 == std::string ("intpntCoTolMuRed"))){ try { double _7250 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7250) && (_7250 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_7250); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7249){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else {}if ((_7064 == std::string ("intpntCoTolNearRel"))){ try { double _7252 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e+00 <= _7252)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_7252); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}catch (mosek::fusion::ValueConversionError _7251){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else {}if ((_7064 == std::string ("intpntCoTolInfeas"))){ try { double _7254 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7254) && (_7254 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_7254); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7253){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else {}if ((_7064 == std::string ("intpntQoTolRelGap"))){ try { double _7256 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7256) && (_7256 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_7256); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7255){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else {}if ((_7064 == std::string ("intpntQoTolPfeas"))){ try { double _7258 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7258) && (_7258 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_7258); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7257){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else {}if ((_7064 == std::string ("intpntQoTolDfeas"))){ try { double _7260 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7260) && (_7260 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_7260); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7259){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else {}if ((_7064 == std::string ("intpntQoTolMuRed"))){ try { double _7262 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7262) && (_7262 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_7262); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7261){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else {}if ((_7064 == std::string ("intpntQoTolNearRel"))){ try { double _7264 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e+00 <= _7264)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_7264); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}catch (mosek::fusion::ValueConversionError _7263){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else {}if ((_7064 == std::string ("intpntQoTolInfeas"))){ try { double _7266 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7266) && (_7266 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_7266); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7265){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else {}if ((_7064 == std::string ("intpntTolPsafe"))){ try { double _7268 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-04 <= _7268)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_7268); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}catch (mosek::fusion::ValueConversionError _7267){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else {}if ((_7064 == std::string ("intpntTolDsafe"))){ try { double _7270 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-04 <= _7270)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_7270); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}catch (mosek::fusion::ValueConversionError _7269){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else {}if ((_7064 == std::string ("mioMaxTime"))){ try { double _7272 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_7272); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}catch (mosek::fusion::ValueConversionError _7271){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else {}if ((_7064 == std::string ("mioDisableTermTime"))){ try { double _7274 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (true){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_7274); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}catch (mosek::fusion::ValueConversionError _7273){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else {}if ((_7064 == std::string ("mioRelGapConst"))){ try { double _7276 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-15 <= _7276)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_7276); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}catch (mosek::fusion::ValueConversionError _7275){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else {}if ((_7064 == std::string ("mioTolRelGap"))){ try { double _7278 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7278)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_7278); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7277){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else {}if ((_7064 == std::string ("mioNearTolRelGap"))){ try { double _7280 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7280)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_7280); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7279){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else {}if ((_7064 == std::string ("mioTolAbsGap"))){ try { double _7282 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7282)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_7282); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}catch (mosek::fusion::ValueConversionError _7281){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else {}if ((_7064 == std::string ("mioNearTolAbsGap"))){ try { double _7284 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7284)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_7284); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}catch (mosek::fusion::ValueConversionError _7283){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else {}if ((_7064 == std::string ("mioTolAbsRelaxInt"))){ try { double _7286 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-09 <= _7286)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_7286); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}catch (mosek::fusion::ValueConversionError _7285){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else {}if ((_7064 == std::string ("basisTolX"))){ try { double _7288 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-09 <= _7288)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_7288); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}catch (mosek::fusion::ValueConversionError _7287){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else {}if ((_7064 == std::string ("basisTolS"))){ try { double _7290 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-09 <= _7290)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_7290); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}catch (mosek::fusion::ValueConversionError _7289){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else {}if ((_7064 == std::string ("basisRelTolS"))){ try { double _7292 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7292)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_7292); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}catch (mosek::fusion::ValueConversionError _7291){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else {}if ((_7064 == std::string ("presolveTolX"))){ try { double _7294 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7294)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_7294); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}catch (mosek::fusion::ValueConversionError _7293){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else {}if ((_7064 == std::string ("presolveTolS"))){ try { double _7296 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7296)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_7296); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}catch (mosek::fusion::ValueConversionError _7295){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else {}if ((_7064 == std::string ("presolveTolAij"))){ try { double _7298 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-15 <= _7298)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_7298); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}catch (mosek::fusion::ValueConversionError _7297){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else {}if ((_7064 == std::string ("presolveTolAbsLindep"))){ try { double _7300 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7300)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_7300); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}catch (mosek::fusion::ValueConversionError _7299){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else {}if ((_7064 == std::string ("presolveTolRelLindep"))){ try { double _7302 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7302)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_7302); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}catch (mosek::fusion::ValueConversionError _7301){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else {}if ((_7064 == std::string ("simplexAbsTolPiv"))){ try { double _7304 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((1.000000e-12 <= _7304)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_7304); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}catch (mosek::fusion::ValueConversionError _7303){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else {}if ((_7064 == std::string ("mioTolFeas"))){ try { double _7306 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((1.000000e-09 <= _7306) && (_7306 <= 1.000000e-03))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_7306); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}catch (mosek::fusion::ValueConversionError _7305){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else {}if ((_7064 == std::string ("anaSolInfeasTol"))){ try { double _7308 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if ((0.000000e+00 <= _7308)){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_7308); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}catch (mosek::fusion::ValueConversionError _7307){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else {}if ((_7064 == std::string ("mioTolRelDualBoundImprovement"))){ try { double _7310 = ::mosek::fusion::Utils::Tools::toDouble(_7065); if (((0.000000e+00 <= _7310) && (_7310 <= 1.000000e+00))){ mosek::fusion::p_Model::_get_impl(_7063.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_7310); return ; }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}catch (mosek::fusion::ValueConversionError _7309){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else {}throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}int mosek::fusion::p_Parameters::string_to_miocontsoltype_value( const std::string & _7311){ if ((_7311 == std::string ("none"))){ return (int)0; }else {}if ((_7311 == std::string ("root"))){ return (int)1; }else {}if ((_7311 == std::string ("itg"))){ return (int)2; }else {}if ((_7311 == std::string ("itgRel"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_internal_dinf_value( const std::string & _7312){ if ((_7312 == std::string ("sensitivityPrimalTime"))){ return (int)79; }else {}if ((_7312 == std::string ("sensitivityDualTime"))){ return (int)78; }else {}if ((_7312 == std::string ("intpntCompGap"))){ return (int)11; }else {}if ((_7312 == std::string ("intpntGfeas"))){ return (int)57; }else {}if ((_7312 == std::string ("intpntMu"))){ return (int)64; }else {}if ((_7312 == std::string ("intpntInitIterTime"))){ return (int)59; }else {}if ((_7312 == std::string ("intpntFactorTime"))){ return (int)55; }else {}if ((_7312 == std::string ("intpntInitSearchTime"))){ return (int)60; }else {}if ((_7312 == std::string ("intpntFormSearchTime"))){ return (int)56; }else {}if ((_7312 == std::string ("intpntUpdateTime"))){ return (int)68; }else {}if ((_7312 == std::string ("intpntFactorSetupTime"))){ return (int)52; }else {}if ((_7312 == std::string ("intpntFactorSchurTime"))){ return (int)46; }else {}if ((_7312 == std::string ("intpntFactorHatSchurTime"))){ return (int)31; }else {}if ((_7312 == std::string ("intpntFactorHatSchurPushTime"))){ return (int)30; }else {}if ((_7312 == std::string ("intpntFactorHatSchurPullTime"))){ return (int)28; }else {}if ((_7312 == std::string ("intpntFactorBarSchurTime"))){ return (int)15; }else {}if ((_7312 == std::string ("intpntFactorBarSchurDeTabTime"))){ return (int)12; }else {}if ((_7312 == std::string ("intpntFactorBarSchurSpTabTime"))){ return (int)14; }else {}if ((_7312 == std::string ("intpntFactorSparseLTime"))){ return (int)54; }else {}if ((_7312 == std::string ("intpntFactorDenseLTime"))){ return (int)20; }else {}if ((_7312 == std::string ("intpntFactorHataTime"))){ return (int)34; }else {}if ((_7312 == std::string ("intpntFactorHataSolveTime"))){ return (int)33; }else {}if ((_7312 == std::string ("intpntFactorHatvTime"))){ return (int)41; }else {}if ((_7312 == std::string ("intpntFactorHatathataTime"))){ return (int)36; }else {}if ((_7312 == std::string ("intpntFactorHatvthatvTime"))){ return (int)43; }else {}if ((_7312 == std::string ("intpntFactorDotlInitTime"))){ return (int)24; }else {}if ((_7312 == std::string ("intpntFactorDotlFactorTime"))){ return (int)23; }else {}if ((_7312 == std::string ("intpntFactorHatldInitTime"))){ return (int)39; }else {}if ((_7312 == std::string ("intpntFactorHatldFactorTime"))){ return (int)38; }else {}if ((_7312 == std::string ("intpntFactorDenseTime"))){ return (int)21; }else {}if ((_7312 == std::string ("intpntIterNonCorrectorFlops"))){ return (int)61; }else {}if ((_7312 == std::string ("intpntIterOneCorrectorFlops"))){ return (int)62; }else {}if ((_7312 == std::string ("intpntSolveTime"))){ return (int)67; }else {}if ((_7312 == std::string ("intpntIterRefTime"))){ return (int)63; }else {}if ((_7312 == std::string ("intpntSolveSparseLTime"))){ return (int)66; }else {}if ((_7312 == std::string ("intpntSolveDenseLTime"))){ return (int)65; }else {}if ((_7312 == std::string ("intpntFactorSetupFlops"))){ return (int)48; }else {}if ((_7312 == std::string ("intpntFactorSetupHatSchurFlops"))){ return (int)50; }else {}if ((_7312 == std::string ("intpntFactorSchurFlops"))){ return (int)45; }else {}if ((_7312 == std::string ("intpntFactorHatSchurFlops"))){ return (int)26; }else {}if ((_7312 == std::string ("intpntFactorHatSchurPushFlops"))){ return (int)29; }else {}if ((_7312 == std::string ("intpntFactorHatSchurPullFlops"))){ return (int)27; }else {}if ((_7312 == std::string ("intpntFactorBarSchurFlops"))){ return (int)13; }else {}if ((_7312 == std::string ("intpntFactorSparseLFlops"))){ return (int)53; }else {}if ((_7312 == std::string ("intpntFactorMlOrderSparseLFlops"))){ return (int)44; }else {}if ((_7312 == std::string ("intpntFactorGpOrderSparseLFlops"))){ return (int)25; }else {}if ((_7312 == std::string ("intpntFactorDenseLFlops"))){ return (int)19; }else {}if ((_7312 == std::string ("intpntFactorBvFlops"))){ return (int)16; }else {}if ((_7312 == std::string ("intpntFactorBvtbvFlops"))){ return (int)17; }else {}if ((_7312 == std::string ("intpntFactorHataFlops"))){ return (int)32; }else {}if ((_7312 == std::string ("intpntFactorHatvFlops"))){ return (int)40; }else {}if ((_7312 == std::string ("intpntFactorDenseFlops"))){ return (int)18; }else {}if ((_7312 == std::string ("intpntFactorHatathataFlops"))){ return (int)35; }else {}if ((_7312 == std::string ("intpntFactorHatvthatvFlops"))){ return (int)42; }else {}if ((_7312 == std::string ("intpntFactorDotlFactorFlops"))){ return (int)22; }else {}if ((_7312 == std::string ("intpntFactorHatldFactorFlops"))){ return (int)37; }else {}if ((_7312 == std::string ("presolveAcoltTime"))){ return (int)69; }else {}if ((_7312 == std::string ("presolveSetupTime"))){ return (int)74; }else {}if ((_7312 == std::string ("presolveCheckproTime"))){ return (int)70; }else {}if ((_7312 == std::string ("presolveDupconTime"))){ return (int)71; }else {}if ((_7312 == std::string ("presolveDupvarTime"))){ return (int)72; }else {}if ((_7312 == std::string ("presolveFinalTime"))){ return (int)73; }else {}if ((_7312 == std::string ("presolveSubDomvarTime"))){ return (int)75; }else {}if ((_7312 == std::string ("presolveSubRelaxTime"))){ return (int)76; }else {}if ((_7312 == std::string ("primalSimplexInftime"))){ return (int)77; }else {}if ((_7312 == std::string ("dualSimplexInftime"))){ return (int)10; }else {}if ((_7312 == std::string ("intpntGpOrderSavedFlops"))){ return (int)58; }else {}if ((_7312 == std::string ("intpntFactorSetupDetectDenseTime"))){ return (int)47; }else {}if ((_7312 == std::string ("intpntFactorSetupMlOrderTime"))){ return (int)51; }else {}if ((_7312 == std::string ("intpntFactorSetupGpOrderTime"))){ return (int)49; }else {}if ((_7312 == std::string ("biCrashTime"))){ return (int)1; }else {}if ((_7312 == std::string ("biCrashLuTime"))){ return (int)0; }else {}if ((_7312 == std::string ("biFactorTime"))){ return (int)5; }else {}if ((_7312 == std::string ("biFactorWork"))){ return (int)6; }else {}if ((_7312 == std::string ("biPrimalDone"))){ return (int)7; }else {}if ((_7312 == std::string ("biDualDone"))){ return (int)2; }else {}if ((_7312 == std::string ("simPrimalObj"))){ return (int)83; }else {}if ((_7312 == std::string ("simPrimalFeas"))){ return (int)82; }else {}if ((_7312 == std::string ("simDualObj"))){ return (int)81; }else {}if ((_7312 == std::string ("simDualFeas"))){ return (int)80; }else {}if ((_7312 == std::string ("biPrimalObj"))){ return (int)9; }else {}if ((_7312 == std::string ("biDualObj"))){ return (int)4; }else {}if ((_7312 == std::string ("biPrimalFeas"))){ return (int)8; }else {}if ((_7312 == std::string ("biDualFeas"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_presolvemode_value( const std::string & _7313){ if ((_7313 == std::string ("off"))){ return (int)0; }else {}if ((_7313 == std::string ("on"))){ return (int)1; }else {}if ((_7313 == std::string ("free"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_optimizertype_value( const std::string & _7314){ if ((_7314 == std::string ("free"))){ return (int)2; }else {}if ((_7314 == std::string ("intpnt"))){ return (int)4; }else {}if ((_7314 == std::string ("conic"))){ return (int)0; }else {}if ((_7314 == std::string ("primalSimplex"))){ return (int)6; }else {}if ((_7314 == std::string ("dualSimplex"))){ return (int)1; }else {}if ((_7314 == std::string ("freeSimplex"))){ return (int)3; }else {}if ((_7314 == std::string ("mixedInt"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_stakey_value( const std::string & _7315){ if ((_7315 == std::string ("unk"))){ return (int)0; }else {}if ((_7315 == std::string ("bas"))){ return (int)1; }else {}if ((_7315 == std::string ("supbas"))){ return (int)2; }else {}if ((_7315 == std::string ("low"))){ return (int)3; }else {}if ((_7315 == std::string ("upr"))){ return (int)4; }else {}if ((_7315 == std::string ("fix"))){ return (int)5; }else {}if ((_7315 == std::string ("inf"))){ return (int)6; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_iinfitem_value( const std::string & _7316){ if ((_7316 == std::string ("anaProNumCon"))){ return (int)0; }else {}if ((_7316 == std::string ("anaProNumConLo"))){ return (int)3; }else {}if ((_7316 == std::string ("anaProNumConUp"))){ return (int)5; }else {}if ((_7316 == std::string ("anaProNumConRa"))){ return (int)4; }else {}if ((_7316 == std::string ("anaProNumConEq"))){ return (int)1; }else {}if ((_7316 == std::string ("anaProNumConFr"))){ return (int)2; }else {}if ((_7316 == std::string ("anaProNumVar"))){ return (int)6; }else {}if ((_7316 == std::string ("anaProNumVarLo"))){ return (int)12; }else {}if ((_7316 == std::string ("anaProNumVarUp"))){ return (int)14; }else {}if ((_7316 == std::string ("anaProNumVarRa"))){ return (int)13; }else {}if ((_7316 == std::string ("anaProNumVarEq"))){ return (int)9; }else {}if ((_7316 == std::string ("anaProNumVarFr"))){ return (int)10; }else {}if ((_7316 == std::string ("anaProNumVarCont"))){ return (int)8; }else {}if ((_7316 == std::string ("anaProNumVarBin"))){ return (int)7; }else {}if ((_7316 == std::string ("anaProNumVarInt"))){ return (int)11; }else {}if ((_7316 == std::string ("optimizeResponse"))){ return (int)51; }else {}if ((_7316 == std::string ("intpntIter"))){ return (int)16; }else {}if ((_7316 == std::string ("intpntFactorDimDense"))){ return (int)15; }else {}if ((_7316 == std::string ("intpntSolveDual"))){ return (int)18; }else {}if ((_7316 == std::string ("mioNodeDepth"))){ return (int)26; }else {}if ((_7316 == std::string ("mioNumcon"))){ return (int)37; }else {}if ((_7316 == std::string ("mioNumvar"))){ return (int)39; }else {}if ((_7316 == std::string ("mioNumint"))){ return (int)38; }else {}if ((_7316 == std::string ("mioPresolvedNumcont"))){ return (int)43; }else {}if ((_7316 == std::string ("mioPresolvedNumbin"))){ return (int)41; }else {}if ((_7316 == std::string ("mioPresolvedNumcon"))){ return (int)42; }else {}if ((_7316 == std::string ("mioPresolvedNumvar"))){ return (int)45; }else {}if ((_7316 == std::string ("mioPresolvedNumint"))){ return (int)44; }else {}if ((_7316 == std::string ("mioCliqueTableSize"))){ return (int)20; }else {}if ((_7316 == std::string ("mioConstructSolution"))){ return (int)22; }else {}if ((_7316 == std::string ("mioConstructNumRoundings"))){ return (int)21; }else {}if ((_7316 == std::string ("mioNumIntSolutions"))){ return (int)33; }else {}if ((_7316 == std::string ("mioObjBoundDefined"))){ return (int)40; }else {}if ((_7316 == std::string ("mioNumActiveNodes"))){ return (int)27; }else {}if ((_7316 == std::string ("mioNumRelax"))){ return (int)35; }else {}if ((_7316 == std::string ("mioNumBranch"))){ return (int)28; }else {}if ((_7316 == std::string ("mioTotalNumCuts"))){ return (int)47; }else {}if ((_7316 == std::string ("mioNumCmirCuts"))){ return (int)30; }else {}if ((_7316 == std::string ("mioNumCliqueCuts"))){ return (int)29; }else {}if ((_7316 == std::string ("mioNumImpliedBoundCuts"))){ return (int)32; }else {}if ((_7316 == std::string ("mioNumKnapsackCoverCuts"))){ return (int)34; }else {}if ((_7316 == std::string ("mioNumGomoryCuts"))){ return (int)31; }else {}if ((_7316 == std::string ("mioNumRepeatedPresolve"))){ return (int)36; }else {}if ((_7316 == std::string ("mioInitialSolution"))){ return (int)23; }else {}if ((_7316 == std::string ("mioUserObjCut"))){ return (int)48; }else {}if ((_7316 == std::string ("mioRelgapSatisfied"))){ return (int)46; }else {}if ((_7316 == std::string ("mioAbsgapSatisfied"))){ return (int)19; }else {}if ((_7316 == std::string ("mioNearRelgapSatisfied"))){ return (int)25; }else {}if ((_7316 == std::string ("mioNearAbsgapSatisfied"))){ return (int)24; }else {}if ((_7316 == std::string ("rdProtype"))){ return (int)58; }else {}if ((_7316 == std::string ("rdNumcon"))){ return (int)53; }else {}if ((_7316 == std::string ("rdNumvar"))){ return (int)57; }else {}if ((_7316 == std::string ("rdNumbarvar"))){ return (int)52; }else {}if ((_7316 == std::string ("rdNumintvar"))){ return (int)55; }else {}if ((_7316 == std::string ("rdNumq"))){ return (int)56; }else {}if ((_7316 == std::string ("simDualDegIter"))){ return (int)59; }else {}if ((_7316 == std::string ("simDualInfIter"))){ return (int)62; }else {}if ((_7316 == std::string ("simDualHotstartLu"))){ return (int)61; }else {}if ((_7316 == std::string ("simPrimalIter"))){ return (int)70; }else {}if ((_7316 == std::string ("simDualIter"))){ return (int)63; }else {}if ((_7316 == std::string ("intpntNumThreads"))){ return (int)17; }else {}if ((_7316 == std::string ("simPrimalInfIter"))){ return (int)69; }else {}if ((_7316 == std::string ("simPrimalDegIter"))){ return (int)66; }else {}if ((_7316 == std::string ("simPrimalHotstart"))){ return (int)67; }else {}if ((_7316 == std::string ("simPrimalHotstartLu"))){ return (int)68; }else {}if ((_7316 == std::string ("simDualHotstart"))){ return (int)60; }else {}if ((_7316 == std::string ("solItrProsta"))){ return (int)76; }else {}if ((_7316 == std::string ("solItrSolsta"))){ return (int)77; }else {}if ((_7316 == std::string ("solBasProsta"))){ return (int)72; }else {}if ((_7316 == std::string ("solBasSolsta"))){ return (int)73; }else {}if ((_7316 == std::string ("solItgProsta"))){ return (int)74; }else {}if ((_7316 == std::string ("solItgSolsta"))){ return (int)75; }else {}if ((_7316 == std::string ("simNumcon"))){ return (int)64; }else {}if ((_7316 == std::string ("simNumvar"))){ return (int)65; }else {}if ((_7316 == std::string ("optNumcon"))){ return (int)49; }else {}if ((_7316 == std::string ("optNumvar"))){ return (int)50; }else {}if ((_7316 == std::string ("stoNumARealloc"))){ return (int)78; }else {}if ((_7316 == std::string ("rdNumcone"))){ return (int)54; }else {}if ((_7316 == std::string ("simSolveDual"))){ return (int)71; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simreform_value( const std::string & _7317){ if ((_7317 == std::string ("on"))){ return (int)1; }else {}if ((_7317 == std::string ("off"))){ return (int)0; }else {}if ((_7317 == std::string ("free"))){ return (int)2; }else {}if ((_7317 == std::string ("aggressive"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_value_value( const std::string & _7318){ if ((_7318 == std::string ("maxStrLen"))){ return (int)1024; }else {}if ((_7318 == std::string ("licenseBufferLength"))){ return (int)21; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_scalingmethod_value( const std::string & _7319){ if ((_7319 == std::string ("pow2"))){ return (int)0; }else {}if ((_7319 == std::string ("free"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_soltype_value( const std::string & _7320){ if ((_7320 == std::string ("bas"))){ return (int)1; }else {}if ((_7320 == std::string ("itr"))){ return (int)0; }else {}if ((_7320 == std::string ("itg"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_startpointtype_value( const std::string & _7321){ if ((_7321 == std::string ("free"))){ return (int)0; }else {}if ((_7321 == std::string ("guess"))){ return (int)1; }else {}if ((_7321 == std::string ("constant"))){ return (int)2; }else {}if ((_7321 == std::string ("satisfyBounds"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_language_value( const std::string & _7322){ if ((_7322 == std::string ("eng"))){ return (int)0; }else {}if ((_7322 == std::string ("dan"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value( const std::string & _7323){ if ((_7323 == std::string ("none"))){ return (int)0; }else {}if ((_7323 == std::string ("simple"))){ return (int)1; }else {}if ((_7323 == std::string ("full"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_variabletype_value( const std::string & _7324){ if ((_7324 == std::string ("typeCont"))){ return (int)0; }else {}if ((_7324 == std::string ("typeInt"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_mpsformat_value( const std::string & _7325){ if ((_7325 == std::string ("strict"))){ return (int)0; }else {}if ((_7325 == std::string ("relaxed"))){ return (int)1; }else {}if ((_7325 == std::string ("free"))){ return (int)2; }else {}if ((_7325 == std::string ("cplex"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_nametype_value( const std::string & _7326){ if ((_7326 == std::string ("gen"))){ return (int)0; }else {}if ((_7326 == std::string ("mps"))){ return (int)1; }else {}if ((_7326 == std::string ("lp"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_compresstype_value( const std::string & _7327){ if ((_7327 == std::string ("none"))){ return (int)0; }else {}if ((_7327 == std::string ("free"))){ return (int)1; }else {}if ((_7327 == std::string ("gzip"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simdupvec_value( const std::string & _7328){ if ((_7328 == std::string ("on"))){ return (int)1; }else {}if ((_7328 == std::string ("off"))){ return (int)0; }else {}if ((_7328 == std::string ("free"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_dparam_value( const std::string & _7329){ if ((_7329 == std::string ("dataTolCjLarge"))){ return (int)14; }else {}if ((_7329 == std::string ("dataTolCHuge"))){ return (int)13; }else {}if ((_7329 == std::string ("dataTolAij"))){ return (int)8; }else {}if ((_7329 == std::string ("dataTolAijLarge"))){ return (int)10; }else {}if ((_7329 == std::string ("dataTolAijHuge"))){ return (int)9; }else {}if ((_7329 == std::string ("dataSymMatTol"))){ return (int)5; }else {}if ((_7329 == std::string ("dataSymMatTolLarge"))){ return (int)7; }else {}if ((_7329 == std::string ("dataSymMatTolHuge"))){ return (int)6; }else {}if ((_7329 == std::string ("dataTolBoundInf"))){ return (int)11; }else {}if ((_7329 == std::string ("dataTolBoundWrn"))){ return (int)12; }else {}if ((_7329 == std::string ("dataTolQij"))){ return (int)15; }else {}if ((_7329 == std::string ("dataTolX"))){ return (int)16; }else {}if ((_7329 == std::string ("semidefiniteTolApprox"))){ return (int)65; }else {}if ((_7329 == std::string ("optimizerMaxTime"))){ return (int)58; }else {}if ((_7329 == std::string ("lowerObjCut"))){ return (int)46; }else {}if ((_7329 == std::string ("upperObjCut"))){ return (int)68; }else {}if ((_7329 == std::string ("upperObjCutFiniteTrh"))){ return (int)69; }else {}if ((_7329 == std::string ("lowerObjCutFiniteTrh"))){ return (int)47; }else {}if ((_7329 == std::string ("intpntTolRelGap"))){ return (int)43; }else {}if ((_7329 == std::string ("intpntNlTolRelGap"))){ return (int)28; }else {}if ((_7329 == std::string ("intpntTolStepSize"))){ return (int)45; }else {}if ((_7329 == std::string ("simLuTolRelPiv"))){ return (int)66; }else {}if ((_7329 == std::string ("intpntTolRelStep"))){ return (int)44; }else {}if ((_7329 == std::string ("intpntNlTolRelStep"))){ return (int)29; }else {}if ((_7329 == std::string ("intpntNlMeritBal"))){ return (int)23; }else {}if ((_7329 == std::string ("intpntTolPath"))){ return (int)40; }else {}if ((_7329 == std::string ("intpntTolPfeas"))){ return (int)41; }else {}if ((_7329 == std::string ("intpntTolDfeas"))){ return (int)36; }else {}if ((_7329 == std::string ("intpntTolMuRed"))){ return (int)39; }else {}if ((_7329 == std::string ("intpntNlTolPfeas"))){ return (int)27; }else {}if ((_7329 == std::string ("intpntNlTolDfeas"))){ return (int)24; }else {}if ((_7329 == std::string ("intpntNlTolMuRed"))){ return (int)25; }else {}if ((_7329 == std::string ("intpntNlTolNearRel"))){ return (int)26; }else {}if ((_7329 == std::string ("intpntTolInfeas"))){ return (int)38; }else {}if ((_7329 == std::string ("intpntCoTolRelGap"))){ return (int)22; }else {}if ((_7329 == std::string ("intpntCoTolPfeas"))){ return (int)21; }else {}if ((_7329 == std::string ("intpntCoTolDfeas"))){ return (int)17; }else {}if ((_7329 == std::string ("intpntCoTolMuRed"))){ return (int)19; }else {}if ((_7329 == std::string ("intpntCoTolNearRel"))){ return (int)20; }else {}if ((_7329 == std::string ("intpntCoTolInfeas"))){ return (int)18; }else {}if ((_7329 == std::string ("intpntQoTolRelGap"))){ return (int)35; }else {}if ((_7329 == std::string ("intpntQoTolPfeas"))){ return (int)34; }else {}if ((_7329 == std::string ("intpntQoTolDfeas"))){ return (int)30; }else {}if ((_7329 == std::string ("intpntQoTolMuRed"))){ return (int)32; }else {}if ((_7329 == std::string ("intpntQoTolNearRel"))){ return (int)33; }else {}if ((_7329 == std::string ("intpntQoTolInfeas"))){ return (int)31; }else {}if ((_7329 == std::string ("intpntTolPsafe"))){ return (int)42; }else {}if ((_7329 == std::string ("intpntTolDsafe"))){ return (int)37; }else {}if ((_7329 == std::string ("mioMaxTime"))){ return (int)49; }else {}if ((_7329 == std::string ("mioDisableTermTime"))){ return (int)48; }else {}if ((_7329 == std::string ("mioRelGapConst"))){ return (int)52; }else {}if ((_7329 == std::string ("mioTolRelGap"))){ return (int)57; }else {}if ((_7329 == std::string ("mioNearTolRelGap"))){ return (int)51; }else {}if ((_7329 == std::string ("mioTolAbsGap"))){ return (int)53; }else {}if ((_7329 == std::string ("mioNearTolAbsGap"))){ return (int)50; }else {}if ((_7329 == std::string ("mioTolAbsRelaxInt"))){ return (int)54; }else {}if ((_7329 == std::string ("basisTolX"))){ return (int)3; }else {}if ((_7329 == std::string ("basisTolS"))){ return (int)2; }else {}if ((_7329 == std::string ("basisRelTolS"))){ return (int)1; }else {}if ((_7329 == std::string ("presolveTolX"))){ return (int)63; }else {}if ((_7329 == std::string ("presolveTolS"))){ return (int)62; }else {}if ((_7329 == std::string ("presolveTolAij"))){ return (int)60; }else {}if ((_7329 == std::string ("presolveTolAbsLindep"))){ return (int)59; }else {}if ((_7329 == std::string ("presolveTolRelLindep"))){ return (int)61; }else {}if ((_7329 == std::string ("simplexAbsTolPiv"))){ return (int)67; }else {}if ((_7329 == std::string ("mioTolFeas"))){ return (int)55; }else {}if ((_7329 == std::string ("anaSolInfeasTol"))){ return (int)0; }else {}if ((_7329 == std::string ("checkConvexityRelTol"))){ return (int)4; }else {}if ((_7329 == std::string ("qcqoReformulateRelDropTol"))){ return (int)64; }else {}if ((_7329 == std::string ("mioTolRelDualBoundImprovement"))){ return (int)56; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_inftype_value( const std::string & _7330){ if ((_7330 == std::string ("douType"))){ return (int)0; }else {}if ((_7330 == std::string ("intType"))){ return (int)1; }else {}if ((_7330 == std::string ("lintType"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_problemtype_value( const std::string & _7331){ if ((_7331 == std::string ("lo"))){ return (int)0; }else {}if ((_7331 == std::string ("qo"))){ return (int)1; }else {}if ((_7331 == std::string ("qcqo"))){ return (int)2; }else {}if ((_7331 == std::string ("geco"))){ return (int)3; }else {}if ((_7331 == std::string ("conic"))){ return (int)4; }else {}if ((_7331 == std::string ("mixed"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_orderingtype_value( const std::string & _7332){ if ((_7332 == std::string ("free"))){ return (int)0; }else {}if ((_7332 == std::string ("appminloc"))){ return (int)1; }else {}if ((_7332 == std::string ("experimental"))){ return (int)2; }else {}if ((_7332 == std::string ("tryGraphpar"))){ return (int)3; }else {}if ((_7332 == std::string ("forceGraphpar"))){ return (int)4; }else {}if ((_7332 == std::string ("none"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_dataformat_value( const std::string & _7333){ if ((_7333 == std::string ("extension"))){ return (int)0; }else {}if ((_7333 == std::string ("mps"))){ return (int)1; }else {}if ((_7333 == std::string ("lp"))){ return (int)2; }else {}if ((_7333 == std::string ("op"))){ return (int)3; }else {}if ((_7333 == std::string ("xml"))){ return (int)4; }else {}if ((_7333 == std::string ("freeMps"))){ return (int)5; }else {}if ((_7333 == std::string ("task"))){ return (int)6; }else {}if ((_7333 == std::string ("cb"))){ return (int)7; }else {}if ((_7333 == std::string ("jsonTask"))){ return (int)8; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simdegen_value( const std::string & _7334){ if ((_7334 == std::string ("none"))){ return (int)0; }else {}if ((_7334 == std::string ("free"))){ return (int)1; }else {}if ((_7334 == std::string ("aggressive"))){ return (int)2; }else {}if ((_7334 == std::string ("moderate"))){ return (int)3; }else {}if ((_7334 == std::string ("minimum"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_onoffkey_value( const std::string & _7335){ if ((_7335 == std::string ("on"))){ return (int)1; }else {}if ((_7335 == std::string ("off"))){ return (int)0; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_transpose_value( const std::string & _7336){ if ((_7336 == std::string ("no"))){ return (int)0; }else {}if ((_7336 == std::string ("yes"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_mionodeseltype_value( const std::string & _7337){ if ((_7337 == std::string ("free"))){ return (int)0; }else {}if ((_7337 == std::string ("first"))){ return (int)1; }else {}if ((_7337 == std::string ("best"))){ return (int)2; }else {}if ((_7337 == std::string ("worst"))){ return (int)3; }else {}if ((_7337 == std::string ("hybrid"))){ return (int)4; }else {}if ((_7337 == std::string ("pseudo"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_rescode_value( const std::string & _7338){ if ((_7338 == std::string ("ok"))){ return (int)0; }else {}if ((_7338 == std::string ("wrnOpenParamFile"))){ return (int)50; }else {}if ((_7338 == std::string ("wrnLargeBound"))){ return (int)51; }else {}if ((_7338 == std::string ("wrnLargeLoBound"))){ return (int)52; }else {}if ((_7338 == std::string ("wrnLargeUpBound"))){ return (int)53; }else {}if ((_7338 == std::string ("wrnLargeConFx"))){ return (int)54; }else {}if ((_7338 == std::string ("wrnLargeCj"))){ return (int)57; }else {}if ((_7338 == std::string ("wrnLargeAij"))){ return (int)62; }else {}if ((_7338 == std::string ("wrnZeroAij"))){ return (int)63; }else {}if ((_7338 == std::string ("wrnNameMaxLen"))){ return (int)65; }else {}if ((_7338 == std::string ("wrnSparMaxLen"))){ return (int)66; }else {}if ((_7338 == std::string ("wrnMpsSplitRhsVector"))){ return (int)70; }else {}if ((_7338 == std::string ("wrnMpsSplitRanVector"))){ return (int)71; }else {}if ((_7338 == std::string ("wrnMpsSplitBouVector"))){ return (int)72; }else {}if ((_7338 == std::string ("wrnLpOldQuadFormat"))){ return (int)80; }else {}if ((_7338 == std::string ("wrnLpDropVariable"))){ return (int)85; }else {}if ((_7338 == std::string ("wrnNzInUprTri"))){ return (int)200; }else {}if ((_7338 == std::string ("wrnDroppedNzQobj"))){ return (int)201; }else {}if ((_7338 == std::string ("wrnIgnoreInteger"))){ return (int)250; }else {}if ((_7338 == std::string ("wrnNoGlobalOptimizer"))){ return (int)251; }else {}if ((_7338 == std::string ("wrnMioInfeasibleFinal"))){ return (int)270; }else {}if ((_7338 == std::string ("wrnSolFilter"))){ return (int)300; }else {}if ((_7338 == std::string ("wrnUndefSolFileName"))){ return (int)350; }else {}if ((_7338 == std::string ("wrnSolFileIgnoredCon"))){ return (int)351; }else {}if ((_7338 == std::string ("wrnSolFileIgnoredVar"))){ return (int)352; }else {}if ((_7338 == std::string ("wrnTooFewBasisVars"))){ return (int)400; }else {}if ((_7338 == std::string ("wrnTooManyBasisVars"))){ return (int)405; }else {}if ((_7338 == std::string ("wrnNoNonlinearFunctionWrite"))){ return (int)450; }else {}if ((_7338 == std::string ("wrnLicenseExpire"))){ return (int)500; }else {}if ((_7338 == std::string ("wrnLicenseServer"))){ return (int)501; }else {}if ((_7338 == std::string ("wrnEmptyName"))){ return (int)502; }else {}if ((_7338 == std::string ("wrnUsingGenericNames"))){ return (int)503; }else {}if ((_7338 == std::string ("wrnLicenseFeatureExpire"))){ return (int)505; }else {}if ((_7338 == std::string ("wrnParamNameDou"))){ return (int)510; }else {}if ((_7338 == std::string ("wrnParamNameInt"))){ return (int)511; }else {}if ((_7338 == std::string ("wrnParamNameStr"))){ return (int)512; }else {}if ((_7338 == std::string ("wrnParamStrValue"))){ return (int)515; }else {}if ((_7338 == std::string ("wrnParamIgnoredCmio"))){ return (int)516; }else {}if ((_7338 == std::string ("wrnZerosInSparseRow"))){ return (int)705; }else {}if ((_7338 == std::string ("wrnZerosInSparseCol"))){ return (int)710; }else {}if ((_7338 == std::string ("wrnIncompleteLinearDependencyCheck"))){ return (int)800; }else {}if ((_7338 == std::string ("wrnEliminatorSpace"))){ return (int)801; }else {}if ((_7338 == std::string ("wrnPresolveOutofspace"))){ return (int)802; }else {}if ((_7338 == std::string ("wrnWriteChangedNames"))){ return (int)803; }else {}if ((_7338 == std::string ("wrnWriteDiscardedCfix"))){ return (int)804; }else {}if ((_7338 == std::string ("wrnConstructSolutionInfeas"))){ return (int)805; }else {}if ((_7338 == std::string ("wrnConstructInvalidSolItg"))){ return (int)807; }else {}if ((_7338 == std::string ("wrnConstructNoSolItg"))){ return (int)810; }else {}if ((_7338 == std::string ("wrnDuplicateConstraintNames"))){ return (int)850; }else {}if ((_7338 == std::string ("wrnDuplicateVariableNames"))){ return (int)851; }else {}if ((_7338 == std::string ("wrnDuplicateBarvariableNames"))){ return (int)852; }else {}if ((_7338 == std::string ("wrnDuplicateConeNames"))){ return (int)853; }else {}if ((_7338 == std::string ("wrnAnaLargeBounds"))){ return (int)900; }else {}if ((_7338 == std::string ("wrnAnaCZero"))){ return (int)901; }else {}if ((_7338 == std::string ("wrnAnaEmptyCols"))){ return (int)902; }else {}if ((_7338 == std::string ("wrnAnaCloseBounds"))){ return (int)903; }else {}if ((_7338 == std::string ("wrnAnaAlmostIntBounds"))){ return (int)904; }else {}if ((_7338 == std::string ("wrnQuadConesWithRootFixedAtZero"))){ return (int)930; }else {}if ((_7338 == std::string ("wrnRquadConesWithRootFixedAtZero"))){ return (int)931; }else {}if ((_7338 == std::string ("wrnNoDualizer"))){ return (int)950; }else {}if ((_7338 == std::string ("wrnSymMatLarge"))){ return (int)960; }else {}if ((_7338 == std::string ("errLicense"))){ return (int)1000; }else {}if ((_7338 == std::string ("errLicenseExpired"))){ return (int)1001; }else {}if ((_7338 == std::string ("errLicenseVersion"))){ return (int)1002; }else {}if ((_7338 == std::string ("errSizeLicense"))){ return (int)1005; }else {}if ((_7338 == std::string ("errProbLicense"))){ return (int)1006; }else {}if ((_7338 == std::string ("errFileLicense"))){ return (int)1007; }else {}if ((_7338 == std::string ("errMissingLicenseFile"))){ return (int)1008; }else {}if ((_7338 == std::string ("errSizeLicenseCon"))){ return (int)1010; }else {}if ((_7338 == std::string ("errSizeLicenseVar"))){ return (int)1011; }else {}if ((_7338 == std::string ("errSizeLicenseIntvar"))){ return (int)1012; }else {}if ((_7338 == std::string ("errOptimizerLicense"))){ return (int)1013; }else {}if ((_7338 == std::string ("errFlexlm"))){ return (int)1014; }else {}if ((_7338 == std::string ("errLicenseServer"))){ return (int)1015; }else {}if ((_7338 == std::string ("errLicenseMax"))){ return (int)1016; }else {}if ((_7338 == std::string ("errLicenseMoseklmDaemon"))){ return (int)1017; }else {}if ((_7338 == std::string ("errLicenseFeature"))){ return (int)1018; }else {}if ((_7338 == std::string ("errPlatformNotLicensed"))){ return (int)1019; }else {}if ((_7338 == std::string ("errLicenseCannotAllocate"))){ return (int)1020; }else {}if ((_7338 == std::string ("errLicenseCannotConnect"))){ return (int)1021; }else {}if ((_7338 == std::string ("errLicenseInvalidHostid"))){ return (int)1025; }else {}if ((_7338 == std::string ("errLicenseServerVersion"))){ return (int)1026; }else {}if ((_7338 == std::string ("errLicenseNoServerSupport"))){ return (int)1027; }else {}if ((_7338 == std::string ("errLicenseNoServerLine"))){ return (int)1028; }else {}if ((_7338 == std::string ("errOpenDl"))){ return (int)1030; }else {}if ((_7338 == std::string ("errOlderDll"))){ return (int)1035; }else {}if ((_7338 == std::string ("errNewerDll"))){ return (int)1036; }else {}if ((_7338 == std::string ("errLinkFileDll"))){ return (int)1040; }else {}if ((_7338 == std::string ("errThreadMutexInit"))){ return (int)1045; }else {}if ((_7338 == std::string ("errThreadMutexLock"))){ return (int)1046; }else {}if ((_7338 == std::string ("errThreadMutexUnlock"))){ return (int)1047; }else {}if ((_7338 == std::string ("errThreadCreate"))){ return (int)1048; }else {}if ((_7338 == std::string ("errThreadCondInit"))){ return (int)1049; }else {}if ((_7338 == std::string ("errUnknown"))){ return (int)1050; }else {}if ((_7338 == std::string ("errSpace"))){ return (int)1051; }else {}if ((_7338 == std::string ("errFileOpen"))){ return (int)1052; }else {}if ((_7338 == std::string ("errFileRead"))){ return (int)1053; }else {}if ((_7338 == std::string ("errFileWrite"))){ return (int)1054; }else {}if ((_7338 == std::string ("errDataFileExt"))){ return (int)1055; }else {}if ((_7338 == std::string ("errInvalidFileName"))){ return (int)1056; }else {}if ((_7338 == std::string ("errInvalidSolFileName"))){ return (int)1057; }else {}if ((_7338 == std::string ("errEndOfFile"))){ return (int)1059; }else {}if ((_7338 == std::string ("errNullEnv"))){ return (int)1060; }else {}if ((_7338 == std::string ("errNullTask"))){ return (int)1061; }else {}if ((_7338 == std::string ("errInvalidStream"))){ return (int)1062; }else {}if ((_7338 == std::string ("errNoInitEnv"))){ return (int)1063; }else {}if ((_7338 == std::string ("errInvalidTask"))){ return (int)1064; }else {}if ((_7338 == std::string ("errNullPointer"))){ return (int)1065; }else {}if ((_7338 == std::string ("errLivingTasks"))){ return (int)1066; }else {}if ((_7338 == std::string ("errBlankName"))){ return (int)1070; }else {}if ((_7338 == std::string ("errDupName"))){ return (int)1071; }else {}if ((_7338 == std::string ("errInvalidObjName"))){ return (int)1075; }else {}if ((_7338 == std::string ("errInvalidConName"))){ return (int)1076; }else {}if ((_7338 == std::string ("errInvalidVarName"))){ return (int)1077; }else {}if ((_7338 == std::string ("errInvalidConeName"))){ return (int)1078; }else {}if ((_7338 == std::string ("errInvalidBarvarName"))){ return (int)1079; }else {}if ((_7338 == std::string ("errSpaceLeaking"))){ return (int)1080; }else {}if ((_7338 == std::string ("errSpaceNoInfo"))){ return (int)1081; }else {}if ((_7338 == std::string ("errReadFormat"))){ return (int)1090; }else {}if ((_7338 == std::string ("errMpsFile"))){ return (int)1100; }else {}if ((_7338 == std::string ("errMpsInvField"))){ return (int)1101; }else {}if ((_7338 == std::string ("errMpsInvMarker"))){ return (int)1102; }else {}if ((_7338 == std::string ("errMpsNullConName"))){ return (int)1103; }else {}if ((_7338 == std::string ("errMpsNullVarName"))){ return (int)1104; }else {}if ((_7338 == std::string ("errMpsUndefConName"))){ return (int)1105; }else {}if ((_7338 == std::string ("errMpsUndefVarName"))){ return (int)1106; }else {}if ((_7338 == std::string ("errMpsInvConKey"))){ return (int)1107; }else {}if ((_7338 == std::string ("errMpsInvBoundKey"))){ return (int)1108; }else {}if ((_7338 == std::string ("errMpsInvSecName"))){ return (int)1109; }else {}if ((_7338 == std::string ("errMpsNoObjective"))){ return (int)1110; }else {}if ((_7338 == std::string ("errMpsSplittedVar"))){ return (int)1111; }else {}if ((_7338 == std::string ("errMpsMulConName"))){ return (int)1112; }else {}if ((_7338 == std::string ("errMpsMulQsec"))){ return (int)1113; }else {}if ((_7338 == std::string ("errMpsMulQobj"))){ return (int)1114; }else {}if ((_7338 == std::string ("errMpsInvSecOrder"))){ return (int)1115; }else {}if ((_7338 == std::string ("errMpsMulCsec"))){ return (int)1116; }else {}if ((_7338 == std::string ("errMpsConeType"))){ return (int)1117; }else {}if ((_7338 == std::string ("errMpsConeOverlap"))){ return (int)1118; }else {}if ((_7338 == std::string ("errMpsConeRepeat"))){ return (int)1119; }else {}if ((_7338 == std::string ("errMpsNonSymmetricQ"))){ return (int)1120; }else {}if ((_7338 == std::string ("errMpsDuplicateQElement"))){ return (int)1121; }else {}if ((_7338 == std::string ("errMpsInvalidObjsense"))){ return (int)1122; }else {}if ((_7338 == std::string ("errMpsTabInField2"))){ return (int)1125; }else {}if ((_7338 == std::string ("errMpsTabInField3"))){ return (int)1126; }else {}if ((_7338 == std::string ("errMpsTabInField5"))){ return (int)1127; }else {}if ((_7338 == std::string ("errMpsInvalidObjName"))){ return (int)1128; }else {}if ((_7338 == std::string ("errLpIncompatible"))){ return (int)1150; }else {}if ((_7338 == std::string ("errLpEmpty"))){ return (int)1151; }else {}if ((_7338 == std::string ("errLpDupSlackName"))){ return (int)1152; }else {}if ((_7338 == std::string ("errWriteMpsInvalidName"))){ return (int)1153; }else {}if ((_7338 == std::string ("errLpInvalidVarName"))){ return (int)1154; }else {}if ((_7338 == std::string ("errLpFreeConstraint"))){ return (int)1155; }else {}if ((_7338 == std::string ("errWriteOpfInvalidVarName"))){ return (int)1156; }else {}if ((_7338 == std::string ("errLpFileFormat"))){ return (int)1157; }else {}if ((_7338 == std::string ("errWriteLpFormat"))){ return (int)1158; }else {}if ((_7338 == std::string ("errReadLpMissingEndTag"))){ return (int)1159; }else {}if ((_7338 == std::string ("errLpFormat"))){ return (int)1160; }else {}if ((_7338 == std::string ("errWriteLpNonUniqueName"))){ return (int)1161; }else {}if ((_7338 == std::string ("errReadLpNonexistingName"))){ return (int)1162; }else {}if ((_7338 == std::string ("errLpWriteConicProblem"))){ return (int)1163; }else {}if ((_7338 == std::string ("errLpWriteGecoProblem"))){ return (int)1164; }else {}if ((_7338 == std::string ("errWritingFile"))){ return (int)1166; }else {}if ((_7338 == std::string ("errOpfFormat"))){ return (int)1168; }else {}if ((_7338 == std::string ("errOpfNewVariable"))){ return (int)1169; }else {}if ((_7338 == std::string ("errInvalidNameInSolFile"))){ return (int)1170; }else {}if ((_7338 == std::string ("errLpInvalidConName"))){ return (int)1171; }else {}if ((_7338 == std::string ("errOpfPrematureEof"))){ return (int)1172; }else {}if ((_7338 == std::string ("errJsonSyntax"))){ return (int)1175; }else {}if ((_7338 == std::string ("errJsonString"))){ return (int)1176; }else {}if ((_7338 == std::string ("errJsonNumberOverflow"))){ return (int)1177; }else {}if ((_7338 == std::string ("errJsonFormat"))){ return (int)1178; }else {}if ((_7338 == std::string ("errJsonData"))){ return (int)1179; }else {}if ((_7338 == std::string ("errJsonMissingData"))){ return (int)1180; }else {}if ((_7338 == std::string ("errArgumentLenneq"))){ return (int)1197; }else {}if ((_7338 == std::string ("errArgumentType"))){ return (int)1198; }else {}if ((_7338 == std::string ("errNrArguments"))){ return (int)1199; }else {}if ((_7338 == std::string ("errInArgument"))){ return (int)1200; }else {}if ((_7338 == std::string ("errArgumentDimension"))){ return (int)1201; }else {}if ((_7338 == std::string ("errIndexIsTooSmall"))){ return (int)1203; }else {}if ((_7338 == std::string ("errIndexIsTooLarge"))){ return (int)1204; }else {}if ((_7338 == std::string ("errParamName"))){ return (int)1205; }else {}if ((_7338 == std::string ("errParamNameDou"))){ return (int)1206; }else {}if ((_7338 == std::string ("errParamNameInt"))){ return (int)1207; }else {}if ((_7338 == std::string ("errParamNameStr"))){ return (int)1208; }else {}if ((_7338 == std::string ("errParamIndex"))){ return (int)1210; }else {}if ((_7338 == std::string ("errParamIsTooLarge"))){ return (int)1215; }else {}if ((_7338 == std::string ("errParamIsTooSmall"))){ return (int)1216; }else {}if ((_7338 == std::string ("errParamValueStr"))){ return (int)1217; }else {}if ((_7338 == std::string ("errParamType"))){ return (int)1218; }else {}if ((_7338 == std::string ("errInfDouIndex"))){ return (int)1219; }else {}if ((_7338 == std::string ("errInfIntIndex"))){ return (int)1220; }else {}if ((_7338 == std::string ("errIndexArrIsTooSmall"))){ return (int)1221; }else {}if ((_7338 == std::string ("errIndexArrIsTooLarge"))){ return (int)1222; }else {}if ((_7338 == std::string ("errInfLintIndex"))){ return (int)1225; }else {}if ((_7338 == std::string ("errArgIsTooSmall"))){ return (int)1226; }else {}if ((_7338 == std::string ("errArgIsTooLarge"))){ return (int)1227; }else {}if ((_7338 == std::string ("errInvalidWhichsol"))){ return (int)1228; }else {}if ((_7338 == std::string ("errInfDouName"))){ return (int)1230; }else {}if ((_7338 == std::string ("errInfIntName"))){ return (int)1231; }else {}if ((_7338 == std::string ("errInfType"))){ return (int)1232; }else {}if ((_7338 == std::string ("errInfLintName"))){ return (int)1234; }else {}if ((_7338 == std::string ("errIndex"))){ return (int)1235; }else {}if ((_7338 == std::string ("errWhichsol"))){ return (int)1236; }else {}if ((_7338 == std::string ("errSolitem"))){ return (int)1237; }else {}if ((_7338 == std::string ("errWhichitemNotAllowed"))){ return (int)1238; }else {}if ((_7338 == std::string ("errMaxnumcon"))){ return (int)1240; }else {}if ((_7338 == std::string ("errMaxnumvar"))){ return (int)1241; }else {}if ((_7338 == std::string ("errMaxnumbarvar"))){ return (int)1242; }else {}if ((_7338 == std::string ("errMaxnumqnz"))){ return (int)1243; }else {}if ((_7338 == std::string ("errTooSmallMaxNumNz"))){ return (int)1245; }else {}if ((_7338 == std::string ("errInvalidIdx"))){ return (int)1246; }else {}if ((_7338 == std::string ("errInvalidMaxNum"))){ return (int)1247; }else {}if ((_7338 == std::string ("errNumconlim"))){ return (int)1250; }else {}if ((_7338 == std::string ("errNumvarlim"))){ return (int)1251; }else {}if ((_7338 == std::string ("errTooSmallMaxnumanz"))){ return (int)1252; }else {}if ((_7338 == std::string ("errInvAptre"))){ return (int)1253; }else {}if ((_7338 == std::string ("errMulAElement"))){ return (int)1254; }else {}if ((_7338 == std::string ("errInvBk"))){ return (int)1255; }else {}if ((_7338 == std::string ("errInvBkc"))){ return (int)1256; }else {}if ((_7338 == std::string ("errInvBkx"))){ return (int)1257; }else {}if ((_7338 == std::string ("errInvVarType"))){ return (int)1258; }else {}if ((_7338 == std::string ("errSolverProbtype"))){ return (int)1259; }else {}if ((_7338 == std::string ("errObjectiveRange"))){ return (int)1260; }else {}if ((_7338 == std::string ("errFirst"))){ return (int)1261; }else {}if ((_7338 == std::string ("errLast"))){ return (int)1262; }else {}if ((_7338 == std::string ("errNegativeSurplus"))){ return (int)1263; }else {}if ((_7338 == std::string ("errNegativeAppend"))){ return (int)1264; }else {}if ((_7338 == std::string ("errUndefSolution"))){ return (int)1265; }else {}if ((_7338 == std::string ("errBasis"))){ return (int)1266; }else {}if ((_7338 == std::string ("errInvSkc"))){ return (int)1267; }else {}if ((_7338 == std::string ("errInvSkx"))){ return (int)1268; }else {}if ((_7338 == std::string ("errInvSkn"))){ return (int)1274; }else {}if ((_7338 == std::string ("errInvSkStr"))){ return (int)1269; }else {}if ((_7338 == std::string ("errInvSk"))){ return (int)1270; }else {}if ((_7338 == std::string ("errInvConeTypeStr"))){ return (int)1271; }else {}if ((_7338 == std::string ("errInvConeType"))){ return (int)1272; }else {}if ((_7338 == std::string ("errInvalidSurplus"))){ return (int)1275; }else {}if ((_7338 == std::string ("errInvNameItem"))){ return (int)1280; }else {}if ((_7338 == std::string ("errProItem"))){ return (int)1281; }else {}if ((_7338 == std::string ("errInvalidFormatType"))){ return (int)1283; }else {}if ((_7338 == std::string ("errFirsti"))){ return (int)1285; }else {}if ((_7338 == std::string ("errLasti"))){ return (int)1286; }else {}if ((_7338 == std::string ("errFirstj"))){ return (int)1287; }else {}if ((_7338 == std::string ("errLastj"))){ return (int)1288; }else {}if ((_7338 == std::string ("errMaxLenIsTooSmall"))){ return (int)1289; }else {}if ((_7338 == std::string ("errNonlinearEquality"))){ return (int)1290; }else {}if ((_7338 == std::string ("errNonconvex"))){ return (int)1291; }else {}if ((_7338 == std::string ("errNonlinearRanged"))){ return (int)1292; }else {}if ((_7338 == std::string ("errConQNotPsd"))){ return (int)1293; }else {}if ((_7338 == std::string ("errConQNotNsd"))){ return (int)1294; }else {}if ((_7338 == std::string ("errObjQNotPsd"))){ return (int)1295; }else {}if ((_7338 == std::string ("errObjQNotNsd"))){ return (int)1296; }else {}if ((_7338 == std::string ("errArgumentPermArray"))){ return (int)1299; }else {}if ((_7338 == std::string ("errConeIndex"))){ return (int)1300; }else {}if ((_7338 == std::string ("errConeSize"))){ return (int)1301; }else {}if ((_7338 == std::string ("errConeOverlap"))){ return (int)1302; }else {}if ((_7338 == std::string ("errConeRepVar"))){ return (int)1303; }else {}if ((_7338 == std::string ("errMaxnumcone"))){ return (int)1304; }else {}if ((_7338 == std::string ("errConeType"))){ return (int)1305; }else {}if ((_7338 == std::string ("errConeTypeStr"))){ return (int)1306; }else {}if ((_7338 == std::string ("errConeOverlapAppend"))){ return (int)1307; }else {}if ((_7338 == std::string ("errRemoveConeVariable"))){ return (int)1310; }else {}if ((_7338 == std::string ("errSolFileInvalidNumber"))){ return (int)1350; }else {}if ((_7338 == std::string ("errHugeC"))){ return (int)1375; }else {}if ((_7338 == std::string ("errHugeAij"))){ return (int)1380; }else {}if ((_7338 == std::string ("errDuplicateAij"))){ return (int)1385; }else {}if ((_7338 == std::string ("errLowerBoundIsANan"))){ return (int)1390; }else {}if ((_7338 == std::string ("errUpperBoundIsANan"))){ return (int)1391; }else {}if ((_7338 == std::string ("errInfiniteBound"))){ return (int)1400; }else {}if ((_7338 == std::string ("errInvQobjSubi"))){ return (int)1401; }else {}if ((_7338 == std::string ("errInvQobjSubj"))){ return (int)1402; }else {}if ((_7338 == std::string ("errInvQobjVal"))){ return (int)1403; }else {}if ((_7338 == std::string ("errInvQconSubk"))){ return (int)1404; }else {}if ((_7338 == std::string ("errInvQconSubi"))){ return (int)1405; }else {}if ((_7338 == std::string ("errInvQconSubj"))){ return (int)1406; }else {}if ((_7338 == std::string ("errInvQconVal"))){ return (int)1407; }else {}if ((_7338 == std::string ("errQconSubiTooSmall"))){ return (int)1408; }else {}if ((_7338 == std::string ("errQconSubiTooLarge"))){ return (int)1409; }else {}if ((_7338 == std::string ("errQobjUpperTriangle"))){ return (int)1415; }else {}if ((_7338 == std::string ("errQconUpperTriangle"))){ return (int)1417; }else {}if ((_7338 == std::string ("errFixedBoundValues"))){ return (int)1425; }else {}if ((_7338 == std::string ("errNonlinearFunctionsNotAllowed"))){ return (int)1428; }else {}if ((_7338 == std::string ("errUserFuncRet"))){ return (int)1430; }else {}if ((_7338 == std::string ("errUserFuncRetData"))){ return (int)1431; }else {}if ((_7338 == std::string ("errUserNloFunc"))){ return (int)1432; }else {}if ((_7338 == std::string ("errUserNloEval"))){ return (int)1433; }else {}if ((_7338 == std::string ("errUserNloEvalHessubi"))){ return (int)1440; }else {}if ((_7338 == std::string ("errUserNloEvalHessubj"))){ return (int)1441; }else {}if ((_7338 == std::string ("errInvalidObjectiveSense"))){ return (int)1445; }else {}if ((_7338 == std::string ("errUndefinedObjectiveSense"))){ return (int)1446; }else {}if ((_7338 == std::string ("errYIsUndefined"))){ return (int)1449; }else {}if ((_7338 == std::string ("errNanInDoubleData"))){ return (int)1450; }else {}if ((_7338 == std::string ("errNanInBlc"))){ return (int)1461; }else {}if ((_7338 == std::string ("errNanInBuc"))){ return (int)1462; }else {}if ((_7338 == std::string ("errNanInC"))){ return (int)1470; }else {}if ((_7338 == std::string ("errNanInBlx"))){ return (int)1471; }else {}if ((_7338 == std::string ("errNanInBux"))){ return (int)1472; }else {}if ((_7338 == std::string ("errInvalidAij"))){ return (int)1473; }else {}if ((_7338 == std::string ("errSymMatInvalid"))){ return (int)1480; }else {}if ((_7338 == std::string ("errSymMatHuge"))){ return (int)1482; }else {}if ((_7338 == std::string ("errInvProblem"))){ return (int)1500; }else {}if ((_7338 == std::string ("errMixedConicAndNl"))){ return (int)1501; }else {}if ((_7338 == std::string ("errGlobalInvConicProblem"))){ return (int)1503; }else {}if ((_7338 == std::string ("errInvOptimizer"))){ return (int)1550; }else {}if ((_7338 == std::string ("errMioNoOptimizer"))){ return (int)1551; }else {}if ((_7338 == std::string ("errNoOptimizerVarType"))){ return (int)1552; }else {}if ((_7338 == std::string ("errFinalSolution"))){ return (int)1560; }else {}if ((_7338 == std::string ("errPostsolve"))){ return (int)1580; }else {}if ((_7338 == std::string ("errOverflow"))){ return (int)1590; }else {}if ((_7338 == std::string ("errNoBasisSol"))){ return (int)1600; }else {}if ((_7338 == std::string ("errBasisFactor"))){ return (int)1610; }else {}if ((_7338 == std::string ("errBasisSingular"))){ return (int)1615; }else {}if ((_7338 == std::string ("errFactor"))){ return (int)1650; }else {}if ((_7338 == std::string ("errFeasrepairCannotRelax"))){ return (int)1700; }else {}if ((_7338 == std::string ("errFeasrepairSolvingRelaxed"))){ return (int)1701; }else {}if ((_7338 == std::string ("errFeasrepairInconsistentBound"))){ return (int)1702; }else {}if ((_7338 == std::string ("errRepairInvalidProblem"))){ return (int)1710; }else {}if ((_7338 == std::string ("errRepairOptimizationFailed"))){ return (int)1711; }else {}if ((_7338 == std::string ("errNameMaxLen"))){ return (int)1750; }else {}if ((_7338 == std::string ("errNameIsNull"))){ return (int)1760; }else {}if ((_7338 == std::string ("errInvalidCompression"))){ return (int)1800; }else {}if ((_7338 == std::string ("errInvalidIomode"))){ return (int)1801; }else {}if ((_7338 == std::string ("errNoPrimalInfeasCer"))){ return (int)2000; }else {}if ((_7338 == std::string ("errNoDualInfeasCer"))){ return (int)2001; }else {}if ((_7338 == std::string ("errNoSolutionInCallback"))){ return (int)2500; }else {}if ((_7338 == std::string ("errInvMarki"))){ return (int)2501; }else {}if ((_7338 == std::string ("errInvMarkj"))){ return (int)2502; }else {}if ((_7338 == std::string ("errInvNumi"))){ return (int)2503; }else {}if ((_7338 == std::string ("errInvNumj"))){ return (int)2504; }else {}if ((_7338 == std::string ("errCannotCloneNl"))){ return (int)2505; }else {}if ((_7338 == std::string ("errCannotHandleNl"))){ return (int)2506; }else {}if ((_7338 == std::string ("errInvalidAccmode"))){ return (int)2520; }else {}if ((_7338 == std::string ("errTaskIncompatible"))){ return (int)2560; }else {}if ((_7338 == std::string ("errTaskInvalid"))){ return (int)2561; }else {}if ((_7338 == std::string ("errTaskWrite"))){ return (int)2562; }else {}if ((_7338 == std::string ("errLuMaxNumTries"))){ return (int)2800; }else {}if ((_7338 == std::string ("errInvalidUtf8"))){ return (int)2900; }else {}if ((_7338 == std::string ("errInvalidWchar"))){ return (int)2901; }else {}if ((_7338 == std::string ("errNoDualForItgSol"))){ return (int)2950; }else {}if ((_7338 == std::string ("errNoSnxForBasSol"))){ return (int)2953; }else {}if ((_7338 == std::string ("errInternal"))){ return (int)3000; }else {}if ((_7338 == std::string ("errApiArrayTooSmall"))){ return (int)3001; }else {}if ((_7338 == std::string ("errApiCbConnect"))){ return (int)3002; }else {}if ((_7338 == std::string ("errApiFatalError"))){ return (int)3005; }else {}if ((_7338 == std::string ("errApiInternal"))){ return (int)3999; }else {}if ((_7338 == std::string ("errSenFormat"))){ return (int)3050; }else {}if ((_7338 == std::string ("errSenUndefName"))){ return (int)3051; }else {}if ((_7338 == std::string ("errSenIndexRange"))){ return (int)3052; }else {}if ((_7338 == std::string ("errSenBoundInvalidUp"))){ return (int)3053; }else {}if ((_7338 == std::string ("errSenBoundInvalidLo"))){ return (int)3054; }else {}if ((_7338 == std::string ("errSenIndexInvalid"))){ return (int)3055; }else {}if ((_7338 == std::string ("errSenInvalidRegexp"))){ return (int)3056; }else {}if ((_7338 == std::string ("errSenSolutionStatus"))){ return (int)3057; }else {}if ((_7338 == std::string ("errSenNumerical"))){ return (int)3058; }else {}if ((_7338 == std::string ("errSenUnhandledProblemType"))){ return (int)3080; }else {}if ((_7338 == std::string ("errUnbStepSize"))){ return (int)3100; }else {}if ((_7338 == std::string ("errIdenticalTasks"))){ return (int)3101; }else {}if ((_7338 == std::string ("errAdInvalidCodelist"))){ return (int)3102; }else {}if ((_7338 == std::string ("errInternalTestFailed"))){ return (int)3500; }else {}if ((_7338 == std::string ("errXmlInvalidProblemType"))){ return (int)3600; }else {}if ((_7338 == std::string ("errInvalidAmplStub"))){ return (int)3700; }else {}if ((_7338 == std::string ("errInt64ToInt32Cast"))){ return (int)3800; }else {}if ((_7338 == std::string ("errSizeLicenseNumcores"))){ return (int)3900; }else {}if ((_7338 == std::string ("errInfeasUndefined"))){ return (int)3910; }else {}if ((_7338 == std::string ("errNoBarxForSolution"))){ return (int)3915; }else {}if ((_7338 == std::string ("errNoBarsForSolution"))){ return (int)3916; }else {}if ((_7338 == std::string ("errBarVarDim"))){ return (int)3920; }else {}if ((_7338 == std::string ("errSymMatInvalidRowIndex"))){ return (int)3940; }else {}if ((_7338 == std::string ("errSymMatInvalidColIndex"))){ return (int)3941; }else {}if ((_7338 == std::string ("errSymMatNotLowerTringular"))){ return (int)3942; }else {}if ((_7338 == std::string ("errSymMatInvalidValue"))){ return (int)3943; }else {}if ((_7338 == std::string ("errSymMatDuplicate"))){ return (int)3944; }else {}if ((_7338 == std::string ("errInvalidSymMatDim"))){ return (int)3950; }else {}if ((_7338 == std::string ("errInvalidFileFormatForSymMat"))){ return (int)4000; }else {}if ((_7338 == std::string ("errInvalidFileFormatForCones"))){ return (int)4005; }else {}if ((_7338 == std::string ("errInvalidFileFormatForGeneralNl"))){ return (int)4010; }else {}if ((_7338 == std::string ("errDuplicateConstraintNames"))){ return (int)4500; }else {}if ((_7338 == std::string ("errDuplicateVariableNames"))){ return (int)4501; }else {}if ((_7338 == std::string ("errDuplicateBarvariableNames"))){ return (int)4502; }else {}if ((_7338 == std::string ("errDuplicateConeNames"))){ return (int)4503; }else {}if ((_7338 == std::string ("errNonUniqueArray"))){ return (int)5000; }else {}if ((_7338 == std::string ("errArgumentIsTooLarge"))){ return (int)5005; }else {}if ((_7338 == std::string ("errMioInternal"))){ return (int)5010; }else {}if ((_7338 == std::string ("errInvalidProblemType"))){ return (int)6000; }else {}if ((_7338 == std::string ("errUnhandledSolutionStatus"))){ return (int)6010; }else {}if ((_7338 == std::string ("errUpperTriangle"))){ return (int)6020; }else {}if ((_7338 == std::string ("errLauSingularMatrix"))){ return (int)7000; }else {}if ((_7338 == std::string ("errLauNotPositiveDefinite"))){ return (int)7001; }else {}if ((_7338 == std::string ("errLauInvalidLowerTriangularMatrix"))){ return (int)7002; }else {}if ((_7338 == std::string ("errLauUnknown"))){ return (int)7005; }else {}if ((_7338 == std::string ("errLauArgM"))){ return (int)7010; }else {}if ((_7338 == std::string ("errLauArgN"))){ return (int)7011; }else {}if ((_7338 == std::string ("errLauArgK"))){ return (int)7012; }else {}if ((_7338 == std::string ("errLauArgTransa"))){ return (int)7015; }else {}if ((_7338 == std::string ("errLauArgTransb"))){ return (int)7016; }else {}if ((_7338 == std::string ("errLauArgUplo"))){ return (int)7017; }else {}if ((_7338 == std::string ("errLauArgTrans"))){ return (int)7018; }else {}if ((_7338 == std::string ("errLauInvalidSparseSymmetricMatrix"))){ return (int)7019; }else {}if ((_7338 == std::string ("errCbfParse"))){ return (int)7100; }else {}if ((_7338 == std::string ("errCbfObjSense"))){ return (int)7101; }else {}if ((_7338 == std::string ("errCbfNoVariables"))){ return (int)7102; }else {}if ((_7338 == std::string ("errCbfTooManyConstraints"))){ return (int)7103; }else {}if ((_7338 == std::string ("errCbfTooManyVariables"))){ return (int)7104; }else {}if ((_7338 == std::string ("errCbfNoVersionSpecified"))){ return (int)7105; }else {}if ((_7338 == std::string ("errCbfSyntax"))){ return (int)7106; }else {}if ((_7338 == std::string ("errCbfDuplicateObj"))){ return (int)7107; }else {}if ((_7338 == std::string ("errCbfDuplicateCon"))){ return (int)7108; }else {}if ((_7338 == std::string ("errCbfDuplicateVar"))){ return (int)7109; }else {}if ((_7338 == std::string ("errCbfDuplicateInt"))){ return (int)7110; }else {}if ((_7338 == std::string ("errCbfInvalidVarType"))){ return (int)7111; }else {}if ((_7338 == std::string ("errCbfInvalidConType"))){ return (int)7112; }else {}if ((_7338 == std::string ("errCbfInvalidDomainDimension"))){ return (int)7113; }else {}if ((_7338 == std::string ("errCbfDuplicateObjacoord"))){ return (int)7114; }else {}if ((_7338 == std::string ("errCbfDuplicateBcoord"))){ return (int)7115; }else {}if ((_7338 == std::string ("errCbfDuplicateAcoord"))){ return (int)7116; }else {}if ((_7338 == std::string ("errCbfTooFewVariables"))){ return (int)7117; }else {}if ((_7338 == std::string ("errCbfTooFewConstraints"))){ return (int)7118; }else {}if ((_7338 == std::string ("errCbfTooFewInts"))){ return (int)7119; }else {}if ((_7338 == std::string ("errCbfTooManyInts"))){ return (int)7120; }else {}if ((_7338 == std::string ("errCbfInvalidIntIndex"))){ return (int)7121; }else {}if ((_7338 == std::string ("errCbfUnsupported"))){ return (int)7122; }else {}if ((_7338 == std::string ("errCbfDuplicatePsdvar"))){ return (int)7123; }else {}if ((_7338 == std::string ("errCbfInvalidPsdvarDimension"))){ return (int)7124; }else {}if ((_7338 == std::string ("errCbfTooFewPsdvar"))){ return (int)7125; }else {}if ((_7338 == std::string ("errMioInvalidRootOptimizer"))){ return (int)7130; }else {}if ((_7338 == std::string ("errMioInvalidNodeOptimizer"))){ return (int)7131; }else {}if ((_7338 == std::string ("errToconicConstrQNotPsd"))){ return (int)7150; }else {}if ((_7338 == std::string ("errToconicConstraintFx"))){ return (int)7151; }else {}if ((_7338 == std::string ("errToconicConstraintRa"))){ return (int)7152; }else {}if ((_7338 == std::string ("errToconicConstrNotConic"))){ return (int)7153; }else {}if ((_7338 == std::string ("errToconicObjectiveNotPsd"))){ return (int)7155; }else {}if ((_7338 == std::string ("errServerConnect"))){ return (int)8000; }else {}if ((_7338 == std::string ("errServerProtocol"))){ return (int)8001; }else {}if ((_7338 == std::string ("errServerStatus"))){ return (int)8002; }else {}if ((_7338 == std::string ("errServerToken"))){ return (int)8003; }else {}if ((_7338 == std::string ("trmMaxIterations"))){ return (int)10000; }else {}if ((_7338 == std::string ("trmMaxTime"))){ return (int)10001; }else {}if ((_7338 == std::string ("trmObjectiveRange"))){ return (int)10002; }else {}if ((_7338 == std::string ("trmMioNearRelGap"))){ return (int)10003; }else {}if ((_7338 == std::string ("trmMioNearAbsGap"))){ return (int)10004; }else {}if ((_7338 == std::string ("trmMioNumRelaxs"))){ return (int)10008; }else {}if ((_7338 == std::string ("trmMioNumBranches"))){ return (int)10009; }else {}if ((_7338 == std::string ("trmNumMaxNumIntSolutions"))){ return (int)10015; }else {}if ((_7338 == std::string ("trmStall"))){ return (int)10006; }else {}if ((_7338 == std::string ("trmUserCallback"))){ return (int)10007; }else {}if ((_7338 == std::string ("trmMaxNumSetbacks"))){ return (int)10020; }else {}if ((_7338 == std::string ("trmNumericalProblem"))){ return (int)10025; }else {}if ((_7338 == std::string ("trmInternal"))){ return (int)10030; }else {}if ((_7338 == std::string ("trmInternalStop"))){ return (int)10031; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_scalingtype_value( const std::string & _7339){ if ((_7339 == std::string ("free"))){ return (int)0; }else {}if ((_7339 == std::string ("none"))){ return (int)1; }else {}if ((_7339 == std::string ("moderate"))){ return (int)2; }else {}if ((_7339 == std::string ("aggressive"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_prosta_value( const std::string & _7340){ if ((_7340 == std::string ("unknown"))){ return (int)0; }else {}if ((_7340 == std::string ("primAndDualFeas"))){ return (int)1; }else {}if ((_7340 == std::string ("primFeas"))){ return (int)2; }else {}if ((_7340 == std::string ("dualFeas"))){ return (int)3; }else {}if ((_7340 == std::string ("nearPrimAndDualFeas"))){ return (int)8; }else {}if ((_7340 == std::string ("nearPrimFeas"))){ return (int)9; }else {}if ((_7340 == std::string ("nearDualFeas"))){ return (int)10; }else {}if ((_7340 == std::string ("primInfeas"))){ return (int)4; }else {}if ((_7340 == std::string ("dualInfeas"))){ return (int)5; }else {}if ((_7340 == std::string ("primAndDualInfeas"))){ return (int)6; }else {}if ((_7340 == std::string ("illPosed"))){ return (int)7; }else {}if ((_7340 == std::string ("primInfeasOrUnbounded"))){ return (int)11; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_rescodetype_value( const std::string & _7341){ if ((_7341 == std::string ("ok"))){ return (int)0; }else {}if ((_7341 == std::string ("wrn"))){ return (int)1; }else {}if ((_7341 == std::string ("trm"))){ return (int)2; }else {}if ((_7341 == std::string ("err"))){ return (int)3; }else {}if ((_7341 == std::string ("unk"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_parametertype_value( const std::string & _7342){ if ((_7342 == std::string ("invalidType"))){ return (int)0; }else {}if ((_7342 == std::string ("douType"))){ return (int)1; }else {}if ((_7342 == std::string ("intType"))){ return (int)2; }else {}if ((_7342 == std::string ("strType"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_dinfitem_value( const std::string & _7343){ if ((_7343 == std::string ("biTime"))){ return (int)5; }else {}if ((_7343 == std::string ("biPrimalTime"))){ return (int)4; }else {}if ((_7343 == std::string ("biDualTime"))){ return (int)3; }else {}if ((_7343 == std::string ("biCleanTime"))){ return (int)2; }else {}if ((_7343 == std::string ("biCleanPrimalTime"))){ return (int)1; }else {}if ((_7343 == std::string ("biCleanDualTime"))){ return (int)0; }else {}if ((_7343 == std::string ("intpntTime"))){ return (int)13; }else {}if ((_7343 == std::string ("intpntOrderTime"))){ return (int)10; }else {}if ((_7343 == std::string ("intpntPrimalObj"))){ return (int)12; }else {}if ((_7343 == std::string ("intpntDualObj"))){ return (int)7; }else {}if ((_7343 == std::string ("intpntPrimalFeas"))){ return (int)11; }else {}if ((_7343 == std::string ("intpntDualFeas"))){ return (int)6; }else {}if ((_7343 == std::string ("intpntOptStatus"))){ return (int)9; }else {}if ((_7343 == std::string ("simTime"))){ return (int)47; }else {}if ((_7343 == std::string ("simPrimalTime"))){ return (int)46; }else {}if ((_7343 == std::string ("simDualTime"))){ return (int)43; }else {}if ((_7343 == std::string ("simObj"))){ return (int)45; }else {}if ((_7343 == std::string ("simFeas"))){ return (int)44; }else {}if ((_7343 == std::string ("mioTime"))){ return (int)31; }else {}if ((_7343 == std::string ("mioRootPresolveTime"))){ return (int)30; }else {}if ((_7343 == std::string ("mioRootOptimizerTime"))){ return (int)29; }else {}if ((_7343 == std::string ("mioOptimizerTime"))){ return (int)26; }else {}if ((_7343 == std::string ("mioHeuristicTime"))){ return (int)19; }else {}if ((_7343 == std::string ("toConicTime"))){ return (int)91; }else {}if ((_7343 == std::string ("mioConstructSolutionObj"))){ return (int)16; }else {}if ((_7343 == std::string ("mioObjInt"))){ return (int)24; }else {}if ((_7343 == std::string ("mioObjBound"))){ return (int)23; }else {}if ((_7343 == std::string ("mioObjRelGap"))){ return (int)25; }else {}if ((_7343 == std::string ("mioObjAbsGap"))){ return (int)22; }else {}if ((_7343 == std::string ("mioUserObjCut"))){ return (int)32; }else {}if ((_7343 == std::string ("mioCmirSeparationTime"))){ return (int)15; }else {}if ((_7343 == std::string ("mioCliqueSeparationTime"))){ return (int)14; }else {}if ((_7343 == std::string ("mioKnapsackCoverSeparationTime"))){ return (int)21; }else {}if ((_7343 == std::string ("mioGmiSeparationTime"))){ return (int)18; }else {}if ((_7343 == std::string ("mioImpliedBoundTime"))){ return (int)20; }else {}if ((_7343 == std::string ("mioRootCutgenTime"))){ return (int)28; }else {}if ((_7343 == std::string ("mioProbingTime"))){ return (int)27; }else {}if ((_7343 == std::string ("optimizerTime"))){ return (int)33; }else {}if ((_7343 == std::string ("presolveTime"))){ return (int)36; }else {}if ((_7343 == std::string ("mioDualBoundAfterPresolve"))){ return (int)17; }else {}if ((_7343 == std::string ("presolveEliTime"))){ return (int)34; }else {}if ((_7343 == std::string ("presolveLindepTime"))){ return (int)35; }else {}if ((_7343 == std::string ("rdTime"))){ return (int)42; }else {}if ((_7343 == std::string ("solItrPrimalObj"))){ return (int)86; }else {}if ((_7343 == std::string ("solItrPviolcon"))){ return (int)88; }else {}if ((_7343 == std::string ("solItrPviolvar"))){ return (int)90; }else {}if ((_7343 == std::string ("solItrPviolbarvar"))){ return (int)87; }else {}if ((_7343 == std::string ("solItrPviolcones"))){ return (int)89; }else {}if ((_7343 == std::string ("solItrDualObj"))){ return (int)71; }else {}if ((_7343 == std::string ("solItrDviolcon"))){ return (int)73; }else {}if ((_7343 == std::string ("solItrDviolvar"))){ return (int)75; }else {}if ((_7343 == std::string ("solItrDviolbarvar"))){ return (int)72; }else {}if ((_7343 == std::string ("solItrDviolcones"))){ return (int)74; }else {}if ((_7343 == std::string ("solItrNrmXc"))){ return (int)83; }else {}if ((_7343 == std::string ("solItrNrmXx"))){ return (int)84; }else {}if ((_7343 == std::string ("solItrNrmBarx"))){ return (int)77; }else {}if ((_7343 == std::string ("solItrNrmY"))){ return (int)85; }else {}if ((_7343 == std::string ("solItrNrmSlc"))){ return (int)78; }else {}if ((_7343 == std::string ("solItrNrmSuc"))){ return (int)81; }else {}if ((_7343 == std::string ("solItrNrmSlx"))){ return (int)79; }else {}if ((_7343 == std::string ("solItrNrmSux"))){ return (int)82; }else {}if ((_7343 == std::string ("solItrNrmSnx"))){ return (int)80; }else {}if ((_7343 == std::string ("solItrNrmBars"))){ return (int)76; }else {}if ((_7343 == std::string ("solBasPrimalObj"))){ return (int)59; }else {}if ((_7343 == std::string ("solBasPviolcon"))){ return (int)60; }else {}if ((_7343 == std::string ("solBasPviolvar"))){ return (int)61; }else {}if ((_7343 == std::string ("solBasDualObj"))){ return (int)48; }else {}if ((_7343 == std::string ("solBasDviolcon"))){ return (int)49; }else {}if ((_7343 == std::string ("solBasDviolvar"))){ return (int)50; }else {}if ((_7343 == std::string ("solBasNrmXc"))){ return (int)56; }else {}if ((_7343 == std::string ("solBasNrmXx"))){ return (int)57; }else {}if ((_7343 == std::string ("solBasNrmBarx"))){ return (int)51; }else {}if ((_7343 == std::string ("solBasNrmY"))){ return (int)58; }else {}if ((_7343 == std::string ("solBasNrmSlc"))){ return (int)52; }else {}if ((_7343 == std::string ("solBasNrmSuc"))){ return (int)54; }else {}if ((_7343 == std::string ("solBasNrmSlx"))){ return (int)53; }else {}if ((_7343 == std::string ("solBasNrmSux"))){ return (int)55; }else {}if ((_7343 == std::string ("solItgPrimalObj"))){ return (int)65; }else {}if ((_7343 == std::string ("solItgPviolcon"))){ return (int)67; }else {}if ((_7343 == std::string ("solItgPviolvar"))){ return (int)70; }else {}if ((_7343 == std::string ("solItgPviolbarvar"))){ return (int)66; }else {}if ((_7343 == std::string ("solItgPviolcones"))){ return (int)68; }else {}if ((_7343 == std::string ("solItgPviolitg"))){ return (int)69; }else {}if ((_7343 == std::string ("solItgNrmXc"))){ return (int)63; }else {}if ((_7343 == std::string ("solItgNrmXx"))){ return (int)64; }else {}if ((_7343 == std::string ("solItgNrmBarx"))){ return (int)62; }else {}if ((_7343 == std::string ("intpntFactorNumFlops"))){ return (int)8; }else {}if ((_7343 == std::string ("qcqoReformulateTime"))){ return (int)39; }else {}if ((_7343 == std::string ("qcqoReformulateMaxPerturbation"))){ return (int)38; }else {}if ((_7343 == std::string ("qcqoReformulateWorstCholeskyDiagScaling"))){ return (int)41; }else {}if ((_7343 == std::string ("qcqoReformulateWorstCholeskyColumnScaling"))){ return (int)40; }else {}if ((_7343 == std::string ("primalRepairPenaltyObj"))){ return (int)37; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_miomode_value( const std::string & _7344){ if ((_7344 == std::string ("ignored"))){ return (int)0; }else {}if ((_7344 == std::string ("satisfied"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value( const std::string & _7345){ if ((_7345 == std::string ("row"))){ return (int)0; }else {}if ((_7345 == std::string ("col"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simseltype_value( const std::string & _7346){ if ((_7346 == std::string ("free"))){ return (int)0; }else {}if ((_7346 == std::string ("full"))){ return (int)1; }else {}if ((_7346 == std::string ("ase"))){ return (int)2; }else {}if ((_7346 == std::string ("devex"))){ return (int)3; }else {}if ((_7346 == std::string ("se"))){ return (int)4; }else {}if ((_7346 == std::string ("partial"))){ return (int)5; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_internal_liinf_value( const std::string & _7347){ if ((_7347 == std::string ("intpntLenbarvar"))){ return (int)5; }else {}if ((_7347 == std::string ("intpntFactorNumNzBefore"))){ return (int)2; }else {}if ((_7347 == std::string ("intpntFactorMlOrderSparseLNz"))){ return (int)1; }else {}if ((_7347 == std::string ("intpntFactorGpOrderSparseLNz"))){ return (int)0; }else {}if ((_7347 == std::string ("presolveStackSize"))){ return (int)6; }else {}if ((_7347 == std::string ("intpntFactorVNz"))){ return (int)4; }else {}if ((_7347 == std::string ("intpntFactorUpdatedVNz"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_iomode_value( const std::string & _7348){ if ((_7348 == std::string ("read"))){ return (int)0; }else {}if ((_7348 == std::string ("write"))){ return (int)1; }else {}if ((_7348 == std::string ("readwrite"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_streamtype_value( const std::string & _7349){ if ((_7349 == std::string ("log"))){ return (int)0; }else {}if ((_7349 == std::string ("msg"))){ return (int)1; }else {}if ((_7349 == std::string ("err"))){ return (int)2; }else {}if ((_7349 == std::string ("wrn"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_conetype_value( const std::string & _7350){ if ((_7350 == std::string ("quad"))){ return (int)0; }else {}if ((_7350 == std::string ("rquad"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_mark_value( const std::string & _7351){ if ((_7351 == std::string ("lo"))){ return (int)0; }else {}if ((_7351 == std::string ("up"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_feature_value( const std::string & _7352){ if ((_7352 == std::string ("pts"))){ return (int)0; }else {}if ((_7352 == std::string ("pton"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_symmattype_value( const std::string & _7353){ if ((_7353 == std::string ("sparse"))){ return (int)0; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_callbackcode_value( const std::string & _7354){ if ((_7354 == std::string ("beginRootCutgen"))){ return (int)22; }else {}if ((_7354 == std::string ("imRootCutgen"))){ return (int)76; }else {}if ((_7354 == std::string ("endRootCutgen"))){ return (int)51; }else {}if ((_7354 == std::string ("beginOptimizer"))){ return (int)12; }else {}if ((_7354 == std::string ("endOptimizer"))){ return (int)41; }else {}if ((_7354 == std::string ("beginPresolve"))){ return (int)13; }else {}if ((_7354 == std::string ("updatePresolve"))){ return (int)88; }else {}if ((_7354 == std::string ("imPresolve"))){ return (int)70; }else {}if ((_7354 == std::string ("endPresolve"))){ return (int)42; }else {}if ((_7354 == std::string ("beginIntpnt"))){ return (int)9; }else {}if ((_7354 == std::string ("intpnt"))){ return (int)79; }else {}if ((_7354 == std::string ("imIntpnt"))){ return (int)62; }else {}if ((_7354 == std::string ("endIntpnt"))){ return (int)38; }else {}if ((_7354 == std::string ("beginConic"))){ return (int)1; }else {}if ((_7354 == std::string ("conic"))){ return (int)27; }else {}if ((_7354 == std::string ("imConic"))){ return (int)57; }else {}if ((_7354 == std::string ("endConic"))){ return (int)30; }else {}if ((_7354 == std::string ("primalSimplex"))){ return (int)81; }else {}if ((_7354 == std::string ("dualSimplex"))){ return (int)28; }else {}if ((_7354 == std::string ("beginBi"))){ return (int)0; }else {}if ((_7354 == std::string ("imBi"))){ return (int)56; }else {}if ((_7354 == std::string ("endBi"))){ return (int)29; }else {}if ((_7354 == std::string ("beginPrimalBi"))){ return (int)14; }else {}if ((_7354 == std::string ("imPrimalBi"))){ return (int)71; }else {}if ((_7354 == std::string ("updatePrimalBi"))){ return (int)89; }else {}if ((_7354 == std::string ("endPrimalBi"))){ return (int)43; }else {}if ((_7354 == std::string ("beginDualBi"))){ return (int)2; }else {}if ((_7354 == std::string ("imDualBi"))){ return (int)58; }else {}if ((_7354 == std::string ("updateDualBi"))){ return (int)85; }else {}if ((_7354 == std::string ("endDualBi"))){ return (int)31; }else {}if ((_7354 == std::string ("beginSimplexBi"))){ return (int)24; }else {}if ((_7354 == std::string ("imSimplexBi"))){ return (int)78; }else {}if ((_7354 == std::string ("beginPrimalSimplexBi"))){ return (int)19; }else {}if ((_7354 == std::string ("updatePrimalSimplexBi"))){ return (int)91; }else {}if ((_7354 == std::string ("endPrimalSimplexBi"))){ return (int)48; }else {}if ((_7354 == std::string ("beginDualSimplexBi"))){ return (int)6; }else {}if ((_7354 == std::string ("updateDualSimplexBi"))){ return (int)87; }else {}if ((_7354 == std::string ("endDualSimplexBi"))){ return (int)35; }else {}if ((_7354 == std::string ("endSimplexBi"))){ return (int)53; }else {}if ((_7354 == std::string ("beginMio"))){ return (int)11; }else {}if ((_7354 == std::string ("imMio"))){ return (int)65; }else {}if ((_7354 == std::string ("newIntMio"))){ return (int)80; }else {}if ((_7354 == std::string ("endMio"))){ return (int)40; }else {}if ((_7354 == std::string ("beginSimplex"))){ return (int)23; }else {}if ((_7354 == std::string ("beginDualSimplex"))){ return (int)5; }else {}if ((_7354 == std::string ("imDualSimplex"))){ return (int)60; }else {}if ((_7354 == std::string ("updateDualSimplex"))){ return (int)86; }else {}if ((_7354 == std::string ("endDualSimplex"))){ return (int)34; }else {}if ((_7354 == std::string ("beginPrimalSimplex"))){ return (int)18; }else {}if ((_7354 == std::string ("imPrimalSimplex"))){ return (int)73; }else {}if ((_7354 == std::string ("updatePrimalSimplex"))){ return (int)90; }else {}if ((_7354 == std::string ("endPrimalSimplex"))){ return (int)47; }else {}if ((_7354 == std::string ("endSimplex"))){ return (int)52; }else {}if ((_7354 == std::string ("beginInfeasAna"))){ return (int)8; }else {}if ((_7354 == std::string ("endInfeasAna"))){ return (int)37; }else {}if ((_7354 == std::string ("imPrimalSensivity"))){ return (int)72; }else {}if ((_7354 == std::string ("imDualSensivity"))){ return (int)59; }else {}if ((_7354 == std::string ("imMioIntpnt"))){ return (int)67; }else {}if ((_7354 == std::string ("imMioPrimalSimplex"))){ return (int)68; }else {}if ((_7354 == std::string ("imMioDualSimplex"))){ return (int)66; }else {}if ((_7354 == std::string ("beginPrimalSetupBi"))){ return (int)17; }else {}if ((_7354 == std::string ("endPrimalSetupBi"))){ return (int)46; }else {}if ((_7354 == std::string ("beginDualSetupBi"))){ return (int)4; }else {}if ((_7354 == std::string ("endDualSetupBi"))){ return (int)33; }else {}if ((_7354 == std::string ("beginPrimalSensitivity"))){ return (int)16; }else {}if ((_7354 == std::string ("endPrimalSensitivity"))){ return (int)45; }else {}if ((_7354 == std::string ("beginDualSensitivity"))){ return (int)3; }else {}if ((_7354 == std::string ("endDualSensitivity"))){ return (int)32; }else {}if ((_7354 == std::string ("beginLicenseWait"))){ return (int)10; }else {}if ((_7354 == std::string ("endLicenseWait"))){ return (int)39; }else {}if ((_7354 == std::string ("imLicenseWait"))){ return (int)63; }else {}if ((_7354 == std::string ("beginQcqoReformulate"))){ return (int)20; }else {}if ((_7354 == std::string ("endQcqoReformulate"))){ return (int)49; }else {}if ((_7354 == std::string ("imQoReformulate"))){ return (int)74; }else {}if ((_7354 == std::string ("beginToConic"))){ return (int)25; }else {}if ((_7354 == std::string ("endToConic"))){ return (int)54; }else {}if ((_7354 == std::string ("beginFullConvexityCheck"))){ return (int)7; }else {}if ((_7354 == std::string ("endFullConvexityCheck"))){ return (int)36; }else {}if ((_7354 == std::string ("imFullConvexityCheck"))){ return (int)61; }else {}if ((_7354 == std::string ("beginPrimalRepair"))){ return (int)15; }else {}if ((_7354 == std::string ("endPrimalRepair"))){ return (int)44; }else {}if ((_7354 == std::string ("beginRead"))){ return (int)21; }else {}if ((_7354 == std::string ("imRead"))){ return (int)75; }else {}if ((_7354 == std::string ("endRead"))){ return (int)50; }else {}if ((_7354 == std::string ("beginWrite"))){ return (int)26; }else {}if ((_7354 == std::string ("endWrite"))){ return (int)55; }else {}if ((_7354 == std::string ("readOpfSection"))){ return (int)83; }else {}if ((_7354 == std::string ("imLu"))){ return (int)64; }else {}if ((_7354 == std::string ("imOrder"))){ return (int)69; }else {}if ((_7354 == std::string ("imSimplex"))){ return (int)77; }else {}if ((_7354 == std::string ("readOpf"))){ return (int)82; }else {}if ((_7354 == std::string ("writeOpf"))){ return (int)92; }else {}if ((_7354 == std::string ("solvingRemote"))){ return (int)84; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_simhotstart_value( const std::string & _7355){ if ((_7355 == std::string ("none"))){ return (int)0; }else {}if ((_7355 == std::string ("free"))){ return (int)1; }else {}if ((_7355 == std::string ("statusKeys"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_liinfitem_value( const std::string & _7356){ if ((_7356 == std::string ("mioPresolvedAnz"))){ return (int)8; }else {}if ((_7356 == std::string ("mioSimplexIter"))){ return (int)10; }else {}if ((_7356 == std::string ("mioIntpntIter"))){ return (int)7; }else {}if ((_7356 == std::string ("biPrimalIter"))){ return (int)5; }else {}if ((_7356 == std::string ("biDualIter"))){ return (int)4; }else {}if ((_7356 == std::string ("biCleanPrimalIter"))){ return (int)3; }else {}if ((_7356 == std::string ("biCleanDualIter"))){ return (int)1; }else {}if ((_7356 == std::string ("biCleanPrimalDegIter"))){ return (int)2; }else {}if ((_7356 == std::string ("biCleanDualDegIter"))){ return (int)0; }else {}if ((_7356 == std::string ("intpntFactorNumNz"))){ return (int)6; }else {}if ((_7356 == std::string ("rdNumanz"))){ return (int)11; }else {}if ((_7356 == std::string ("rdNumqnz"))){ return (int)12; }else {}if ((_7356 == std::string ("mioSimMaxiterSetbacks"))){ return (int)9; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_branchdir_value( const std::string & _7357){ if ((_7357 == std::string ("free"))){ return (int)0; }else {}if ((_7357 == std::string ("up"))){ return (int)1; }else {}if ((_7357 == std::string ("down"))){ return (int)2; }else {}if ((_7357 == std::string ("near"))){ return (int)3; }else {}if ((_7357 == std::string ("far"))){ return (int)4; }else {}if ((_7357 == std::string ("rootLp"))){ return (int)5; }else {}if ((_7357 == std::string ("guided"))){ return (int)6; }else {}if ((_7357 == std::string ("pseudocost"))){ return (int)7; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_basindtype_value( const std::string & _7358){ if ((_7358 == std::string ("never"))){ return (int)0; }else {}if ((_7358 == std::string ("always"))){ return (int)1; }else {}if ((_7358 == std::string ("noError"))){ return (int)2; }else {}if ((_7358 == std::string ("ifFeasible"))){ return (int)3; }else {}if ((_7358 == std::string ("reservered"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_internal_iinf_value( const std::string & _7359){ if ((_7359 == std::string ("presolveCompressedStackSize"))){ return (int)31; }else {}if ((_7359 == std::string ("presolveLindepWork"))){ return (int)59; }else {}if ((_7359 == std::string ("presolveLindepPivots"))){ return (int)57; }else {}if ((_7359 == std::string ("presolveLindepSkipped"))){ return (int)58; }else {}if ((_7359 == std::string ("presolveOutofspace"))){ return (int)77; }else {}if ((_7359 == std::string ("presolveBadPrecision"))){ return (int)30; }else {}if ((_7359 == std::string ("optObjectiveSense"))){ return (int)28; }else {}if ((_7359 == std::string ("optimizer"))){ return (int)29; }else {}if ((_7359 == std::string ("intpntFirRefIter"))){ return (int)9; }else {}if ((_7359 == std::string ("intpntNumRefSteps"))){ return (int)14; }else {}if ((_7359 == std::string ("intpntFactorDim"))){ return (int)2; }else {}if ((_7359 == std::string ("intpntFactorNumDenseA"))){ return (int)4; }else {}if ((_7359 == std::string ("intpntFactorNumDenseADup"))){ return (int)5; }else {}if ((_7359 == std::string ("intpntFactorNumDenseW"))){ return (int)6; }else {}if ((_7359 == std::string ("intpntFactorNumDenseWANull"))){ return (int)7; }else {}if ((_7359 == std::string ("intpntNumcon"))){ return (int)21; }else {}if ((_7359 == std::string ("intpntNumvar"))){ return (int)26; }else {}if ((_7359 == std::string ("intpntNumbarvar"))){ return (int)15; }else {}if ((_7359 == std::string ("intpntNumblo"))){ return (int)18; }else {}if ((_7359 == std::string ("intpntNumbup"))){ return (int)20; }else {}if ((_7359 == std::string ("intpntNumbfr"))){ return (int)16; }else {}if ((_7359 == std::string ("intpntNumbfx"))){ return (int)17; }else {}if ((_7359 == std::string ("intpntNumcone"))){ return (int)22; }else {}if ((_7359 == std::string ("intpntNumconevar"))){ return (int)23; }else {}if ((_7359 == std::string ("intpntNumbndcone"))){ return (int)19; }else {}if ((_7359 == std::string ("intpntNumrqcones"))){ return (int)25; }else {}if ((_7359 == std::string ("intpntNumqcones"))){ return (int)24; }else {}if ((_7359 == std::string ("intpntMinconedim"))){ return (int)13; }else {}if ((_7359 == std::string ("intpntMaxconedim"))){ return (int)12; }else {}if ((_7359 == std::string ("intpntMaxbarvardim"))){ return (int)11; }else {}if ((_7359 == std::string ("presolveNumcon"))){ return (int)66; }else {}if ((_7359 == std::string ("presolveNumcfr"))){ return (int)62; }else {}if ((_7359 == std::string ("presolveNumcfx"))){ return (int)63; }else {}if ((_7359 == std::string ("presolveNumclo"))){ return (int)64; }else {}if ((_7359 == std::string ("presolveNumcup"))){ return (int)68; }else {}if ((_7359 == std::string ("presolveNumcra"))){ return (int)67; }else {}if ((_7359 == std::string ("presolveNumcnl"))){ return (int)65; }else {}if ((_7359 == std::string ("presolveNumvar"))){ return (int)70; }else {}if ((_7359 == std::string ("presolveNumvfr"))){ return (int)71; }else {}if ((_7359 == std::string ("presolveNumvfx"))){ return (int)72; }else {}if ((_7359 == std::string ("presolveNumvlo"))){ return (int)73; }else {}if ((_7359 == std::string ("presolveNumvup"))){ return (int)76; }else {}if ((_7359 == std::string ("presolveNumvra"))){ return (int)75; }else {}if ((_7359 == std::string ("presolveNumvnl"))){ return (int)74; }else {}if ((_7359 == std::string ("presolveNumnza"))){ return (int)69; }else {}if ((_7359 == std::string ("presolveFnumcon"))){ return (int)39; }else {}if ((_7359 == std::string ("presolveFnumcfr"))){ return (int)35; }else {}if ((_7359 == std::string ("presolveFnumcfx"))){ return (int)36; }else {}if ((_7359 == std::string ("presolveFnumclo"))){ return (int)37; }else {}if ((_7359 == std::string ("presolveFnumcup"))){ return (int)41; }else {}if ((_7359 == std::string ("presolveFnumcra"))){ return (int)40; }else {}if ((_7359 == std::string ("presolveFnumcnl"))){ return (int)38; }else {}if ((_7359 == std::string ("presolveFnumvar"))){ return (int)43; }else {}if ((_7359 == std::string ("presolveFnumvfr"))){ return (int)44; }else {}if ((_7359 == std::string ("presolveFnumvfx"))){ return (int)45; }else {}if ((_7359 == std::string ("presolveFnumvlo"))){ return (int)46; }else {}if ((_7359 == std::string ("presolveFnumvup"))){ return (int)49; }else {}if ((_7359 == std::string ("presolveFnumvra"))){ return (int)48; }else {}if ((_7359 == std::string ("presolveFnumvnl"))){ return (int)47; }else {}if ((_7359 == std::string ("presolveFnumnza"))){ return (int)42; }else {}if ((_7359 == std::string ("presolveNumElimns"))){ return (int)61; }else {}if ((_7359 == std::string ("presolveEliNumTries"))){ return (int)34; }else {}if ((_7359 == std::string ("presolveEliNumFreedCon"))){ return (int)32; }else {}if ((_7359 == std::string ("presolveEliNumFreedConTotal"))){ return (int)33; }else {}if ((_7359 == std::string ("presolveLindepNumTries"))){ return (int)55; }else {}if ((_7359 == std::string ("presolveLindepNum"))){ return (int)54; }else {}if ((_7359 == std::string ("presolveForceConNum"))){ return (int)50; }else {}if ((_7359 == std::string ("presolveForceConNumVar"))){ return (int)51; }else {}if ((_7359 == std::string ("presolveForceVarNum"))){ return (int)52; }else {}if ((_7359 == std::string ("presolveForceVarNumCon"))){ return (int)53; }else {}if ((_7359 == std::string ("presolvePivOnConNum"))){ return (int)78; }else {}if ((_7359 == std::string ("presolveNumDouBlocks"))){ return (int)60; }else {}if ((_7359 == std::string ("intpntFactorNum"))){ return (int)3; }else {}if ((_7359 == std::string ("intpntFactorNumSolve"))){ return (int)8; }else {}if ((_7359 == std::string ("simPrimalHotstartNumBasics"))){ return (int)88; }else {}if ((_7359 == std::string ("simPrimalHotstartBasisRank"))){ return (int)87; }else {}if ((_7359 == std::string ("simDualHotstartNumBasics"))){ return (int)80; }else {}if ((_7359 == std::string ("simDualHotstartBasisRank"))){ return (int)79; }else {}if ((_7359 == std::string ("intpntGpOrderEmployed"))){ return (int)10; }else {}if ((_7359 == std::string ("numLuFactorizations"))){ return (int)27; }else {}if ((_7359 == std::string ("simPrimalTrust"))){ return (int)90; }else {}if ((_7359 == std::string ("simDualTrust"))){ return (int)82; }else {}if ((_7359 == std::string ("simPrimalNumSetbacks"))){ return (int)89; }else {}if ((_7359 == std::string ("simDualNumSetbacks"))){ return (int)81; }else {}if ((_7359 == std::string ("simNumDupvec"))){ return (int)85; }else {}if ((_7359 == std::string ("simNumPrimalBoundswaps"))){ return (int)86; }else {}if ((_7359 == std::string ("simNumDualBoundswaps"))){ return (int)83; }else {}if ((_7359 == std::string ("simNumDualIntegerPivots"))){ return (int)84; }else {}if ((_7359 == std::string ("biPrimalInfo"))){ return (int)1; }else {}if ((_7359 == std::string ("biDualInfo"))){ return (int)0; }else {}if ((_7359 == std::string ("presolveLindepNumTruncTries"))){ return (int)56; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_boundkey_value( const std::string & _7360){ if ((_7360 == std::string ("lo"))){ return (int)0; }else {}if ((_7360 == std::string ("up"))){ return (int)1; }else {}if ((_7360 == std::string ("fx"))){ return (int)2; }else {}if ((_7360 == std::string ("fr"))){ return (int)3; }else {}if ((_7360 == std::string ("ra"))){ return (int)4; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_solitem_value( const std::string & _7361){ if ((_7361 == std::string ("xc"))){ return (int)0; }else {}if ((_7361 == std::string ("xx"))){ return (int)1; }else {}if ((_7361 == std::string ("y"))){ return (int)2; }else {}if ((_7361 == std::string ("slc"))){ return (int)3; }else {}if ((_7361 == std::string ("suc"))){ return (int)4; }else {}if ((_7361 == std::string ("slx"))){ return (int)5; }else {}if ((_7361 == std::string ("sux"))){ return (int)6; }else {}if ((_7361 == std::string ("snx"))){ return (int)7; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_objsense_value( const std::string & _7362){ if ((_7362 == std::string ("minimize"))){ return (int)0; }else {}if ((_7362 == std::string ("maximize"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_solsta_value( const std::string & _7363){ if ((_7363 == std::string ("unknown"))){ return (int)0; }else {}if ((_7363 == std::string ("optimal"))){ return (int)1; }else {}if ((_7363 == std::string ("primFeas"))){ return (int)2; }else {}if ((_7363 == std::string ("dualFeas"))){ return (int)3; }else {}if ((_7363 == std::string ("primAndDualFeas"))){ return (int)4; }else {}if ((_7363 == std::string ("nearOptimal"))){ return (int)7; }else {}if ((_7363 == std::string ("nearPrimFeas"))){ return (int)8; }else {}if ((_7363 == std::string ("nearDualFeas"))){ return (int)9; }else {}if ((_7363 == std::string ("nearPrimAndDualFeas"))){ return (int)10; }else {}if ((_7363 == std::string ("primInfeasCer"))){ return (int)5; }else {}if ((_7363 == std::string ("dualInfeasCer"))){ return (int)6; }else {}if ((_7363 == std::string ("nearPrimInfeasCer"))){ return (int)11; }else {}if ((_7363 == std::string ("nearDualInfeasCer"))){ return (int)12; }else {}if ((_7363 == std::string ("primIllposedCer"))){ return (int)13; }else {}if ((_7363 == std::string ("dualIllposedCer"))){ return (int)14; }else {}if ((_7363 == std::string ("integerOptimal"))){ return (int)15; }else {}if ((_7363 == std::string ("nearIntegerOptimal"))){ return (int)16; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_iparam_value( const std::string & _7364){ if ((_7364 == std::string ("autoUpdateSolInfo"))){ return (int)3; }else {}if ((_7364 == std::string ("removeUnusedSolutions"))){ return (int)111; }else {}if ((_7364 == std::string ("intpntHotstart"))){ return (int)18; }else {}if ((_7364 == std::string ("mioMtUserCb"))){ return (int)70; }else {}if ((_7364 == std::string ("numThreads"))){ return (int)80; }else {}if ((_7364 == std::string ("intpntMultiThread"))){ return (int)22; }else {}if ((_7364 == std::string ("timingLevel"))){ return (int)144; }else {}if ((_7364 == std::string ("mtSpincount"))){ return (int)79; }else {}if ((_7364 == std::string ("maxNumWarnings"))){ return (int)56; }else {}if ((_7364 == std::string ("optimizer"))){ return (int)90; }else {}if ((_7364 == std::string ("biMaxIterations"))){ return (int)8; }else {}if ((_7364 == std::string ("licenseTrhExpiryWrn"))){ return (int)32; }else {}if ((_7364 == std::string ("logCutSecondOpt"))){ return (int)39; }else {}if ((_7364 == std::string ("logAnaPro"))){ return (int)35; }else {}if ((_7364 == std::string ("logResponse"))){ return (int)49; }else {}if ((_7364 == std::string ("logBi"))){ return (int)36; }else {}if ((_7364 == std::string ("logBiFreq"))){ return (int)37; }else {}if ((_7364 == std::string ("biCleanOptimizer"))){ return (int)5; }else {}if ((_7364 == std::string ("intpntMaxNumRefinementSteps"))){ return (int)21; }else {}if ((_7364 == std::string ("intpntStartingPoint"))){ return (int)28; }else {}if ((_7364 == std::string ("intpntDiffStep"))){ return (int)17; }else {}if ((_7364 == std::string ("intpntScaling"))){ return (int)26; }else {}if ((_7364 == std::string ("intpntSolveForm"))){ return (int)27; }else {}if ((_7364 == std::string ("logIntpnt"))){ return (int)44; }else {}if ((_7364 == std::string ("intpntMaxIterations"))){ return (int)19; }else {}if ((_7364 == std::string ("intpntOffColTrh"))){ return (int)23; }else {}if ((_7364 == std::string ("intpntOrderMethod"))){ return (int)24; }else {}if ((_7364 == std::string ("intpntBasis"))){ return (int)16; }else {}if ((_7364 == std::string ("biIgnoreMaxIter"))){ return (int)6; }else {}if ((_7364 == std::string ("biIgnoreNumError"))){ return (int)7; }else {}if ((_7364 == std::string ("intpntMaxNumCor"))){ return (int)20; }else {}if ((_7364 == std::string ("presolveUse"))){ return (int)100; }else {}if ((_7364 == std::string ("presolveLevel"))){ return (int)95; }else {}if ((_7364 == std::string ("logPresolve"))){ return (int)48; }else {}if ((_7364 == std::string ("presolveLindepUse"))){ return (int)98; }else {}if ((_7364 == std::string ("presolveEliminatorMaxNumTries"))){ return (int)94; }else {}if ((_7364 == std::string ("presolveEliminatorMaxFill"))){ return (int)93; }else {}if ((_7364 == std::string ("presolveMaxNumReductions"))){ return (int)99; }else {}if ((_7364 == std::string ("simStabilityPriority"))){ return (int)137; }else {}if ((_7364 == std::string ("simPrimalCrash"))){ return (int)127; }else {}if ((_7364 == std::string ("logSim"))){ return (int)52; }else {}if ((_7364 == std::string ("logSimMinor"))){ return (int)54; }else {}if ((_7364 == std::string ("logSimFreq"))){ return (int)53; }else {}if ((_7364 == std::string ("simPrimalRestrictSelection"))){ return (int)129; }else {}if ((_7364 == std::string ("simPrimalSelection"))){ return (int)130; }else {}if ((_7364 == std::string ("simDualRestrictSelection"))){ return (int)119; }else {}if ((_7364 == std::string ("simDualSelection"))){ return (int)120; }else {}if ((_7364 == std::string ("simMaxIterations"))){ return (int)124; }else {}if ((_7364 == std::string ("simHotstartLu"))){ return (int)123; }else {}if ((_7364 == std::string ("simRefactorFreq"))){ return (int)131; }else {}if ((_7364 == std::string ("mioMode"))){ return (int)69; }else {}if ((_7364 == std::string ("logMio"))){ return (int)45; }else {}if ((_7364 == std::string ("logMioFreq"))){ return (int)46; }else {}if ((_7364 == std::string ("mioMaxNumRelaxs"))){ return (int)67; }else {}if ((_7364 == std::string ("mioMaxNumBranches"))){ return (int)66; }else {}if ((_7364 == std::string ("mioMaxNumSolutions"))){ return (int)68; }else {}if ((_7364 == std::string ("mioNodeSelection"))){ return (int)72; }else {}if ((_7364 == std::string ("mioHeuristicLevel"))){ return (int)65; }else {}if ((_7364 == std::string ("mioProbingLevel"))){ return (int)74; }else {}if ((_7364 == std::string ("mioCutSelectionLevel"))){ return (int)64; }else {}if ((_7364 == std::string ("mioVbDetectionLevel"))){ return (int)78; }else {}if ((_7364 == std::string ("mioBranchDir"))){ return (int)57; }else {}if ((_7364 == std::string ("mioRootOptimizer"))){ return (int)76; }else {}if ((_7364 == std::string ("mioNodeOptimizer"))){ return (int)71; }else {}if ((_7364 == std::string ("mioPerspectiveReformulate"))){ return (int)73; }else {}if ((_7364 == std::string ("readDataFormat"))){ return (int)103; }else {}if ((_7364 == std::string ("readDataCompressed"))){ return (int)102; }else {}if ((_7364 == std::string ("readKeepFreeCon"))){ return (int)105; }else {}if ((_7364 == std::string ("readMpsFormat"))){ return (int)108; }else {}if ((_7364 == std::string ("writeMpsFormat"))){ return (int)163; }else {}if ((_7364 == std::string ("readMpsWidth"))){ return (int)109; }else {}if ((_7364 == std::string ("readDebug"))){ return (int)104; }else {}if ((_7364 == std::string ("readLpQuotedNames"))){ return (int)107; }else {}if ((_7364 == std::string ("writeDataFormat"))){ return (int)149; }else {}if ((_7364 == std::string ("writeDataParam"))){ return (int)150; }else {}if ((_7364 == std::string ("writeFreeCon"))){ return (int)151; }else {}if ((_7364 == std::string ("writeGenericNames"))){ return (int)152; }else {}if ((_7364 == std::string ("writeGenericNamesIo"))){ return (int)153; }else {}if ((_7364 == std::string ("writeDataCompressed"))){ return (int)148; }else {}if ((_7364 == std::string ("writeMpsInt"))){ return (int)164; }else {}if ((_7364 == std::string ("writeLpStrictFormat"))){ return (int)161; }else {}if ((_7364 == std::string ("writeLpQuotedNames"))){ return (int)160; }else {}if ((_7364 == std::string ("writeLpLineWidth"))){ return (int)159; }else {}if ((_7364 == std::string ("writeLpTermsPerLine"))){ return (int)162; }else {}if ((_7364 == std::string ("writeLpFullObj"))){ return (int)158; }else {}if ((_7364 == std::string ("writePrecision"))){ return (int)165; }else {}if ((_7364 == std::string ("writeSolIgnoreInvalidNames"))){ return (int)169; }else {}if ((_7364 == std::string ("writeSolHead"))){ return (int)168; }else {}if ((_7364 == std::string ("writeSolConstraints"))){ return (int)167; }else {}if ((_7364 == std::string ("writeSolVariables"))){ return (int)170; }else {}if ((_7364 == std::string ("writeSolBarvariables"))){ return (int)166; }else {}if ((_7364 == std::string ("writeBasHead"))){ return (int)146; }else {}if ((_7364 == std::string ("writeBasConstraints"))){ return (int)145; }else {}if ((_7364 == std::string ("writeBasVariables"))){ return (int)147; }else {}if ((_7364 == std::string ("writeIntHead"))){ return (int)156; }else {}if ((_7364 == std::string ("writeIntConstraints"))){ return (int)155; }else {}if ((_7364 == std::string ("writeIntVariables"))){ return (int)157; }else {}if ((_7364 == std::string ("solReadNameWidth"))){ return (int)141; }else {}if ((_7364 == std::string ("solReadWidth"))){ return (int)142; }else {}if ((_7364 == std::string ("infeasReportAuto"))){ return (int)14; }else {}if ((_7364 == std::string ("infeasReportLevel"))){ return (int)15; }else {}if ((_7364 == std::string ("infeasGenericNames"))){ return (int)12; }else {}if ((_7364 == std::string ("logInfeasAna"))){ return (int)43; }else {}if ((_7364 == std::string ("licenseWait"))){ return (int)33; }else {}if ((_7364 == std::string ("licenseSuppressExpireWrns"))){ return (int)31; }else {}if ((_7364 == std::string ("licensePauseTime"))){ return (int)30; }else {}if ((_7364 == std::string ("licenseDebug"))){ return (int)29; }else {}if ((_7364 == std::string ("solFilterKeepBasic"))){ return (int)139; }else {}if ((_7364 == std::string ("solFilterKeepRanged"))){ return (int)140; }else {}if ((_7364 == std::string ("log"))){ return (int)34; }else {}if ((_7364 == std::string ("logExpand"))){ return (int)40; }else {}if ((_7364 == std::string ("logFile"))){ return (int)42; }else {}if ((_7364 == std::string ("logOrder"))){ return (int)47; }else {}if ((_7364 == std::string ("logSensitivity"))){ return (int)50; }else {}if ((_7364 == std::string ("logSensitivityOpt"))){ return (int)51; }else {}if ((_7364 == std::string ("readTaskIgnoreParam"))){ return (int)110; }else {}if ((_7364 == std::string ("writeTaskIncSol"))){ return (int)171; }else {}if ((_7364 == std::string ("paramReadCaseName"))){ return (int)91; }else {}if ((_7364 == std::string ("paramReadIgnError"))){ return (int)92; }else {}if ((_7364 == std::string ("solutionCallback"))){ return (int)143; }else {}if ((_7364 == std::string ("simScaling"))){ return (int)134; }else {}if ((_7364 == std::string ("simScalingMethod"))){ return (int)135; }else {}if ((_7364 == std::string ("simPrimalPhaseoneMethod"))){ return (int)128; }else {}if ((_7364 == std::string ("simDualPhaseoneMethod"))){ return (int)118; }else {}if ((_7364 == std::string ("simMaxNumSetbacks"))){ return (int)125; }else {}if ((_7364 == std::string ("simHotstart"))){ return (int)122; }else {}if ((_7364 == std::string ("simBasisFactorUse"))){ return (int)115; }else {}if ((_7364 == std::string ("simDegen"))){ return (int)116; }else {}if ((_7364 == std::string ("simReformulation"))){ return (int)132; }else {}if ((_7364 == std::string ("simExploitDupvec"))){ return (int)121; }else {}if ((_7364 == std::string ("simSaveLu"))){ return (int)133; }else {}if ((_7364 == std::string ("simNonSingular"))){ return (int)126; }else {}if ((_7364 == std::string ("simDualCrash"))){ return (int)117; }else {}if ((_7364 == std::string ("logStorage"))){ return (int)55; }else {}if ((_7364 == std::string ("infeasPreferPrimal"))){ return (int)13; }else {}if ((_7364 == std::string ("readLpDropNewVarsInBou"))){ return (int)106; }else {}if ((_7364 == std::string ("opfMaxTermsPerLine"))){ return (int)81; }else {}if ((_7364 == std::string ("opfWriteHints"))){ return (int)83; }else {}if ((_7364 == std::string ("opfWriteParameters"))){ return (int)84; }else {}if ((_7364 == std::string ("opfWriteProblem"))){ return (int)85; }else {}if ((_7364 == std::string ("opfWriteHeader"))){ return (int)82; }else {}if ((_7364 == std::string ("opfWriteSolutions"))){ return (int)89; }else {}if ((_7364 == std::string ("opfWriteSolBas"))){ return (int)86; }else {}if ((_7364 == std::string ("opfWriteSolItg"))){ return (int)87; }else {}if ((_7364 == std::string ("opfWriteSolItr"))){ return (int)88; }else {}if ((_7364 == std::string ("primalRepairOptimizer"))){ return (int)101; }else {}if ((_7364 == std::string ("mioRootRepeatPresolveLevel"))){ return (int)77; }else {}if ((_7364 == std::string ("mioCutCmir"))){ return (int)60; }else {}if ((_7364 == std::string ("mioCutClique"))){ return (int)59; }else {}if ((_7364 == std::string ("mioCutImpliedBound"))){ return (int)62; }else {}if ((_7364 == std::string ("mioCutKnapsackCover"))){ return (int)63; }else {}if ((_7364 == std::string ("mioCutGmi"))){ return (int)61; }else {}if ((_7364 == std::string ("sensitivityType"))){ return (int)114; }else {}if ((_7364 == std::string ("mioConstructSol"))){ return (int)58; }else {}if ((_7364 == std::string ("presolveLindepRelWorkTrh"))){ return (int)97; }else {}if ((_7364 == std::string ("presolveLindepAbsWorkTrh"))){ return (int)96; }else {}if ((_7364 == std::string ("sensitivityAll"))){ return (int)112; }else {}if ((_7364 == std::string ("logFeasRepair"))){ return (int)41; }else {}if ((_7364 == std::string ("cacheLicense"))){ return (int)9; }else {}if ((_7364 == std::string ("intpntRegularizationUse"))){ return (int)25; }else {}if ((_7364 == std::string ("simSolveForm"))){ return (int)136; }else {}if ((_7364 == std::string ("simSwitchOptimizer"))){ return (int)138; }else {}if ((_7364 == std::string ("writeIgnoreIncompatibleItems"))){ return (int)154; }else {}if ((_7364 == std::string ("checkConvexity"))){ return (int)10; }else {}if ((_7364 == std::string ("logCheckConvexity"))){ return (int)38; }else {}if ((_7364 == std::string ("autoSortABeforeOpt"))){ return (int)2; }else {}if ((_7364 == std::string ("sensitivityOptimizer"))){ return (int)113; }else {}if ((_7364 == std::string ("writeXmlMode"))){ return (int)172; }else {}if ((_7364 == std::string ("anaSolBasis"))){ return (int)0; }else {}if ((_7364 == std::string ("anaSolPrintViolated"))){ return (int)1; }else {}if ((_7364 == std::string ("basisSolveUsePlusOne"))){ return (int)4; }else {}if ((_7364 == std::string ("compressStatfile"))){ return (int)11; }else {}if ((_7364 == std::string ("mioRinsMaxNodes"))){ return (int)75; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_sparam_value( const std::string & _7365){ if ((_7365 == std::string ("dataFileName"))){ return (int)1; }else {}if ((_7365 == std::string ("paramReadFileName"))){ return (int)7; }else {}if ((_7365 == std::string ("paramWriteFileName"))){ return (int)8; }else {}if ((_7365 == std::string ("paramCommentSign"))){ return (int)6; }else {}if ((_7365 == std::string ("debugFileName"))){ return (int)2; }else {}if ((_7365 == std::string ("basSolFileName"))){ return (int)0; }else {}if ((_7365 == std::string ("itrSolFileName"))){ return (int)4; }else {}if ((_7365 == std::string ("intSolFileName"))){ return (int)3; }else {}if ((_7365 == std::string ("solFilterXcLow"))){ return (int)16; }else {}if ((_7365 == std::string ("solFilterXcUpr"))){ return (int)17; }else {}if ((_7365 == std::string ("solFilterXxLow"))){ return (int)18; }else {}if ((_7365 == std::string ("solFilterXxUpr"))){ return (int)19; }else {}if ((_7365 == std::string ("readMpsObjName"))){ return (int)10; }else {}if ((_7365 == std::string ("readMpsRanName"))){ return (int)11; }else {}if ((_7365 == std::string ("readMpsRhsName"))){ return (int)12; }else {}if ((_7365 == std::string ("readMpsBouName"))){ return (int)9; }else {}if ((_7365 == std::string ("statFileName"))){ return (int)20; }else {}if ((_7365 == std::string ("statName"))){ return (int)22; }else {}if ((_7365 == std::string ("statKey"))){ return (int)21; }else {}if ((_7365 == std::string ("writeLpGenVarName"))){ return (int)23; }else {}if ((_7365 == std::string ("sensitivityResFileName"))){ return (int)15; }else {}if ((_7365 == std::string ("sensitivityFileName"))){ return (int)14; }else {}if ((_7365 == std::string ("mioDebugString"))){ return (int)5; }else {}if ((_7365 == std::string ("remoteAccessToken"))){ return (int)13; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_intpnthotstart_value( const std::string & _7366){ if ((_7366 == std::string ("none"))){ return (int)0; }else {}if ((_7366 == std::string ("primal"))){ return (int)1; }else {}if ((_7366 == std::string ("dual"))){ return (int)2; }else {}if ((_7366 == std::string ("primalDual"))){ return (int)3; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_uplo_value( const std::string & _7367){ if ((_7367 == std::string ("lo"))){ return (int)0; }else {}if ((_7367 == std::string ("up"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_sensitivitytype_value( const std::string & _7368){ if ((_7368 == std::string ("basis"))){ return (int)0; }else {}if ((_7368 == std::string ("optimalPartition"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_accmode_value( const std::string & _7369){ if ((_7369 == std::string ("var"))){ return (int)0; }else {}if ((_7369 == std::string ("con"))){ return (int)1; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_problemitem_value( const std::string & _7370){ if ((_7370 == std::string ("var"))){ return (int)0; }else {}if ((_7370 == std::string ("con"))){ return (int)1; }else {}if ((_7370 == std::string ("cone"))){ return (int)2; }else {}return (- (int)1); }int mosek::fusion::p_Parameters::string_to_solveform_value( const std::string & _7371){ if ((_7371 == std::string ("free"))){ return (int)0; }else {}if ((_7371 == std::string ("primal"))){ return (int)1; }else {}if ((_7371 == std::string ("dual"))){ return (int)2; }else {}return (- (int)1); }void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }